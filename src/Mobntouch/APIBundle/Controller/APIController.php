<?php

namespace Mobntouch\APIBundle\Controller;

# Symfony

use Nelmio\ApiDocBundle\Annotation\ApiDoc;
//use JMS\SerializerBundle\JMSSerializerBundle;
use Symfony\Component\HttpFoundation\Request;
//use Symfony\Component\HttpFoundation\Response;
use FOS\RestBundle\Controller\FOSRestController;
use Symfony\Component\HttpFoundation\JsonResponse;
//use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\DomCrawler\Crawler;
use Doctrine\ODM\MongoDB\Query\Query;
use Symfony\Component\Process\Process;

# Encoders Password
use Symfony\Component\Security\Core\Encoder\EncoderFactory;
use Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder;

#Token User
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;

# Exceptions
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;     // 404
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;   // 400
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException; // 403
# DOCUMENTS
use Mobntouch\DataBaseBundle\Document\Mail;
use Mobntouch\DataBaseBundle\Document\User;
use Mobntouch\DataBaseBundle\Document\UserRoles;
use Mobntouch\DataBaseBundle\Document\Offer;
use Mobntouch\DataBaseBundle\Document\OfferReply;
use Mobntouch\DataBaseBundle\Document\Company;
use Mobntouch\DataBaseBundle\Document\UserSearch;
use Mobntouch\DataBaseBundle\Document\CompanySearch;
use Mobntouch\DataBaseBundle\Document\Event;
use Mobntouch\DataBaseBundle\Document\Update;
use Mobntouch\DataBaseBundle\Document\UsersActivity;
use Mobntouch\DataBaseBundle\Document\Invitation;
use Mobntouch\DataBaseBundle\Document\ServiceSuggestions;
use Mobntouch\DataBaseBundle\Document\Jobs;
//Classes to make things easy
use Mobntouch\APIBundle\Classes\Utility;
use Mobntouch\APIBundle\Classes\ManageUser;
use Mobntouch\APIBundle\Classes\ManageSearch;
use Mobntouch\APIBundle\Classes\ManageAvatarAndCover;
use Mobntouch\APIBundle\Classes\ManageUserAndCompanySearch;
use Mobntouch\APIBundle\Classes\ManageKeywords;
use Mobntouch\APIBundle\Classes\ManageMutualConnections;
use Mobntouch\APIBundle\Classes\ManageJob;
use Mobntouch\APIBundle\Classes\VCFReader;

class APIController extends FOSRestController {

//-------------------------- Sendy Config --------------------------//
    private $sendy_installation_url = 'https://sendy.mobintouch.com'; //Your Sendy installation (without the trailing slash)
    private $validatedList = 'HC4zNA5ogmqcLhSgrhpXbw'; // Validated Emails
    private $weeklyList = 'fK0dJ2cm763ivy3dyzbBGObg'; // Weekly Digest
    private $marketingList = 'j1Io7lLi8UCAYNN1aJAw763w'; // Weekly Digest

//---------------------------------------------------------------------------//
    //Get current loggedin user by token

    /**
     * @ApiDoc(
     *  tags={
     *         "user",
     *     },
     *  description="Get current authenticated user",
     *  parameters={},
     *  statusCodes={
     *         200="Returned when successful",
     *         401="Returned authorisation token is not present in header",
     *         403="Returned when the user is not authorized",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getCurrentUserAction() {
        return new JsonResponse($this->getCurrentUser());
    }

    //Update player id for Push Notification to the currently access device
    /**
     * @ApiDoc(
     *  tags={
     *         "push",
     *     },
     *  description="Update player id to send push notificatoin",
     *  parameters={
     *      {"name" ="player_id","dataType":"string","required"=false, "description"="Required when parameter set value is true."},
     *      {"name" ="type","dataType":"string","required"=false, "description"="Required when you want to set playerid while removing it is not required. to set player_id pass value 'set'"}
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="Returned authorisation token is not present in header",
     *         403="Returned when the user is not authorized",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function updatePlayerIdAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            if (array_key_exists('type', $request->request->all())) {
                $dm = $this->get('doctrine_mongodb.odm.document_manager');
                if ($request->request->get('type') == 'set') {
                    $dm->createQueryBuilder('DataBaseBundle:User')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($user->getId())
                            ->field("playerId")->set($request->request->get('player_id'))
                            ->field('updateDate')->set(time())
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                } else {
                    $dm->createQueryBuilder('DataBaseBundle:User')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($user->getId())
                            ->field("playerId")->unsetField()->exists(true)
                            ->field('updateDate')->set(time())
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                }
                $dm->flush();
                $dm->clear();
            }
            return new JsonResponse();
        }
    }

    //Social authentication using google plus and facebook apis
    /**
     * @ApiDoc(
     *  tags={
     *         "login", "signup"
     *     },
     *  description="Socail authentication using social apis facebook google plus etc.",
     *  parameters={
     *      {"name" ="data","dataType":"array","required"=true, "description"="Contains response of social api."},
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When users authentication details in invalid",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialauthenticateAction(Request $request) {
        $data = json_decode($request->getContent());
        //Setup database object
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $exceptionMessage = array('code' => 401, 'message' => 'Bad credentials');
        if (isset($data->data->platform)) {
            if ($data->data->platform === 'facebook') {
                $email = $data->data->email;
                $id = $data->data->id;
                $auth_token = substr(explode('.', $data->signedRequest)[1], 0, 50);
                $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email, 'facebookId' => $id, 'facebookAuthToken' => $auth_token));
            } elseif ($data->data->platform === 'google') {
                $email = $data->email;
                $id = $data->id;
                $auth_token = $data->login_hint;
                $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email, 'googleId' => $id, 'googleAuthToken' => $auth_token));
            } else {
                return new JsonResponse($exceptionMessage, 401);
            }
        }
        if (isset($user) && $user) {
            //User found generate token
            $token = $this->get('lexik_jwt_authentication.encoder')
                    ->encode(['username' => $user->getUsername()]);
            return new JsonResponse(array('token' => $token));
        } else {
            //Check emailid is exists or not if not exists register user
            $u = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email));
            if (isset($u) && $u) {
                return new JsonResponse($exceptionMessage, 401);
            } else {
                $newUser = json_decode($this->socialregisterAction($request)->getContent());
                $token = $this->get('lexik_jwt_authentication.encoder')
                        ->encode(['username' => $newUser->user->username]);
                return new JsonResponse(array('token' => $token));
            }
        }
    }

    //Register user using social apis facebook and google plus
    /**
     * @ApiDoc(
     *  tags={
     *        "signup"
     *     },
     *  description="Socail signup using social apis facebook google plus etc.",
     *  parameters={
     *      {"name" ="data","dataType":"array","required"=true, "description"="Contains response of social api."},
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user email is already exists",
     *         404={
     *           "Returned when something required data not found"
     *         }
     *     }
     * )
     */
    public function socialregisterAction(Request $request) {
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $headers = $request->headers->all();
        $postdata = json_decode($request->getContent());
        $data = $postdata->data;
        if (isset($data->platform) && $data->platform === 'google') {
            $google_auth_token = $postdata->login_hint;
            $google_id = $postdata->id;
            $email = $postdata->email;
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email/* , 'googleId' => $google_id, 'googleAuthToken' => $google_auth_token */));
            if ($user instanceof User) {
                throw new AccessDeniedHttpException();   // 403 user already registered please login to access account
            }
            if (isset($data->url)) {
                $url = $data->url;
            }
            if (isset($data->image) && isset($data->image->url)) {
                $image_url = $data->image->url;
            }
            if (isset($data->cover) && isset($data->cover->coverPhoto) && isset($data->cover->coverPhoto->url)) {
                $cover_url = $data->cover->coverPhoto->url;
            }
            if (isset($data->aboutMe)) {
                $about = $data->aboutMe;
            }
            if (isset($data->birthday)) {
                $birthday = explode('-', $data->birthday);
                $birthDD = $birthday[2];
                $birthMM = $birthday[1];
                $birthYYY = $birthday[0];
            }
            if (isset($data->organizations)) {
                $arrExperience = array();
                $arrEducation = array();
                foreach ($data->organizations as $org) {
                    if ($org->type == 'school') {
                        $arrEducation[] = array(
                            'fromperiod' => isset($org->startDate) ? date(DATE_ATOM, strtotime($org->startDate . '-01-01')) : null,
                            'toperiod' => isset($org->endDate) ? date(DATE_ATOM, strtotime($org->endDate . '-01-01')) : null,
                            'currently' => $org->primary,
                            'degree' => isset($org->title) ? $org->title : null,
                            'college' => isset($org->name) ? $org->name : null
                        );
                    } else if ($org->type == 'work') {
                        $arrExperience[] = array(
                            'fromperiod' => isset($org->startDate) ? date(DATE_ATOM, strtotime($org->startDate . '-01-01')) : null,
                            'toperiod' => isset($org->endDate) ? date(DATE_ATOM, strtotime($org->endDate . '-01-01')) : null,
                            'currently' => $org->primary,
                            'jobtitle' => isset($org->title) ? $org->title : null,
                            'company' => isset($org->name) ? $org->name : null
                        );
                        if ($org->primary && isset($org->title)) {
                            $jobTitle = $org->title;
                        }
                        if ($org->primary && isset($org->name) && !isset($company)) {
                            $company = $org->name;
                        }
                    }
                }
            }

            if (isset($data->placesLived)) {
                $data->placesLived[0]->primary = false;
                foreach ($data->placesLived as $place) {
                    if ($place->primary) {
                        $city = $place->value;
                        break;
                    }
                }
                if (!isset($city)) {
                    $city = $data->placesLived[0]->value;
                }
            }

            if (isset($data->urls)) {
                foreach ($data->urls as $u) {
                    if ($u->type === 'other') {
                        $website = $u->value;
                        break;
                    }
                }
            }
            if (isset($data->gender)) {
                $gender = $data->gender;
            }
            //return new JsonResponse();
        } else if (isset($data->platform) && $data->platform === 'facebook') {
            $facebook_auth_token = substr(explode('.', $postdata->signedRequest)[1], 0, 50);
            $facebook_id = $data->id;
            $email = $data->email;
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email/* , 'facebookId' => $facebook_id, 'facebookAuthToken' => $facebook_auth_token */));
            if ($user instanceof User) {
                throw new AccessDeniedHttpException();   // 403 user already registered please login to access account
            }
            $url = $data->link;
            if (isset($data->picture) && isset($data->picture->data) && isset($data->picture->data->url)) {
                $image_url = $data->picture->data->url;
            }
            if (isset($data->cover) && isset($data->cover->source)) {
                $cover_url = $data->cover->source;
            }
            if (isset($data->about)) {
                $about = $data->about;
            }
            if (isset($data->birthday)) {
                $birthday = explode('/', $data->birthday);
                $birthDD = $birthday[1];
                $birthMM = $birthday[0];
                $birthYYY = $birthday[2];
            }
            if (isset($data->work)) {
                $arrExperience = array();
                foreach ($data->work as $org) {
                    $arrExperience[] = array(
                        'fromperiod' => isset($org->start_date) && $org->start_date != '0000-00' ? date(DATE_ATOM, strtotime($org->start_date)) : null,
                        'toperiod' => isset($org->end_date) && $org->end_date != '0000-00' ? date(DATE_ATOM, strtotime($org->end_date)) : null,
                        'jobtitle' => isset($org->position) && isset($org->position->name) ? $org->position->name : null,
                        'company' => isset($org->employeer) && isset($org->employeer->name) ? $org->employeer->name : null,
                        'description' => isset($org->description) ? $org->description : null,
                        'location' => isset($org->location) && isset($org->location->name) ? $org->location->name : null,
                        'currently' => !isset($org->end_date) ? true : false,
                    );

                    if (!isset($org->end_date) && isset($org->employeer->name)) {
                        $company = $org->employeer->name;
                    }
                    if (!isset($org->end_date) && isset($org->position) && isset($org->position->name)) {
                        $jobTitle = $org->position->name;
                    }
                }
            }

            if (isset($data->education)) {
                $arrEducation = array();
                foreach ($data->education as $edu) {
                    $arrEducation[] = array(
                        'college' => $edu->school->name,
                        'type' => isset($edu->type) ? $edu->type : null,
                        'degree' => isset($edu->degree) && isset($edu->degree->name) ? $edu->degree->name : null
                    );
                }
            }

            if (isset($data->location) && isset($data->location->name)) {
                $city = explode(',', $data->location->name)[0];
            }

            if (isset($data->languages)) {
                $arrLanguages = array();
                foreach ($data->languages as $language) {
                    $arrLanguages[] = $language->name;
                }
            }

            if (isset($data->website)) {
                $website = $data->website;
            }

            if (isset($data->gender)) {
                $gender = $data->gender;
            }

            //return new JsonResponse($facebook_auth_token);
        } else {
            return new JsonResponse(array('message' => 'Invalid data', 'code' => 401), 401);
        }
        $first_name = $data->platform === 'facebook' ? $data->first_name : $data->name->givenName;
        $last_name = $data->platform === 'facebook' ? $data->last_name : $data->name->familyName;
        if (!$first_name || !$last_name || !$email || ($data->platform === 'facebook' && (!$facebook_id || !$facebook_auth_token)) || ($data->platform === 'google' && (!$google_id || !$google_auth_token))) {
            throw new BadRequestHttpException();     // 404
        }
        $time = time();
        $user = new User();
        if ($data->platform == 'facebook') {
            $user->setFacebookId($facebook_id);
            $user->setFacebookAuthToken($facebook_auth_token);
            $user->setFacebookUrl($url);
        }
        if ($data->platform == 'google') {
            $user->setGoogleId($google_id);
            $user->setGoogleAuthToken($google_auth_token);
            if (isset($url))
                $user->setGoogleUrl($url);
        }
        $user->setName($first_name);
        $user->setLastname($last_name);
        $username = $this->newUsername($first_name, $last_name);
        $user->setUsername($username);
        $explodeName = explode(" ", $first_name);
        $explodeLastName = explode(" ", $last_name);
        $search = array_merge($explodeName, $explodeLastName, array($username));
        $user->setSearch($search);
        $user->setEmail($email);
        $user->setContactEmail($email);
        if (isset($about)) {
            $user->setSummary($about);
        }
        if (isset($birthDD) && isset($birthMM) && isset($birthYYY)) {
            $user->setBirthdayDD($birthDD);
            $user->setBirthdayMM($birthMM);
            $user->setBirthdayYYYY($birthYYY);
        }
        if (isset($jobTitle)) {
            $user->setJobTitle($jobTitle);
        }
        if (isset($company)) {
            $user->setCompany($company);
        }
        $user->setPlainPassword(null);
        $user->setEnabled(true);
        $user->setValidated(false); //Autovalidate User
        $user->setBuyTraffic(array());
        $user->setSellTraffic(array());
        if (isset($arrExperience) && count($arrExperience) > 0) {
            //Remove null values from array
            foreach ($arrExperience as $ke => $exp) {
                foreach ($exp as $key => $value) {
                    if (is_null($value) || $value == '')
                        unset($arrExperience[$ke][$key]);
                }
            }
            $user->setExperiences($arrExperience);
        }
        else {
            $user->setExperiences(array());
        }
        if (isset($arrEducation) && count($arrEducation) > 0) {
            //Remove null values from array
            foreach ($arrEducation as $ke => $edu) {
                foreach ($edu as $key => $value) {
                    if (is_null($value) || $value == '')
                        unset($arrEducation[$ke][$key]);
                }
            }
            $user->setEducations($arrEducation);
        }else {
            $user->setEducations(array());
        }

        if (isset($city)) {
            $user->setCity($city);
        }
        $user->setIosApps(array());
        $user->setAndroidApps(array());
        $user->setCategories(array());
        $user->setCompetences(array());
        if (isset($arrLanguages) && count($arrLanguages) > 0) {
            $user->setLanguages($arrLanguages);
        } else {
            $user->setLanguages(array());
        }
        if (isset($website)) {
            $user->setWebsite($website);
        }
        if (isset($gender)) {
            $user->setGender($gender);
        }
        $user->setFollowing(array());
        $user->setFollowers(array());
        $user->setCompanySubType(array());
        $user->setPaymentMethods(array());
        $user->setPaymentTerms(array());
        $user->setResponseRate(floatval(0.0));
        $user->setTotalReceivedEmails(0);
        $user->setPrivacyHidden(false);
        $user->setProfilePercentages(0);
        $user->setRepliedOffers(array());
        $user->setHasEmployer(true);
        $token = isset($headers['authorization']) ? $headers['authorization'] : null;
        if ($token)
            $token = trim(substr($token[0], 7));
        $user->setToken($token ? $token : 'signin');

        $hash = md5(rand(0, 1000)); // Generate random 32 character hash and assign it to a local variable.
        $user->setEmailValidationHash($hash);
        if (isset($image_url) && parse_url($image_url) && strpos($image_url, 'AAAAAAAAAAA/4252rscbv5M/photo.jpg') === false) {
            $image_url = str_replace('sz=50', 'sz=183', $image_url); //to get quality image from google bydefault it return 50 * 50 image
            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/profile/avatars/";
            else
                $copypath = "/../../web/src/cdn/img/profile/avatars/";
            $realpath = "/img/profile/avatars/";
            $imageName = $user->getUsername();
            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
            $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
            $avatar = $manageAvatarAndCover->uploadAvatarOrCover($image_url, $imageName, 'avatar', 'profile', false, 'url');
            $user->setAvatar($avatar);
        }

        if (isset($cover_url)) {
            $cover_url = str_replace('=s630', '=s860', $cover_url); //to get quality image from google bydefault it return 50 * 50 image
            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/profile/covers/";
            else
                $copypath = "/../../web/src/cdn/img/profile/covers/";
            $realpath = "/img/profile/covers/";

            $imageName = $user->getUsername();
            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setProfileCoverRealPath($realpath);
            $manageAvatarAndCover->setProfileCoverCopyPath($copypath);
            $cover = $manageAvatarAndCover->uploadAvatarOrCover($cover_url, $imageName, 'cover', 'profile', false, 'url');
            $user->setCover($cover);
        }
        $dm->persist($user);
        $dm->flush();
        $dm->clear();

        $ip = $this->getIp();

        // Add user mail to sendy newsletter
        $postdata = http_build_query(
                array(
                    'name' => $user->getName(),
                    'email' => $email,
                    'list' => $this->weeklyList,
                    'boolean' => 'true'
                )
        );
        $opts = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $postdata));
        $context = stream_context_create($opts);
  //      $result = file_get_contents($this->sendy_installation_url . '/subscribe', false, $context);
        return new JsonResponse(array('user' => $user, 'ip' => $ip));
    }

    //Step 1 create user using email and password
    //Previos methos was registerStep1 that is available in this controller and commented in routing file
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  description="Signup step-1 using email",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the email already regsitered in system",
     *         404={
     *           "Returned when required parameter not found"
     *         }
     *     }
     * )
     */
    public function registerAction(Request $request) {
        $postdata = $request->getContent();
        $headers = $request->headers->all();
        $data = json_decode($postdata);

        if (!isset($data->email) || !isset($data->password)) {
            throw new BadRequestHttpException();     // 404
        }

        $email = strtolower(trim($data->email));
        $password = $data->password;
        $invitedBy = $data->invitedby;

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $mngUser = new ManageUser($dm, $this->container);
        $u = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email));

        if ($u instanceof User) {
            throw new AccessDeniedHttpException();
        }

        $user = new User();
        $user->setUsername($mngUser->newAutoGeneratedUsername($email));
        $user->setEmail($email);
        $user->setContactEmail($email);
        $user->setPlainPassword($password);
        $user->setEnabled(true);
        $user->setValidated(false);
        $user->setBuyTraffic(array());
        $user->setSellTraffic(array());
        $user->setExperiences(array());
        $user->setIosApps(array());
        $user->setAndroidApps(array());
        $user->setCategories(array());
        $user->setCompetences(array());
        $user->setLanguages(array());
        $user->setFollowing(array());
        $user->setFollowers(array());
        $user->setCompanySubType(array());
        $user->setPaymentMethods(array());
        $user->setPaymentTerms(array());
        $user->setResponseRate(floatval(0.0));
        $user->setTotalReceivedEmails(0);
        $user->setPrivacyHidden(false);
        $user->setProfilePercentages(0);
        $user->setRepliedOffers(array());
        $user->setHasEmployer(true);
        $user->setInvitedBy($invitedBy);
        $token = isset($headers['authorization']) ? $headers['authorization'] : null;
        if ($token) {
            $token = trim(substr($token[0], 7));
        }
        $user->setToken($token ? $token : 'signin');
        $hash = md5(rand(0, 1000)); // Generate random 32 character hash and assign it to a local variable.
        $user->setEmailValidationHash($hash);
        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
        $ip = $this->getIp();
        // Add user mail to sendy newsletter
        $sendypostdata = http_build_query(
                array(
                    'name' => $user->getName(),
                    'email' => $email,
                    'list' => $this->weeklyList,
                    'boolean' => 'true'
                )
        );

        $opts = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $sendypostdata));
        $context = stream_context_create($opts);
 //       file_get_contents($this->sendy_installation_url . '/subscribe', false, $context);
        return new JsonResponse(array('user' => $user, 'ip' => $ip));
    }

    //Step2 User personal information and autovalidation
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     *  description="Signup step-2 personal informations",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function registerStep2Action(Request $request) {

        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $headers = $request->headers->all();
        $data = json_decode($postdata);

        if (!isset($data->name) || !isset($data->lastname) || !isset($data->basedCountry)) {
            throw new BadRequestHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $user->setName($data->name);
        $user->setLastname($data->lastname);
        $mngu = new ManageUser($dm, $this->container);
        $user->setUsername($mngu->newUsername($data->name, $data->lastname, $user->getEmail()));
        $user->setGender($data->gender);
        $user->setCity($data->city);
        $user->setCountry($data->country);
        $user->setBasedCountry($data->basedCountry);
        $user->setLat($data->geometrylocation->lat);
        $user->setLng($data->geometrylocation->lng);
        $user->setFormatedAddress($data->formattedaddress);
        $user->setBirthdayDD($data->birthdayDD);
        $user->setBirthdayMM($data->birthdayMM);
        $user->setBirthdayYYYY($data->birthdayYYYY);

        $token = isset($headers['authorization']) ? $headers['authorization'] : null;
        if ($token) {
            $token = trim(substr($token[0], 7));
        }
        $user->setToken($token ? $token : 'signin');
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        if (!$user->getValidated()) {
            $mailValidataion = [];
            $mailValidataion["username"] = $user->getUsername();
            $mailValidataion["email"] = $user->getEmail();
            $mailValidataion["hash"] = $user->getEmailValidationHash();
            $parts = parse_url($_SERVER['HTTP_REFERER']);
            $email = $user->getEmail();
            $welcomelink = 'https://' . $parts["host"];
            $params = array(
                'personalizations' => array(
                    array(
                        'to' => array(
                            array('email' => $email)
                        ),
                        'substitutions' => array(
                            ':logo_link' => $welcomelink,
                            ':logo_name_link' => $welcomelink,
                            ':first_name' => $user->getName(),
                            ':logo_name_link' => $welcomelink,
                            ':welcome_link' => $welcomelink
                        )
                    ),
                ),
                'from' => array(
                    'email' => "noreply@mobintouch.com",
                    'name' => 'Mobintouch'
                ),
                'subject' => "Welcome to Mobintouch",
                'content' => array(array(
                        'type' => 'text/html',
                        'value' => ' '
                    )
                ),
                'template_id' => $this->container->getParameter('template_welcome_id')
            );

            Utility::sendgrid_mail(json_encode($params));
            /* $send_grid_options = array(
              'sub' => array(':first_name' => array($user->getName()), ':logo_name_link' => array($welcomelink), ':welcome_link' => array($welcomelink)),
              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('template_welcome_id'))))
              );
              $params = array(
              'to' => $email,
              'from' => "noreply@mobintouch.com",
              'fromname' => "Mobintouch",
              'subject' => 'Welcome to Mobintouch',
              'html' => " ",
              'x-smtpapi' => json_encode($send_grid_options),
              );
              Utility::sendgrid_mail($params); */
            $user = $this->autoValidateUser($mailValidataion);
        }

        //$keywords = new \Mobntouch\APIBundle\Classes\ManageKeywords($dm);
        //$user->setKeywords($keywords->updateUserKeywords($user));
        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $cmu = new ManageUser($dm, $this->container);
        $resultPer = $cmu->updateProfilePercentage($user); //Update profile per.
        //$resultPer = $cmu->updateAllDocumentsUserDetails($user); // Removed call and added bg process
        //$this->updateProfilePercentage($user);
        $env = $this->get('kernel')->getEnvironment();
        $localPath = $this->container->getParameter('local_console_path');
        $serverPath = $this->container->getParameter('server_console_path');
        if ($env == 'dev') {
            $process = new Process("{$localPath} Job:UpdateProfile {$user->getId()}");
        } else {
            $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
        }
        $process->disableOutput();
        $process->start();

        $token = $this->get('lexik_jwt_authentication.jwt_manager')->create($user);
        $this->sendValidationEmail($user, $token);
        return new JsonResponse(array('user' => $user, 'token' => $token, 'percentage' => $resultPer['percentage'], 'pointes' => $resultPer['points']));
    }

    //step 5 User employment informations
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     *  description="Signup step-5 employment informations",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function registerStep5Action(Request $request) {

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $headers = $request->headers->all();
        $data = json_decode($postdata);

        if (!isset($data->jobTitle) || !isset($data->companyType)) {
            throw new BadRequestHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $user->setJobTitle($data->jobTitle);
        $user->setCompanyType($data->companyType);
        $user->setCompanySubType($data->companySubType);
        $user->setHasEmployer($data->hasEmployer);
        $companyPage = $user->getCompanyPage();
        if (isset($data->grossSalary) && !empty($data->grossSalary)) {
            $user->setGrossSalary($data->grossSalary);
        }
        if (isset($data->currency) && !empty($data->currency)) {
            $user->setCurrency($data->currency);
        }
        $user->setCurrentStatus($data->currentStatus);

        if (!isset($companyPage['administrator'])) {
            if (isset($data->company) && !empty($data->company) && $data->hasEmployer) {
                $user->setCompany($data->company);
            } else {
                $user->setCompany(null);
            }

            if (is_array($user->getCompanyPage()) && array_key_exists('employee', $user->getCompanyPage())) {
                $oldCompanyUserName = $user->getCompanyPage()['employee']['company'];
            } else {
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();
                if (isset($company->username)) {
                    $oldCompanyUserName = $company->username;
                }
            }
            if (isset($oldCompanyUserName) && !empty($oldCompanyUserName)) {
                $oldCompany = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $oldCompanyUserName));
            }

            //Get company by id or name added by user
            if (isset($data->companyid) && $data->hasEmployer) {
                $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $data->companyid));
            } else if (isset($data->company) && $data->hasEmployer) {
                $companyUserName = trim($data->company);
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('name')->equals(new \MongoRegex("/{$companyUserName}/i"))
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();
            }

            //Remove user company page and remove employee from employees list of company
            if (isset($oldCompany) && !isset($company)) {
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
                        ->field('companyPage')->unsetField()->exists(true)
                        ->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                //Check user previously added company or not
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();

                //If user removed company remove user from old company employees object
                if ($company) {
                    $employees = $company->getEmployees();
                    $updateEmployees = false;
                    $newEmployees = array();
                    foreach ($employees as $key => $employee) {
                        if ($employee['id'] == $user->getId()) {
                            $updateEmployees = true;
                        } else {
                            $newEmployees[] = $employee;
                        }
                    }
                    if ($updateEmployees) {
                        $dm->createQueryBuilder('DataBaseBundle:Company')
                                ->update()
                                ->multiple(false)
                                ->field('_id')
                                ->equals($oldCompany->getId())
                                ->field("employees")
                                ->set($newEmployees)
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                }
                $dm->flush();
                $dm->clear();
            } elseif (!isset($oldCompany) && $company) {

                $companyPage = array(
                    "employee" => array('company' => $company->getUsername())
                );

                $dm->createQueryBuilder('DataBaseBundle:User')->update()->multiple(false)->field('_id')->equals($user->getId())->field('companyPage')->set($companyPage)->field('updateDate')->set(time())->upsert(false)->getQuery()->execute();

                $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($company->getId())
                        ->field('employees')->addToSet(array(
                            'id' => $user->getId(),
                            'username' => $user->getUsername(),
                            'name' => $user->getName(),
                            'lastname' => $user->getLastname(),
                            'jobTitle' => $user->getJobTitle(),
                            'avatar' => $user->getAvatar(),
                            'cover' => $user->getCover(),
                            'miniResume' => $user->getMiniResume(),
                            'inTouchCounter' => $user->getInTouchCounter(),
                            'city' => $user->getCity(),
                            'basedCountry' => $user->getBasedCountry(),
                            'responseRate' => $user->getResponseRate()
                        ))
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear();
            } elseif ($company && $oldCompany) {

                $companyPage = array(
                    "employee" => array('company' => $company->getUsername())
                );

                $dm->createQueryBuilder('DataBaseBundle:User')->update()->multiple(false)->field('_id')->equals($user->getId())->field('companyPage')->set($companyPage)->field('updateDate')->set(time())->upsert(false)->getQuery()->execute();


                $employees = $company->getEmployees();
                $updateEmployees = false;

                foreach ($employees as $key => $employee) {
                    if ($employee['id'] == $user->getId()) {
                        $updateEmployees = true;
                        $employees[$key]['name'] = $user->getName();
                        $employees[$key]['lastname'] = $user->getLastName();
                        $employees[$key]['jobTitle'] = $user->getJobTitle();
                        $employees[$key]['avatar'] = $user->getAvatar();
                        $employees[$key]['responseRate'] = $user->getResponseRate();
                        break;
                    }
                }

                if ($updateEmployees) {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')
                            ->equals($company->getId())
                            ->field("employees")
                            ->set($employees)
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                } else {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($company->getId())
                            ->field('employees')->addToSet(array(
                                'id' => $user->getId(),
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'lastname' => $user->getLastname(),
                                'jobTitle' => $user->getJobTitle(),
                                'avatar' => $user->getAvatar(),
                                'cover' => $user->getCover(),
                                'miniResume' => $user->getMiniResume(),
                                'inTouchCounter' => $user->getInTouchCounter(),
                                'city' => $user->getCity(),
                                'basedCountry' => $user->getBasedCountry(),
                                'responseRate' => $user->getResponseRate()
                            ))
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                }


                $employees = $oldCompany->getEmployees();
                $updateEmployees = false;
                $newEmployees = array();
                foreach ($employees as $key => $employee) {
                    if ($employee['id'] == $user->getId()) {
                        $updateEmployees = true;
                    } else {
                        $newEmployees[] = $employee;
                    }
                }
                if ($updateEmployees) {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')
                            ->equals($oldCompany->getId())
                            ->field("employees")
                            ->set($newEmployees)
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                }
                $dm->flush();
                $dm->clear();
            }
        }

        $token = isset($headers['authorization']) ? $headers['authorization'] : null;
        if ($token) {
            $token = trim(substr($token[0], 7));
        }

        $user->setToken($token ? $token : 'signin');

        $this->updateProfilePercentage($user);

        //$keywords = new \Mobntouch\APIBundle\Classes\ManageKeywords($dm);
        //$user->setKeywords($keywords->updateUserKeywords($user));

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();
        return new JsonResponse($user);
    }

    //step 6 collect user interest as individual and company as well
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     *  description="Signup step-6 interested in",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function registerStep6Action(Request $request) {

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $headers = $request->headers->all();
        $data = json_decode($postdata);
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $interestedIn = array();
        foreach ($data->interestedin as $key => $value) {
            $interestedIn[$key] = $value;
        }
        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')
                ->equals($user->getId())
                ->field("interestedIn")
                ->set($interestedIn)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();
        $user->setInterestedIn($interestedIn);
        return new JsonResponse($user);
    }

    //Step No 6 keyword suggestions
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     *  description="Get keywords for suggestions",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function getKeywordsSuggestionsAction() {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $keywords = new ManageKeywords($dm);

        $userKeywords = is_array($user->getKeywords()) ? $user->getKeywords() : array();
        $arrKeywords = $keywords->getSuggestedKeywords($user, 50);

        $arrKeywords = array_filter($arrKeywords, function($elem) use($userKeywords) {
            return !in_array($elem, $userKeywords);
        });

        return new JsonResponse(array_values($arrKeywords));
        //return new JsonResponse(str_replace('-', ' ', $keywords->getSuggestedKeywords($user, 20)));
        //return new JsonResponse(["online advertising","digital marketing","online marketing","mobile marketing","advertising","social media marketing","marketing","mobile advertising","affiliate marketing","digital media","social media","marketing strategy","sem","digital strategy","mobile devices"]);
    }

    //Step No 6 keyword autocomplete
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     *  description="Keywords autocomplete",
     * requirements={
     *      {
     *          "name"="keyword",
     *          "dataType"="string",
     *          "description"="Keyword for searching"
     *      }
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function getKeywordAutocompleteAction($keyword) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $keywords = new ManageKeywords($dm);

        $userKeywords = is_array($user->getKeywords()) ? $user->getKeywords() : array();
        $arrKeywords = $keywords->getAutocompleteKeywords($user, $keyword, 10);

        $arrKeywords = array_filter($arrKeywords, function($elem) use($userKeywords) {
            return !in_array($elem, $userKeywords);
        });

        return new JsonResponse(array_values($arrKeywords));
        //return new JsonResponse(str_replace('-', ' ', $keywords->getAutocompleteKeywords($user, $keyword, 10)));
    }

    //step 6 add interested keywords
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  headers={
     *      {
     *          "name"="Authorization",
     *          "description"="Authorization key",
     *          "required"=true
     *      }
     * },
     * description="Signup step-7 add interested keywords",
     * requirements={
     *      {
     *          "name"="keyword",
     *          "dataType"="string",
     *          "description"="Keyword for searching"
     *      }
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function registerStep7Action(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $postdata = $request->getContent();
        $headers = $request->headers->all();
        $data = json_decode($postdata);
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        //$util = new Utility();
        //$userKeywords = $user->getKeywords();
        //$util->imitateMerge($userKeywords, $data->keywords);
        //$user->setKeywords(array_unique(str_replace('-', ' ', $data->keywords)));
        $keywords = new ManageKeywords($dm);

        $user->setKeywords($data->keywords);
        //$k = $keywords->updateUserKeywords($user);
        //$user->setKeywords($k);
        //$keywords = array_merge($array1) $user->getKeywords();
        //$keywords = new \Mobntouch\APIBundle\Classes\ManageKeywords($dm);
        //$user->setKeywords($keywords->updateUserKeywords($user));

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();


        //$dm->flush();
        //$dm->clear();

        return new JsonResponse($user);
    }

    //Step 7 read linkedin csv contact file
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     * description="Signup step-7 import linkedin contacts",
     *  parameters={
     *  {
     *          "name"="contacts",
     *          "dataType"="file",
     *          "required"=true,
     *          "description"="linkedin csv file"
     *      }
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function importLinkedinCSVContactsAction(Request $request) {

        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $util = new Utility();
        //$file = $request->files->get('contacts');

        $content = file_get_contents($_FILES['contacts']['tmp_name']);

        $contacts = new \Mobntouch\APIBundle\Classes\CSVReader();
        $contacts->set_contents($content);
        $contacts->get_contacts_from_csv();
        $fileContents = str_ireplace(array("\r", "\n", '\r', '\n'), '::-::', $contacts->csv);
        $valArr = explode("::-::", $fileContents);
        $valLength = count($valArr);
        $countContacts = 0;

        if ($valLength > 1) {

            $importedConnections = $user->getImportedConnections() ? $user->getImportedConnections() : array();
            if (!isset($importedConnections['linkedin']) || (isset($importedConnections['linkedin']) && !$importedConnections['linkedin'])) {
                $importedConnections['linkedin'] = true;
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($user->getId())
                        ->field('importedConnections')->set($importedConnections)
                        ->getQuery()
                        ->execute();
            }


            $arrUsers = array();
            $users = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'email', 'avatar', 'inTouchCounter', 'inBusinessRelationCounter', 'jobTitle', 'company')
                    ->getQuery()
                    ->execute();

            foreach ($users as $u) {
                $u['id'] = (string) $u['_id'];
                unset($u['_id']);
                if (is_array($u) && array_key_exists('email', $u)) {
                    $arrUsers[$u['email']] = $u;
                }
            }

            $arrEmails = array_keys($arrUsers);

            $invitedContacts = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                    ->hydrate(false)
                    ->field("userID")->equals($user->getId())
                    ->select('email', 'userId')
                    ->getQuery()
                    ->execute();

            $arrInvitedContacts = array();
            foreach ($invitedContacts as $invited) {
                $arrInvitedContacts[] = $invited['email'];
            }
        }


        $time = time();
        for ($i = 1; $i < $valLength; $i++) {
            $cellArr = explode(",", $valArr[$i]);
            $cellLength = count($cellArr);
            if ($cellLength > 1) {
                foreach ($contacts->email_indices as $key => $email_indice) {
                    $email = $util->cleanStringSoft($cellArr[$key]);
                    if (!empty($email)) {
                        break;
                    }
                }
                if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
                    continue;
                }

                if (in_array($email, $arrInvitedContacts)) {
                    continue;
                }

                foreach ($contacts->name_indices as $key => $value) {
                    $arrNameIndicates = array_values($value);
                    $nameIndicateLength = count($arrNameIndicates);
                    if ($nameIndicateLength == 2) {
                        $first_name = $cellArr[$arrNameIndicates[0]];
                        $last_name = $cellArr[$arrNameIndicates[1]];
                    } else if ($nameIndicateLength == 3) {
                        $first_name = $cellArr[$arrNameIndicates[0]];
                        $last_name = $cellArr[$arrNameIndicates[2]];
                    }

                    $first_name = trim($util->cleanString($first_name));
                    $last_name = trim($util->cleanString($last_name));
                    if (!empty($first_name)) {
                        break;
                    }
                }
                foreach ($contacts->company_indices as $key => $company_indice) {
                    $company = trim($util->cleanString($cellArr[$key]));
                    if (!empty($company)) {
                        break;
                    }
                }
                foreach ($contacts->jobtitle_indices as $key => $jobtitle_indice) {
                    $jobTitle = trim($util->cleanString($cellArr[$key]));
                    if (!empty($jobTitle)) {
                        break;
                    }
                }
                $first_name = trim($first_name);
                if (empty($first_name)) {
                    $first_name = explode('@', $email)[0];
                }


                $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                ->insert()
                                ->field("userID")->set($user->getId());
                if (isset($first_name) && !empty($first_name)) {
                    $q->field("firstname")->set($first_name);
                }
                if (isset($last_name) && !empty($last_name)) {
                    $q->field("lastname")->set($last_name);
                }
                if (isset($company) && !empty($company)) {
                    $q->field("company")->set($company);
                }
                if (isset($jobTitle) && !empty($jobTitle)) {
                    $q->field("jobTitle")->set($jobTitle);
                }
                $q->field("email")->set($email);
                $q->field("isInvited")->set(false);
                $isAlreadyExists = in_array($email, $arrEmails);
                $q->field("isAlreadyExists")->set($isAlreadyExists);
                if ($isAlreadyExists) {
                    $u = $arrUsers[$email];
                    unset($u['email']);
                    if (!array_key_exists('inTouchCounter', $u)) {
                        $u['inTouchCounter'] = 0;
                    }
                    $q->field("existingUser")->set($u);
                }
                $q->field("provider")->set("csv_provider");
                $q->field("createdDate")->set($time);
                $q->getQuery()->execute();
                $dm->flush();
                $dm->clear();
                $countContacts++;
            }
        }

        $inBusinessRelationCounter = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->field('isAlreadyExists')->equals(true)
                ->field('userID')->equals($user->getId())
                ->getQuery()
                ->execute()
                ->count();

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('inBusinessRelationCounter')->set($inBusinessRelationCounter)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();

        $hasConnectionsToInvite = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->hydrate(false)
                ->field("userID")->equals($user->getId())
                ->field("provider")->equals('csv_provider')
                ->field("isInvited")->equals(false)
                ->select('email', 'userId')
                ->getQuery()
                ->execute()
                ->count();

        return new JsonResponse(array('success' => true, 'contacts_imported' => $countContacts, 'hasConnectionsToInvite' => $hasConnectionsToInvite));
    }

    public function importContactsFromFileAction(Request $request) {

        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $util = new Utility();

        if (isset($_FILES['contacts']) && isset($_FILES['contacts']['name'])) {
            $path_info = pathinfo($_FILES['contacts']['name']);
            $ext = $path_info['extension'];
        }

        $valLength = 0;
        $content = file_get_contents($_FILES['contacts']['tmp_name']);

        if (isset($ext) && ($ext == 'vcf')) {
            $vcf = new VCFReader(false, $content);
            $valLength = count($vcf);
        } else if ($ext) {
            $contacts = new \Mobntouch\APIBundle\Classes\CSVReader();
            $contacts->set_contents($content);
            $contacts->get_contacts_from_csv();
            $fileContents = str_ireplace(array("\r", "\n", '\r', '\n'), '::-::', $contacts->csv);
            $valArr = explode("::-::", $fileContents);
            $valLength = count($valArr);
        }
        $countContacts = 0;
        if (($ext == 'vcf' && $valLength > 0) || ($ext != 'vcf' && $valLength > 1)) {

            $importedConnections = $user->getImportedConnections() ? $user->getImportedConnections() : array();
            if (!isset($importedConnections['file']) || (isset($importedConnections['file']) && !$importedConnections['file'])) {
                $importedConnections['file'] = true;
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($user->getId())
                        ->field('importedConnections')->set($importedConnections)
                        ->getQuery()
                        ->execute();
            }


            $arrUsers = array();
            $users = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'email', 'avatar', 'inTouchCounter', 'inBusinessRelationCounter', 'jobTitle', 'company')
                    ->getQuery()
                    ->execute();

            foreach ($users as $u) {
                $u['id'] = (string) $u['_id'];
                unset($u['_id']);
                if (is_array($u) && array_key_exists('email', $u)) {
                    $arrUsers[$u['email']] = $u;
                }
            }

            $arrEmails = array_keys($arrUsers);

            $invitedContacts = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                    ->hydrate(false)
                    ->field("userID")->equals($user->getId())
                    ->select('email', 'userId')
                    ->getQuery()
                    ->execute();

            $arrInvitedContacts = array();
            foreach ($invitedContacts as $invited) {
                $arrInvitedContacts[] = $invited['email'];
            }
        }
        $time = time();

        if ($ext == 'vcf') {
            if ($valLength == 1) {
                
            } else {
                foreach ($vcf as $vCard) {
                    if (count($vCard->email) > 0) {
                        $email = $vCard->email[0]['Value'];
                        if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    if (in_array($email, $arrInvitedContacts)) {
                        continue;
                    }
                    $first_name = '';
                    if (count($vCard->n) > 0) {
                        $first_name = $vCard->n[0]['FirstName'];
                        $last_name = $vCard->n[0]['LastName'];
                    }
                    if (count($vCard->org) > 0) {
                        $company = $vCard->org[0]['Name'];
                    }
                    $first_name = trim($first_name);
                    if (empty($first_name)) {
                        $first_name = explode('@', $email)[0];
                    }

                    $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                    ->insert()
                                    ->field("userID")->set($user->getId());
                    if (isset($first_name) && !empty($first_name)) {
                        $q->field("firstname")->set($first_name);
                    }
                    if (isset($last_name) && !empty($last_name)) {
                        $q->field("lastname")->set($last_name);
                    }
                    if (isset($company) && !empty($company)) {
                        $q->field("company")->set($company);
                    }
                    if (isset($jobTitle) && !empty($jobTitle)) {
                        $q->field("jobTitle")->set($jobTitle);
                    }
                    $q->field("email")->set($email);
                    $q->field("isInvited")->set(false);
                    $isAlreadyExists = in_array($email, $arrEmails);
                    $q->field("isAlreadyExists")->set($isAlreadyExists);
                    if ($isAlreadyExists) {
                        $u = $arrUsers[$email];
                        unset($u['email']);
                        if (!array_key_exists('inTouchCounter', $u)) {
                            $u['inTouchCounter'] = 0;
                        }
                        $q->field("existingUser")->set($u);
                    }
                    $q->field("provider")->set("file");
                    $q->field("createdDate")->set($time);
                    $q->getQuery()->execute();
                    $dm->flush();
                    $dm->clear();
                    $countContacts++;
                }
            }
        } else {
            for ($i = 1; $i < $valLength; $i++) {
                $cellArr = explode(",", $valArr[$i]);
                $cellLength = count($cellArr);
                if ($cellLength > 1) {
                    foreach ($contacts->email_indices as $key => $email_indice) {
                        $email = $util->cleanStringSoft($cellArr[$key]);
                        if (!empty($email)) {
                            break;
                        }
                    }
                    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
                        continue;
                    }

                    if (in_array($email, $arrInvitedContacts)) {
                        continue;
                    }

                    foreach ($contacts->name_indices as $key => $value) {
                        $arrNameIndicates = array_values($value);
                        $nameIndicateLength = count($arrNameIndicates);
                        if ($nameIndicateLength == 2) {
                            $first_name = $cellArr[$arrNameIndicates[0]];
                            $last_name = $cellArr[$arrNameIndicates[1]];
                        } else if ($nameIndicateLength == 3) {
                            $first_name = $cellArr[$arrNameIndicates[0]];
                            $last_name = $cellArr[$arrNameIndicates[2]];
                        }

                        $first_name = isset($first_name) ? trim($util->cleanString($first_name)) : null;
                        $last_name = isset($last_name) ? trim($util->cleanString($last_name)) : null;

                        if (!empty($first_name)) {
                            break;
                        }
                    }
                    foreach ($contacts->company_indices as $key => $company_indice) {
                        $company = trim($util->cleanString($cellArr[$key]));
                        if (!empty($company)) {
                            break;
                        }
                    }
                    foreach ($contacts->jobtitle_indices as $key => $jobtitle_indice) {
                        $jobTitle = trim($util->cleanString($cellArr[$key]));
                        if (!empty($jobTitle)) {
                            break;
                        }
                    }
                    $first_name = trim($first_name);
                    if (empty($first_name)) {
                        $first_name = explode('@', $email)[0];
                    }


                    $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                    ->insert()
                                    ->field("userID")->set($user->getId());
                    if (isset($first_name) && !empty($first_name)) {
                        $q->field("firstname")->set($first_name);
                    }
                    if (isset($last_name) && !empty($last_name)) {
                        $q->field("lastname")->set($last_name);
                    }
                    if (isset($company) && !empty($company)) {
                        $q->field("company")->set($company);
                    }
                    if (isset($jobTitle) && !empty($jobTitle)) {
                        $q->field("jobTitle")->set($jobTitle);
                    }
                    $q->field("email")->set($email);
                    $q->field("isInvited")->set(false);
                    $isAlreadyExists = in_array($email, $arrEmails);
                    $q->field("isAlreadyExists")->set($isAlreadyExists);
                    if ($isAlreadyExists) {
                        $u = $arrUsers[$email];
                        unset($u['email']);
                        if (!array_key_exists('inTouchCounter', $u)) {
                            $u['inTouchCounter'] = 0;
                        }
                        $q->field("existingUser")->set($u);
                    }
                    $q->field("provider")->set("file");
                    $q->field("createdDate")->set($time);
                    $q->getQuery()->execute();
                    $dm->flush();
                    $dm->clear();
                    $countContacts++;
                }
            }
        }

        $inBusinessRelationCounter = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->field('isAlreadyExists')->equals(true)
                ->field('userID')->equals($user->getId())
                ->getQuery()
                ->execute()
                ->count();

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('inBusinessRelationCounter')->set($inBusinessRelationCounter)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();

        $hasConnectionsToInvite = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->hydrate(false)
                ->field("userID")->equals($user->getId())
                ->field("provider")->equals('file')
                ->field("isInvited")->equals(false)
                ->select('email', 'userId')
                ->getQuery()
                ->execute()
                ->count();

        return new JsonResponse(array('success' => true, 'contacts_imported' => $countContacts, 'hasConnectionsToInvite' => $hasConnectionsToInvite));
    }

    //Step 8 retrive contact list to invite
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  description="Signup step-8 Get contact lists",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function getContactListAction(Request $request, $service) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        if ($service == 'linkedin')
            $service = 'csv_provider';

        $invitedContacts = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->field("userID")->equals($user->getId())
                ->field("isInvited")->equals(false)
                ->field("provider")->equals($service)
                ->getQuery()
                ->execute()
                ->toArray();

        $arrContactWithSameJobTitleAndAlreadyExists = array();
        $arrContactAlreadyExists = array();
        $arrContactNotExists = array();

        foreach ($invitedContacts as $invite) {
            $invite->selected = true;

            if (!$invite->firstname && !$invite->lastname) {
                $invite->firstname = explode('@', $invite->email)[0];
            }

            if (isset($invite->jobTitle) && strtolower($invite->jobTitle) == strtolower($user->getJobtitle()) && $invite->isAlreadyExists) {
                $arrContactWithSameJobTitleAndAlreadyExists[] = (array) $invite;
            } else if ($invite->isAlreadyExists) {
                $arrContactAlreadyExists[] = (array) $invite;
            } else if (!$invite->isAlreadyExists) {
                $arrContactNotExists[] = (array) $invite;
            }
        }

        usort($arrContactWithSameJobTitleAndAlreadyExists, function($a, $b) {
            return $b['existingUser']['inTouchCounter'] - $a['existingUser']['inTouchCounter'];
        });

        usort($arrContactAlreadyExists, function($a, $b) {
            return $b['existingUser']['inTouchCounter'] - $a['existingUser']['inTouchCounter'];
        });

        /* usort($arrContactNotExists, function($a, $b) {
          return strcasecmp($a['firstname'], $b['firstname']);
          }); */

        if ($arrContactNotExists) {
            $sort = array();
            foreach ($arrContactNotExists as $k => $v) {
                $sort['firstname'][$k] = $v['firstname'];
                $sort['lastname'][$k] = $v['lastname'];
            }
            array_multisort($sort['firstname'], SORT_ASC, $sort['lastname'], SORT_ASC, $arrContactNotExists);
        }
        return new JsonResponse(array('success' => true, 'contacts' => array_merge($arrContactWithSameJobTitleAndAlreadyExists, $arrContactAlreadyExists, $arrContactNotExists)));
    }

    //Step 8 update invited contact list to invite
    /**
     * @ApiDoc(
     *  tags={
     *         "signup"
     *     },
     *  description="Signup step-9 update invite contacts",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function updateInvitedContactsAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $data = json_decode($request->getContent());
        $util = new Utility();
        $time = time();
        $parts = parse_url($_SERVER['HTTP_REFERER']);
        $contacts = $data->contacts;
        $note = $data->note;
        $arrEmailsToNotify = array();
        $arrEmailsToInvite = array();
        $inTouch = $user->getInTouch();
        $arrInTouchIds = array();
        if (!empty($inTouch)) {
            $arrInTouchIds = $this->array_column($inTouch, 'id');
        }
        $inTouchContacts = array();

        switch ($this->get('kernel')->getEnvironment()) {
            case 'adhoc':
                $baseURL = 'https://cdn-dev.mobintouch.com';
                break;
            case 'prod':
                $baseURL = 'https://cdn.mobintouch.com';
                break;
            default:
                $baseURL = 'https://cdn.mobintouch.com';
                break;
        }
        $userJobTitleCompany = $user->getJobTitle() && $user->getCompany() ? $user->getJobTitle() . ' at ' . $user->getCompany() : $user->getJobTitle();
        $userProfileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';
        $inviteLink = 'https://' . $parts["host"] . "/signup/" . $user->getId();
        $manageConnectionLink = 'https://' . $parts["host"] . "/connections/direct";
        $noOfConnections = isset($inTouch) && is_array($inTouch) ? count($inTouch) : 0;

        foreach ($contacts as $contact) {
            if ($contact->isAlreadyExists && !$contact->isInvited) {
                $arrEmailsToNotify[$contact->id] = $contact->email;
                if (!in_array($contact->existingUser->id, $arrInTouchIds)) {
                    $inTouchContacts[] = array(
                        'id' => $contact->existingUser->id,
                        'status' => 3,
                        'date' => $time,
                        'name' => $contact->firstname,
                        'lastname' => $contact->lastname,
                        'username' => $contact->existingUser->username,
                        'avatar' => isset($contact->existingUser->avatar) ? $contact->existingUser->avatar : null,
                        'jobTitle' => isset($contact->existingUser->jobTitle) ? $contact->existingUser->jobTitle : null,
                        'company' => isset($contact->existingUser->company) ? $contact->existingUser->company : null
                    );

                    $dm->createQueryBuilder('DataBaseBundle:User')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($contact->existingUser->id)
                            ->field('inTouch')->addToSet(
                                    array(
                                        'id' => $user->getId(),
                                        'username' => $user->getUsername(),
                                        'name' => $user->getName(),
                                        'lastname' => $user->getLastname(),
                                        'avatar' => $user->getAvatar(),
                                        'cover' => $user->getCover(),
                                        'miniResume' => $user->getMiniResume(),
                                        'jobTitle' => $user->getJobTitle(),
                                        'company' => $user->getCompany(),
                                        'status' => 3,
                                        'date' => $time
                                    )
                            ) // Status = 2 : Waiting to be validated
                            ->field("inTouchCounter")->inc(1)
                            ->field('alertsNotifications')->inc(1)
                            ->field('alerts')->push(array('$each' => array(array(
                                        'id' => $user->getId() . time(),
                                        'type' => 1,
                                        'read' => false,
                                        'action' => 'now connected with you.',
                                        'username' => $user->getUsername(),
                                        'name' => $user->getName(),
                                        'lastname' => $user->getLastname(),
                                        'avatar' => $user->getAvatar(),
                                        'date' => time() * 1000
                                    )), '$slice' => -90))
                            ->field('updateDate')->set($time)
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                }
                if ($this->get('kernel')->getEnvironment() == 'prod') {
                    //Custom note for invite email is remaining need to set in invite email var is $note its value "" when user didnt set anything
                    /*
                      $send_grid_options = array(
                      'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':url' => array('https://' . $parts["host"] . "/profile/" . $user->getUsername()), ':sender_img' => array($userProfileUrl)),
                      'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_already_exists_contact_template_id'))))
                      );
                      $params = array(
                      'to' => $contact->email,
                      'from' => "noreply@mobintouch.com",
                      'fromname' => $user->name . " " . $user->lastname,
                      'subject' => $user->name . " " . $user->lastname . " is now on mobintouch",
                      'html' => " ",
                      'x-smtpapi' => json_encode($send_grid_options),
                      );
                      $this->sendgrid_mail($params);
                     */

                    //New Sendgrid v3 api
                    $params = array(
                        'personalizations' => array(
                            array(
                                'to' => array(
                                    array('email' => $contact->email)
                                ),
                                'substitutions' => array(
                                    ':logo_link' => 'https://' . $parts["host"],
                                    ':logo_name_link' => 'https://' . $parts["host"],
                                    ':first_name' => isset($contact->firstname) ? $contact->firstname : '',
                                    ':contact_first_name' => $user->getName(),
                                    ':contact_last_name' => $user->getLastname(),
                                    ':contact_job_title_at_company' => $userJobTitleCompany,
                                    ':contact_profile_link' => 'https://' . $parts["host"] . "/profile/" . $user->getUsername(),
                                    ':profile_picture_link' => $userProfileUrl,
                                    ':manage_connections_link' => $manageConnectionLink
                                )
                            ),
                        ),
                        'from' => array(
                            'email' => "noreply@mobintouch.com",
                            'name' => $user->name . " " . $user->lastname
                        ),
                        'subject' => $user->name . " " . $user->lastname . ", one of your contact just joined Mobintouch",
                        'content' => array(array(
                                'type' => 'text/html',
                                'value' => ' '
                            )
                        ),
                        'template_id' => $this->container->getParameter('template_your_contact_joined_id'),
                        'asm' => array(
                            'group_id' => $this->container->getParameter('group_contact_joined')
                        )
                    );

                    Utility::sendgrid_mail(json_encode($params));

                    //Intouch Request Mail remove from comment after confirmation
                    /* $parts = parse_url($_SERVER['HTTP_REFERER']);
                      $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                      $intouchLink = 'https://' . $parts["host"] . "/intouch";
                      $message = \Swift_Message::newInstance()
                      ->setSubject($user->getName() . ' sent you an intouch request')
                      ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                      ->setTo($contact->email)
                      ->setContentType("text/html")
                      ->setBody(
                      $this->renderView(
                      'APIBundle:Mail:intouchrequest.html.twig', array('title' => 'New inTouch request', 'baseURL' => 'https://cdn.mobintouch.com', 'user' => $user, 'profileLink' => $profileLink, 'intouchLink' => $intouchLink, 'unsubcribe' => 1)
                      )
                      );
                      $this->get('mailer')->send($message); */
                }
            }
            if (!$contact->isAlreadyExists && !$contact->isInvited) {
                $arrEmailsToInvite[] = $contact->email;
                if ($this->get('kernel')->getEnvironment() == 'prod') {
                    /*
                      $send_grid_options = array(
                      'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':token' => array($user->getId()), ':sender_img' => array($userProfileUrl)),
                      'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_invitation_template_id')))),
                      );
                      $params = array(
                      'to' => $contact->email,
                      'from' => "noreply@mobintouch.com",
                      'fromname' => $user->name . " " . $user->lastname,
                      'subject' => "Join me on mobintouch.com",
                      'html' => " ",
                      'x-smtpapi' => json_encode($send_grid_options),
                      );
                      $this->sendgrid_mail($params);
                     * 
                     */
                    //New sendgrid v3 
                    $params = array(
                        'personalizations' => array(
                            array(
                                'to' => array(
                                    array('email' => $contact->email)
                                ),
                                'substitutions' => array(
                                    ':logo_link' => 'https://' . $parts["host"],
                                    ':logo_name_link' => 'https://' . $parts["host"],
                                    ':recipient_first_name' => isset($contact->firstname) ? $contact->firstname : '',
                                    ':sender_first_name' => $user->getName(),
                                    ':sender_last_name' => $user->getLastname(),
                                    ':sender_job_title_at_company' => $userJobTitleCompany,
                                    ':sender_invitation_link' => $inviteLink,
                                    ':sender_picture_link' => $userProfileUrl,
                                    ':sender_number_connections' => "$noOfConnections"
                                )
                            ),
                        ),
                        'from' => array(
                            'email' => "noreply@mobintouch.com",
                            'name' => $user->getName() . " " . $user->getLastname()
                        ),
                        'subject' => $contact['name'] . ", please accept my invitation to Mobintouch",
                        'content' => array(array(
                                'type' => 'text/html',
                                'value' => ' '
                            )
                        ),
                        'template_id' => $this->container->getParameter('template_invite_id'),
                        'asm' => array(
                            'group_id' => $this->container->getParameter('group_invite')
                        )
                    );
                    Utility::sendgrid_mail(json_encode($params));
                }
            }
        }

        if (!empty($inTouch)) {
            $util->imitateMerge($inTouchContacts, $inTouch);
        }

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('inTouch')->set($inTouchContacts)
                ->field('inTouchCounter')->set(count($inTouchContacts))
                ->field('updateDate')->set($time)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($user->getId())
                ->field('email')->in(array_merge($arrEmailsToInvite, array_values($arrEmailsToNotify)))
                ->field('isInvited')->set(true)
                ->field('updateDate')->set($time)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();

        return new JsonResponse(array('notifiedUsers' => count($arrEmailsToNotify), 'invitedUsers' => count($arrEmailsToInvite)));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "signup",
     *     },
     *  description="Email validation signup step-10",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function registerStep10Action(Request $request) {
        $validated = false;

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

            $validated = $user->getEmailValidation();

            if (!$validated) {

// Get JSON parameters
                $postdata = $request->getContent();
                $headers = $request->headers->all();
                $request = json_decode($postdata);

// Get POST parameters
                $email = strtolower(trim($request->email));

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

                $alreadyExists = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('_id')->notEqual($user->getId())
                        ->field('email')->equals($email)
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();

                if ($alreadyExists)
                    throw new BadRequestHttpException(); // 400

                $user->setEmail($email);
                $user->setContactEmail($email);
                $hash = $user->getEmailValidationHash();
                if ($hash || empty($hash)) {
                    $hash = md5(rand(0, 1000)); // Generate random 32 character hash and assign it to a local variable.
                    $user->setEmailValidationHash($hash);
                }

                $token = isset($headers['authorization']) ? $headers['authorization'] : null;
                if ($token)
                    $token = trim(substr($token[0], 7));
                $user->setToken($token ? $token : 'signin');

                //$dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!


                $token = $headers['authorization'];
                $token = trim(substr($token[0], 7));

                $this->sendValidationEmail($user, $token);
            }
        }


        return new JsonResponse(array('validated' => $validated));
    }

    public function registerStep11Action(Request $request) {
        $status = false;

// Get the User
//$currentUser = $this->getCurrentUser();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $username = $request->username;
        $email = $request->email;
        $hash = $request->hash;

// Get the User
        $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username, 'email' => $email, 'emailValidationHash' => $hash));

        if ($user) {

// update DATABASEem
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
                    ->field("emailValidation")->set(true)
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $status = true;
            //$user->setValidated(true);
            //$dm->persist($user);
            $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
            $user->setSearch($searches->updateUserSearch($user));
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            // Add user mail to sendy newsletter
            $postdata = http_build_query(
                    array(
                        'name' => $user->getName(),
                        'email' => $email,
                        'list' => $this->validatedList,
                        'boolean' => 'true'
                    )
            );

            $opts = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $postdata));
            $context = stream_context_create($opts);
            $result = file_get_contents($this->sendy_installation_url . '/subscribe', false, $context);

            /* if(!$currentUser){
              return
              } */

            $user->setEmailValidation(true);
            //$this->updateUserSearch($dm, $user);
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateUserSearch($user);
        }

//$data = json_decode($client->getResponse()->getContent(), true);
//return new JsonResponse();
//return new JsonResponse(array('status'=> $status, 'token' => $token));
        return new JsonResponse(array('status' => $status, 'user' => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user"
     *     },
     *  description="Update user activity log",
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function updateActivityLogAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            return new JsonResponse($this->updateLog($user));
        }
    }

    private function updateLog($user) {
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $usersActivityData = $dm->getRepository('DataBaseBundle:UsersActivity')
                ->findBy(array('username' => $user->username, "session" => 0));
        if ($usersActivityData) {

            $currentTime = time();
            $time = $usersActivityData[0]->getUpdatedTime();
            $logInTime = $usersActivityData[0]->getLoginTime();
            $diffInMinute = ($currentTime - $time) / 60;
            $diffInhour = ($currentTime - $usersActivityData[0]->getLoginTime()) / 3600;
            $session = 0;
            $sessionType = "";
            if ($diffInMinute > 30) { //30
                /* if($diffInMinute >= 1440){//1440
                  $sessionType="day";
                  $session=1;
                  }else{ */
                $sessionType = "hour";
                $session = 1;
                $logInTime = $currentTime;
                /* } */
            }if ($diffInhour >= 24) {
                $sessionType = "day";
                $session = 1;
                $logInTime = $currentTime;
            }
            $companypercentages = $dm->createQueryBuilder('DataBaseBundle:UsersActivity')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('id')->equals($usersActivityData[0]->getId())
                    ->field('updatedTime')->set($currentTime)
                    ->field('session')->set($session)
                    ->field('sessionType')->set($sessionType)
                    ->upsert(true)
                    ->getQuery()
                    ->execute();
            $dm->flush();
            $dm->clear();

            if ($session == 1) {
                $usersActivity = new UsersActivity();
#$usersActivity->setUsername($user->username);
                $usersActivity->setUsername($user->username);
                $usersActivity->setLoginTime($logInTime);
                $usersActivity->setUpdatedTime($currentTime);
                $usersActivity->setUpdatedTime($currentTime);
                $usersActivity->setSession(0);
                $usersActivity->setSessionType("");

                $dm = $this->get('doctrine_mongodb.odm.document_manager');
                $dm->persist($usersActivity);
                $dm->flush();
                $dm->clear();
            }
            return["diffInMinute" => $diffInMinute, "diffInhour" => $diffInhour];
        } else {
            $usersActivity = new UsersActivity();
            /* $usersActivity->setUsername($user->username); */
            $usersActivity->setUsername($user->username);
            $usersActivity->setLoginTime(time());
            $usersActivity->setUpdatedTime(time());
            $usersActivity->setSession(0);
            $usersActivity->setSessionType("");

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $dm->persist($usersActivity);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            return[];
        }
#return["diffInMinute"=>$diffInMinute,"diffInhour"=>$diffInhour];
#	echo "<pre>";		print_r($usersActivityData);exit;
#	return [];
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "company",
     *     },
     *  description="Get user current company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the company is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    //Moved On Company Controller On 2017-04-13
    /* public function getCurrentCompanyAction() {
      return new JsonResponse($this->getCurrentCompany());
      } */

    private function getCurrentCompany() {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            /*  $company = $dm->createQueryBuilder('DataBaseBundle:Company')
              ->field('employees.id')->equals($user->getId())
              ->getQuery()
              ->getSingleResult(); */
            if (isset($user->companyPage['employee']['company'])) {
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('username')->equals($user->companyPage['employee']['company'])
                        ->getQuery()
                        ->getSingleResult();
            } else {
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();
            }



            if (!$company instanceof Company) {
                throw new NotFoundHttpException();     // 404
            }
            if ($company) {
#$company->companyPercentage=$this->countCompanyPercentage($user);
                /* $updatedData=$this->countCompanyPercentage($user);
                  $company->companyPercentage=$updatedData["percentage"];
                  $company->companyPoints=$updatedData["points"]; */
                $mMc = new ManageMutualConnections($dm);
                if (isset($_GET['mutualconnections']) && ($_GET['mutualconnections'] == 'followers' || $_GET['mutualconnections'] == 'employees')) {
                    $element = $_GET['mutualconnections'];
                    $arrElement = array();
                    foreach ($company->$element as $key => $value) {
                        $arrMutualConnection = $mMc->getMutualConnections($user, $value);
                        /* $arrMutualConnection = array();
                          $q = $dm->createQueryBuilder('DataBaseBundle:User')->hydrate(false)->select('name', 'lastname');
                          $q->field('inTouch')->elemMatch(array('status' => 3, 'username' => $value['username']));
                          $q->addAnd(
                          $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'username' => $user->username))
                          );
                          $mutualConnections = $q->getQuery()->execute();
                          foreach ($mutualConnections as $mutualConnection) {
                          $arrMutualConnection[] = $mutualConnection['name'] . " " . $mutualConnection['lastname'];
                          } */
                        $value['mutualConnections'] = $arrMutualConnection;
                        $arrElement[] = $value;
                    }
                    $company->$element = $arrElement;
                }
            }
            return $company;
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "company",
     *     },
     *  description="Get user admin company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getAdminCompanyAction() {
        return new JsonResponse($this->getAdminCompany());
    }

    private function getAdminCompany() {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->field('administrators.username')->equals($user->getUsername())
                    ->getQuery()
                    ->getSingleResult();

            if (!$company instanceof Company) {
                throw new NotFoundHttpException();     // 404
            }

            return $company;
            /*
              // Set up database
              $dm = $this->get('doctrine_mongodb.odm.document_manager');

              $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('administrators.username'=> $user->getUsername()));
              //$company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array());

              if(!$company) throw new NotFoundHttpException();     // 404

              return $company; */
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user",
     *     },
     *  description="Description test of index api request",
     *  requirements={
     *      {
     *          "name"="username",
     *          "dataType"="straing",
     *          "required"=true,
     *          "description"="unique username to get user object"
     *      }
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getUserAction($username) {

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $user = $dm->createQueryBuilder('DataBaseBundle:User')
                ->select('avatar', 'basedCountry', 'behance', 'city', 'company', 'companyPage', 'competences', 'contactEmail', 'country', 'cover', 'dribbble', 'educations', 'email', 'experiences', 'facebook', 'formatedAddress', 'gender', 'github', 'imContacts', 'inTouch', 'instagram', 'jobTitle', 'keywords', 'languages', 'lastname', 'linkedin', 'miniResume', 'name', 'otherLink', 'phone', 'pinterest', 'profileOrder', 'stackOverflow', 'skype', 'suggestedServices', 'summary', 'twitter', 'username', 'customServices', 'customBoxname')
                ->field('username')->equals($username)
                ->getQuery()
                ->getSingleResult();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

// Get the User
        $me = $this->getCurrentUser();

        if ($me instanceof User) {

            if ($me->getId() != $user->getId()) {
// ONLY 1 NOTIFICATION PER DAY!

                $last24h = strtotime("-1 day");

                $visitorID = $me->getId();

                $whovisited = $user->getWhoVisitedMe();

                $update = true;
                if ($whovisited != null) {
                    foreach ($whovisited as $id => $visit) {

                        if (isset($visit['id']) && $visit['id'] == $visitorID) {
                            if ($visit['date'] >= $last24h) {
                                $update = false;
                            }
                        }
                    }
                }

                if ($update) {

                    $companyPage = $user && $user->getCompanyPage() ? $user->getCompanyPage() : null;
                    if ($companyPage && is_array($companyPage) && count($user->getCompanyPage()) > 0 && array_key_exists('employee', $companyPage)) {
                        $companyUserName = $companyPage['employee']['company'];
                    }

                    $meCompanyPage = $me && $me->getCompanyPage() ? $me->getCompanyPage() : null;
                    if ($meCompanyPage && is_array($meCompanyPage) && count($me->getCompanyPage()) > 0 && array_key_exists('employee', $meCompanyPage)) {
                        $meCompanyUserName = $meCompanyPage['employee']['company'];
                    }

                    $isHidden = $me->getPrivacyHidden();
                    if ($isHidden) {
                        $visitor = array(
                            'date' => time(),
                            'id' => '',
                            'username' => '',
                            'name' => 'Anonymous',
                            'lastname' => '',
                            'jobTitle' => 'Unknown',
                            'company' => 'Unknown',
                            'companyUsername' => null,
                            'avatar' => null
                        );
                    } else {
                        $visitor = array(
                            'date' => time(),
                            'id' => $me->getId(),
                            'username' => $me->getUsername(),
                            'name' => $me->getName(),
                            'lastname' => $me->getLastname(),
                            'jobTitle' => $me->getJobTitle(),
                            'company' => $me->getCompany(),
                            'companyUsername' => isset($meCompanyUserName) ? $meCompanyUserName : null,
                            'avatar' => $me->getAvatar()
                        );
                    }
                    $visitedID = $user->getId();
                    $visited = array(
                        'date' => time(),
                        'id' => $user->getId(),
                        'username' => $user->getUsername(),
                        'name' => $user->getName(),
                        'lastname' => $user->getLastname(),
                        'jobTitle' => $user->getJobTitle(),
                        'company' => $user->getCompany(),
                        'companyUsername' => isset($companyUserName) ? $companyUserName : null,
                        'avatar' => $user->getAvatar()
                    );

                    $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($user->getId())

// Update found Campaign
//->field("whoVisitedMe.$visitorID")->unsetField()->exists(true)
//->field("whoVisitedMe.$visitorID")->set($visitor)
                            ->field('whoVisitedMe')->push(array('$each' => array($visitor), '$slice' => -90))
                            ->field('alertsNotifications')->inc(1)
                            ->field('alerts')->push(array('$each' => array(array(
                                        'id' => $me->getId() . time(),
                                        'type' => 3,
                                        'read' => false,
                                        'action' => 'has visited your profile',
                                        'username' => $visitor['username'],
                                        'name' => $visitor['name'],
                                        'lastname' => $visitor['lastname'],
                                        'avatar' => $visitor['avatar'],
                                        'date' => time() * 1000
                                    )), '$slice' => -90))
                            ->field('updateDate')->set(time())


// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $players = array();
                    if ($user && $user->getPlayerId()) {
                        $players[] = $user->getPlayerId();
                        switch ($this->get('kernel')->getEnvironment()) {
                            case 'adhoc':
                                $baseLink = 'https://www-dev.mobintouch.com/';
                                break;
                            case 'prod':
                            default:
                                $baseLink = 'https://www.mobintouch.com/';
                                break;
                        }
                        $link = $baseLink . 'who-visited-my-profile';
                        $this->send_push_notification(null, $visitor['name'] . ' ' . $visitor['lastname'] . ' has visited your profile', $players, $link);
                    }

                    $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($me->getId())

// Update found Campaign
//->field("iVisited.$visitedID")->unsetField()->exists(true)
//->field("iVisited.$visitedID")->set($visited)
                            ->field('iVisited')->push(array('$each' => array($visited), '$slice' => -90))
                            ->field('updateDate')->set(time())


// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                }

                $mMc = new ManageMutualConnections($dm);
                $arrMutualConnection = $mMc->getMutualConnections($me, $user, false);

                //Get Mutual Connections
                /* $arrMutualConnection = array();
                  $q = $dm->createQueryBuilder('DataBaseBundle:User')->hydrate(false)->select('name', 'lastname');
                  $q->field('inTouch')->elemMatch(array('status' => 3, 'username' => $me->username));
                  $q->addAnd(
                  $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'username' => $user->username))
                  );
                  $mutualConnections = $q->getQuery()->execute();
                  foreach ($mutualConnections as $mutualConnection) {
                  $arrMutualConnection[] = $mutualConnection['name'] . " " . $mutualConnection['lastname'];
                  } */
                $user->mutualConnections = $arrMutualConnection;
            }
        }

        $arrConnections = array();
        $userConnections = $user->inTouch ? $user->inTouch : array();
        $isConnected = false;
        foreach ($userConnections as $connection) {
            if ($connection['status'] != 3)
                continue;
            if (isset($me) && isset($me->id) && $me->id == $connection['id'] && $connection['status'] == 3)
                $isConnected = true;
            $arrConnections[] = array(
                'avatar' => $connection['avatar'],
                'name' => $connection['name'],
                'lastname' => $connection['lastname'],
                'username' => $connection['username']
            );
        }
        $user->inTouch = $arrConnections;

        if ((!$me instanceof User || !$isConnected) && ($me instanceof User && $me->getUsername() != $username)) {
            unset($user->email);
            unset($user->contactEmail);
            unset($user->phone);
            unset($user->imContacts);
        }

        $mU = new ManageUser($dm, $this->container);
        $user->alsoViewed = $mU->getSimilarProfile($user);

        return new JsonResponse($user);
    }

    public function whoVistedMeAction() {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $userConnected = array();
        $userConnectedIds = array();
        //Already sent connection request // status : 1
        $userRequestedIds = array();
        //Received connection request // status : 2
        $userRequestIds = array();

        $userConnections = $user->getInTouch() ? $user->getInTouch() : array();
        foreach ($userConnections as $uConnection) {
            if ($uConnection['status'] == 1) {
                $userRequestedIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 2) {
                $userRequestIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 3) {
                $userConnectedIds[] = $uConnection['id'];
            }
        }

        $last90d = strtotime("-90 day");
        $arrWhoVisitedMe = $user->getWhoVisitedMe() ? $user->getWhoVisitedMe() : array();
        usort($arrWhoVisitedMe, function($a, $b) {
            return $b['date'] - $a['date'];
        });
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $mMc = new ManageMutualConnections($dm);
        $visisted = array();
        $resultWhoVisitedMe = array();
        foreach ($arrWhoVisitedMe as $value) {
            if ($value['date'] > $last90d && !in_array($value['username'], $visisted)) {
                $visisted[] = $value['username'];
                $arrMutualConnection = $mMc->getMutualConnections($user, $value, false);
                $value['mutualConnections'] = $arrMutualConnection;
                $value['isConnected'] = $user ? in_array($value['id'], $userConnectedIds) : false; //check user is connected with loggedin user
                $value['isRequested'] = $user ? in_array($value['id'], $userRequestedIds) : false; //check user already got connection request
                $value['isRequest'] = $user ? in_array($value['id'], $userRequestIds) : false; // check user has already sent connection request
                $resultWhoVisitedMe[] = $value;
            }
        }
        $user->whoVisitedMe = $resultWhoVisitedMe;
        return new JsonResponse($user);
    }

    public function lastVisistedProfilesAction() {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $userConnected = array();
        $userConnectedIds = array();
        //Already sent connection request // status : 1
        $userRequestedIds = array();
        //Received connection request // status : 2
        $userRequestIds = array();

        $userConnections = $user->getInTouch() ? $user->getInTouch() : array();
        foreach ($userConnections as $uConnection) {
            if ($uConnection['status'] == 1) {
                $userRequestedIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 2) {
                $userRequestIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 3) {
                $userConnectedIds[] = $uConnection['id'];
            }
        }

        $last90d = strtotime("-90 day");
        $arrIVisited = $user->getIVisited() ? $user->getIVisited() : array();
        usort($arrIVisited, function($a, $b) {
            return $b['date'] - $a['date'];
        });
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $mMc = new ManageMutualConnections($dm);
        $visisted = array();
        $resultIVisited = array();
        foreach ($arrIVisited as $value) {
            if ($value['date'] > $last90d && !in_array($value['username'], $visisted)) {
                $visisted[] = $value['username'];
                $arrMutualConnection = $mMc->getMutualConnections($user, $value, false);
                $value['mutualConnections'] = $arrMutualConnection;
                $value['isConnected'] = $user ? in_array($value['id'], $userConnectedIds) : false; //check user is connected with loggedin user
                $value['isRequested'] = $user ? in_array($value['id'], $userRequestedIds) : false; //check user already got connection request
                $value['isRequest'] = $user ? in_array($value['id'], $userRequestIds) : false; // check user has already sent connection request
                $resultIVisited[] = $value;
            }
        }
        $user->iVisited = $resultIVisited;
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "company",
     *     },
     *  description="Get company by company username.",
     *  requirements={
     *      {
     *          "name"="companyUsername",
     *          "dataType"="string",
     *          "description"="Unique company username to get company object"
     *      }
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    #Moved On Company Controller On 2017-04-20
    /* public function getCompanyAction(Request $request, $companyUsername) {

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      $company = $dm->createQueryBuilder('DataBaseBundle:Company')
      ->field('username')->equals($companyUsername)
      ->getQuery()
      ->getSingleResult();

      if (!$company instanceof Company) {
      throw new NotFoundHttpException();     // 404
      }

      $raw_token = $request->headers->get('authorization');
      if (isset($raw_token)) {
      $token = substr($raw_token, strpos($raw_token, '.') + 1);
      $uData = json_decode(base64_decode(substr($token, 0, strpos($token, '.'))));
      $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $uData->username));
      }

      $jobs = $dm->createQueryBuilder('DataBaseBundle:Jobs')
      ->hydrate(false)
      ->select('id', 'slug', 'jobTitle', 'description', 'whyUs', 'jobType', 'location', 'primaryRole', 'otherRoles', 'currencySymbol', 'minSalary', 'maxSalary', 'equityMin', 'equityMax', 'appliedBy')
      ->field('company.id')->equals($company->getId())
      ->field('publishStatus')->equals('published')
      ->getQuery()
      ->execute();

      $arrJobs = array();
      if (isset($user) && $user) {
      foreach ($jobs as $job) {
      foreach ($job['appliedBy'] as $applied) {
      if ($applied['id'] == $user->getId()) {
      $job['isApplied'] = true;
      $job['appliedOn'] = $applied['date'];
      }
      unset($job['appliedBy']);
      }
      $arrJobs[] = $job;
      }
      } else {
      foreach ($jobs as $job) {
      unset($job['appliedBy']);
      $arrJobs[] = $job;
      }
      }


      $company->jobs = $arrJobs;

      if (isset($_GET['mutualconnections']) && ($_GET['mutualconnections'] == 'employees') && isset($user) && $user instanceof User) {
      $element = $_GET['mutualconnections'];
      $arrElement = array();
      foreach ($company->$element as $key => $value) {

      $arrMutualConnection = array();
      $q = $dm->createQueryBuilder('DataBaseBundle:User')->hydrate(false)->select('name', 'lastname');
      $q->field('inTouch')->elemMatch(array('status' => 3, 'username' => $value['username']));
      $q->addAnd(
      $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'username' => $user->username))
      );
      $mutualConnections = $q->getQuery()->execute();
      foreach ($mutualConnections as $mutualConnection) {
      $arrMutualConnection[] = $mutualConnection['name'] . " " . $mutualConnection['lastname'];
      }
      $value['mutualConnections'] = $arrMutualConnection;
      $arrElement[] = $value;
      }
      $company->$element = $arrElement;
      }

      return new JsonResponse($company);
      } */

##### REGISTER #####
    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Register new user",
     *  parameters={
     *      {"name"="name", "dataType"="string", "required"=true, "description"="name"},
     *      {"name"="lastname", "dataType"="string", "required"=true, "description"="lastname"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /*   public function forgottenPasswordAction(Request $request)
      {
      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      if(isset($request->email)) $email = strtolower(trim($request->email));

      if(!$email) throw new BadRequestHttpException();     // 404

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      // Get the User
      $user = $dm->getRepository('DataBaseBundle:User')->findOneBy( array('email'=> $email));

      $username = null;
      if(!$user instanceof User){

      $user = new User();

      $user->setName($name);
      $user->setLastname($lastname);
      $username = $this->newUsername($name, $lastname);
      $user->setUsername($username);
      $user->setEmail($email);
      $user->setPlainPassword($password);
      $user->setEnabled(true);
      $user->setValidated(false);
      $user->setBuyTraffic(array());
      $user->setSellTraffic(array());
      //$user->setServices(array());
      $user->setExperiences(array());
      $user->setIosApps(array());
      $user->setAndroidApps(array());
      $user->setCategories(array());
      $user->setCompetences(array());
      $user->setLanguages(array());
      $user->setFollowing(array());
      $user->setFollowers(array());
      $user->setCompanySubType(array());


      $hash = md5( rand(0,1000) ); // Generate random 32 character hash and assign it to a local variable.
      // Example output: f4552671f8909587cf485ea990207f3b
      $user->setEmailValidationHash($hash);

      $dm->persist($user);
      $dm->flush();

      // $this->sendValidationEmail($user);


      }else{
      throw new AccessDeniedHttpException();     // 403
      }


      return new JsonResponse($user);
      }
     */

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Complete register step 2 form",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="company", "dataType"="string", "required"=true, "description"="company"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function registerStep1Action(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $headers = $request->headers->all();
            $request = json_decode($postdata);

// Get POST parameters
            if (isset($request->company)) {
                $user->setCompany($request->company);

                /* $explodeName = explode(" ", $user->getName());
                  $explodeLastName = explode(" ", $user->getLastname());
                  $explodeCompany= explode(" ", $request->company);
                  $search = array_merge($explodeName, $explodeLastName, $explodeCompany, array($user->getUsername()));
                  $user->setSearch($search); */

                $tempname = explode(" ", $user->getName());
                $templastname = explode(" ", $user->getLastname());
                $tempcompany = explode(" ", $request->company);
                $tempjobTitle = explode(" ", $request->jobTitle);
                $search = array_merge($tempname, $templastname, $tempcompany, $tempjobTitle);
                $user->setSearch($search);
            }


            if (isset($request->jobTitle))
                $user->setJobTitle($request->jobTitle);
            if (isset($request->companyType))
                $user->setCompanyType($request->companyType);
            if (isset($request->companySubType))
                $user->setCompanySubType($request->companySubType);
//if(isset($request->otherCompanySubType)) $user->setOtherCompanySubType($request->otherCompanySubType);
// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $token = isset($headers['authorization']) ? $headers['authorization'] : null;
            if ($token)
                $token = trim(substr($token[0], 7));
            $user->setToken($token ? $token : 'signin');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
//$this->updateUserSearch($dm, $user);

            /* $dm->createQueryBuilder('DataBaseBundle:search')
              // Find the Campaign
              ->update()
              ->multiple(false)
              ->field('_id')->equals('54c280d0242ff29716d63af1')

              // Update found Campaign
              ->field('users.'.$user->getId())->addToSet(array(
              'id' => $user->getId(),
              'username' => $user->getUsername(),
              'name' => $user->getName(),
              'lastname' => $user->getLastname(),
              'jobTitle' => isset($request->jobTitle)?$request->jobTitle:$user->getJobTitle(),
              'company' => $request->company,
              'avatar' => $user->getAvatar(),
              'responseRate' => $user->getResponseRate(),
              'search' => array(
              $user->getName()." ".$user->getLastname(),
              $user->getName()." ".$user->getLastname()." ".$request->company,
              $user->getName()." ".$request->company,
              $user->getLastname()." ".$request->company,
              $request->company." ".$user->getName(),
              $request->company." ".$user->getLastname(),
              $request->company." ".$user->getName()." ".$user->getLastname(),
              )
              ))
              // Options
              ->upsert(false)
              ->getQuery()
              ->execute();
             */
//return new JsonResponse($_SERVER);
//            $token = $headers['authorization'];
//            $token = trim(substr($token[0], 7));

            $hash = $this->sendValidationEmail($user, $token);


            if (isset($request->companyid)) {
// New or modified Existing Company
                $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $request->companyid));
            } else if (isset($request->company)) {

//$company = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('name'=> $request->company));

                $companyName = trim($request->company);
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('name')->equals(new \MongoRegex("/{$companyName}$/ix"))
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();
            }

            if ($company) {

                $companyPage = array(
                    "employee" => array('company' => $company->getUsername())
                );

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())

// Update found Campaign
//->field('companyPage.employee')->set(array('company' => $company->getUsername()))
                        ->field('companyPage')->set($companyPage)
                        ->field('updateDate')->set(time())


// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            } else {

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())

// Update found Campaign
                        ->field('companyPage')->unsetField()->exists(true)
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $mailValidataiom = [];
        $mailValidataiom["username"] = $user->username;
        $mailValidataiom["email"] = $user->email;
        $mailValidataiom["hash"] = $hash;
// WELCOME EMAIL


        $parts = parse_url($_SERVER['HTTP_REFERER']);
        $email = $user->getEmail();
        $link = 'https://' . $parts["host"] . "/myprofile";


        $send_grid_options = array(
            'sub' => array(':name' => array($user->getName()), ':link' => array($link)),
            'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_welcome_template_id'))))
        );
        $params = array(
            'to' => $email,
            'from' => "noreply@mobintouch.com",
            'fromname' => "Mobintouch",
            'subject' => $user->getName() . ', welcome to Mobintouch',
            'html' => " ",
            'x-smtpapi' => json_encode($send_grid_options),
        );
        $this->sendgrid_mail($params);


        /*
          $message = \Swift_Message::newInstance()
          ->setSubject($user->getName() . ', welcome to Mobintouch')
          ->setFrom(array('noreply@mobintouch.com' => 'Mobintouch'))
          ->setTo($email)
          ->setContentType("text/html")
          ->setBody(
          $this->renderView(
          'APIBundle:Mail:welcome.html.twig', array('user' => $user, 'link' => $link, 'unsubcribe' => 1)
          )
          )
          ;
          $this->get('mailer')->send($message);
         */




        $this->updateProfilePercentage($user);
        $user = $this->autoValidateUser($mailValidataiom);
        $postdata = http_build_query(
                array(
                    'name' => $user->getName(),
                    'email' => $email,
                    'list' => $this->marketingList,
                    'boolean' => 'true'
                )
        );

        $opts = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded', 'content' => $postdata));
        $context = stream_context_create($opts);
        $result = file_get_contents($this->sendy_installation_url . '/unsubscribe', false, $context);
        return new JsonResponse($user);
    }

##### LOGIN #####
    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Login the user",
     *  parameters={
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *      {"name"="password", "dataType"="string", "required"=true, "description"="password"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function loginAction(Request $request)
      {

      // Get POST parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      $password = $request->password;
      $username = $request->username;
      //$email = strtolower(trim($request->email));


      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      // Get the User
      $user = $dm->getRepository('DataBaseBundle:User')->findOneBy( array('username'=> $username));

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }

      return new JsonResponse($user);
      } */

##### EDIT PROFILE #####

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAvatarAction(Request $request) {
        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $postdata = $request->getContent(); //Data posted with api call
            $request = json_decode($postdata);
            $avatarFilename = '';
            if (isset($request->avatar)) {
                $dataURI = $request->avatar;
                $isImage = strpos($dataURI, "image");
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400
                $env = $this->get('kernel')->getEnvironment();
                if ($env == 'dev')
                    $copypath = "/../../mobntouch/src/cdn/img/profile/avatars/";
                else
                    $copypath = "/../../web/src/cdn/img/profile/avatars/";
                $realpath = "/img/profile/avatars/";

                $dm = $this->get('doctrine_mongodb.odm.document_manager');
                $manageAvatarAndCover = new ManageAvatarAndCover($dm);
                $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
                $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
                $imageName = $user->getUsername();
                $avatar = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $imageName, 'avatar', 'profile');
                /*
                  $pos1 = strpos($dataURI, "/");
                  $pos2 = strpos($dataURI, ";");
                  $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                  $dataURI = 'data://' . substr($dataURI, 5);
                  $env = $this->get('kernel')->getEnvironment();
                  if ($env == 'dev')
                  $copypath = "/../../mobntouch/src/cdn/img/profile/avatars/";
                  else
                  $copypath = "/../../web/src/cdn/img/profile/avatars/";
                  $realpath = "/img/profile/avatars/";
                  $root = getcwd();
                  $originalFilename = $user->getUsername() . '-original.' . $extension;
                  $avatarFilename = $user->getUsername() . '.' . $extension;
                  $fp = fopen($root . $copypath . $originalFilename, "w");
                  fwrite($fp, file_get_contents($dataURI));
                  fclose($fp);
                  //exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 128x128 -quality 85 '.getcwd().$copypath.$avatarFilename);
                  exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $avatarFilename);
                  $time = time();
                  $avatar = $realpath . $avatarFilename . '?' . $time;
                 * 
                 */
                $user->setAvatar($avatar);
                $user->setUpdateDate(time());
                $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
                $user->setSearch($searches->updateUserSearch($user));

                $dm->flush();
                $dm->clear();

                //$this->updateUserSearch($dm, $user);
                $manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
                //$manageUserAndCompanySearch->updateUserSearch($user);
                //$manageAvatarAndCover->updateAllDocumentsProfileAvatar($user);
                //$mU = new ManageAvatarAndCover($dm); //commented on 29-09-2017
                //$mU->updateAllDocumentsProfileAvatar($user); //commented on 29-09-2017

                $env = $this->get('kernel')->getEnvironment();
                $localPath = $this->container->getParameter('local_console_path');
                $serverPath = $this->container->getParameter('server_console_path');
                if ($env == 'dev') {
                    $process = new Process("{$localPath} Job:UpdateProfileAvatar {$user->getId()}");
                } else {
                    $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
                }

                //$process = new Process("php app/console Job:UpdateProfile {$user->getId()}");
                $process->disableOutput();
                $process->start(); //start process on background
                //$process->wait();
                //$output = $process->getOutput();


                /*
                  $companyPage = $user->getCompanyPage();
                  if ($companyPage) {
                  $dm->createQueryBuilder('DataBaseBundle:Company')
                  ->update()
                  ->multiple(true)
                  ->field('administrators.id')->equals($user->getId())
                  ->field("administrators.$.avatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Company')
                  ->update()
                  ->multiple(true)
                  ->field('employees.id')->equals($user->getId())
                  ->field("employees.$.avatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();
                  $dm->flush();
                  $dm->clear();
                  }
                 * 
                 */
//Added code in different class
                /*
                  $dm->createQueryBuilder('DataBaseBundle:Mail')
                  ->update()
                  ->multiple(true)
                  ->field('fromID')->equals($user->getId())
                  ->field("senderAvatar")->set($user->getAvatar() ? $user->getAvatar() : null)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Mail')
                  ->update()
                  ->multiple(true)
                  ->field('toID')->equals($user->getId())
                  ->field("receiverAvatar")->set($user->getAvatar() ? $user->getAvatar() : null)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Company')
                  ->update()
                  ->multiple(true)
                  ->field('followers.id')->equals($user->getId())
                  ->field("followers.$.avatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:User')
                  ->update()
                  ->multiple(true)
                  ->field('inTouch.id')->equals($user->getId())
                  ->field("inTouch.$.avatar")->set($avatar)
                  ->field('updateDate')->set(time())
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Offer')
                  ->update()
                  ->multiple(true)
                  ->field('userID')->equals($user->getId())
                  ->field("userAvatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                  ->update()
                  ->multiple(true)
                  ->field('userID')->equals($user->getId())
                  ->field("userAvatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  // UPDATE EMPLOYEES INFOS

                  $dm->createQueryBuilder('DataBaseBundle:User')
                  // Find the Campaign
                  ->update()
                  ->multiple(true)
                  ->field('employees.id')->equals($user->getId())

                  // Update found Campaign
                  ->field("employees.$.avatar")->set($avatar)
                  ->field('updateDate')->set(time())

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();



                  // UPDATE ADMINISTRATORS INFOS

                  $dm->createQueryBuilder('DataBaseBundle:User')
                  // Find the Campaign
                  ->update()
                  ->multiple(true)
                  ->field('administrators.id')->equals($user->getId())

                  // Update found Campaign
                  ->field("administrators.$.avatar")->set($avatar)
                  ->field('updateDate')->set(time())

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();


                  // WE MUST INVEST TIME TO REFACTOR THIS!!!!!!

                  $dm->createQueryBuilder('DataBaseBundle:Update')
                  ->update()
                  ->multiple(true)
                  ->field('userID')->equals($user->getId())
                  ->field("userAvatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Update')
                  ->update()
                  ->multiple(true)
                  ->field('inTouchID')->equals($user->getId())
                  ->field("inTouchAvatar")->set($avatar)
                  ->upsert(false)
                  ->getQuery()
                  ->execute();
                  $dm->flush();
                  $dm->clear(); // Detaches all objects from Doctrine!


                 */
                /* $followingCompanies = $dm->createQueryBuilder('DataBaseBundle:Company')
                  ->field('followers.id')->equals($user->getId())
                  ->getQuery()
                  ->execute();

                  if($followingCompanies){
                  foreach($followingCompanies as $company){

                  // Update Admins
                  $followers = $company->getFollowers();
                  $updateFollowers = false;

                  foreach($followers as $key => $follower){
                  if($follower['id']==$user->getId()){
                  $updateFollowers = true;
                  $employees[$key]['avatar'] = $avatar;
                  break;
                  }
                  }

                  if($updateFollowers){

                  // UPDATE

                  $dm->createQueryBuilder('DataBaseBundle:Company')
                  // Find the Campaign
                  ->update()
                  ->multiple(false)
                  //->field('_id')->equals($company->getId())
                  ->field('followers.id')->equals($user->getId())

                  // Update found Campaign
                  ->field("followers.$.avatar")->set($avatar)


                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  }
                  }
                  } */
            }
        }
        $this->updateProfilePercentage($user);
        return new JsonResponse($avatar);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function removeProfileAvatarAction(Request $request) {

        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $env = $this->get('kernel')->getEnvironment();
        if ($env == 'dev')
            $copypath = "/../../mobntouch/src/cdn/img/profile/avatars/";
        else
            $copypath = "/../../web/src/cdn/img/profile/avatars/";

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $manageAvatarAndCover = new ManageAvatarAndCover($dm);
        $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
        $manageAvatarAndCover->removeAvatarOrCover($user->getAvatar(), 'avatar', 'profile');
        $user->setAvatar(null);

        $dm->flush();
        $dm->clear();

        $env = $this->get('kernel')->getEnvironment();
        $localPath = $this->container->getParameter('local_console_path');
        $serverPath = $this->container->getParameter('server_console_path');
        if ($env == 'dev') {
            $process = new Process("{$localPath} Job:UpdateProfile {$user->getId()}");
        } else {
            $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
        }

        //$process = new Process("php app/console Job:UpdateProfile {$user->getId()}");
        $process->disableOutput();
        $process->start(); //start process on background
        //$process->wait();
        //$output = $process->getOutput();
        //$manageAvatarAndCover->updateAllDocumentsProfileAvatar($user);
        //$mU = new ManageUser($dm, $this->container);
        //$mU->updateAllDocumentsUserDetails($user);
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",	
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editCompanyAvatarAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();


// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            if (isset($request->avatar)) {

                $dataURI = $request->avatar;
                $isImage = strpos($dataURI, "image");
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400

                $manageAvatarAndCover = new ManageAvatarAndCover($dm);
                $env = $this->get('kernel')->getEnvironment();
                if ($env == 'dev') {
                    $copypath = "/../../mobntouch/src/cdn/img/company/avatars/";
                } else {
                    $copypath = "/../../web/src/cdn/img/company/avatars/";
                }
                $realpath = "/img/company/avatars/";
                $manageAvatarAndCover->setCompanyAvatarCopyPath($copypath);
                $manageAvatarAndCover->setCompanyAvatarRealPath($realpath);
                $avatar = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $company->getUsername(), 'avatar', 'company', true);
                /*
                  $pos1 = strpos($dataURI, "/");
                  $pos2 = strpos($dataURI, ";");
                  $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                  $dataURI = 'data://' . substr($dataURI, 5);

                  $env = $this->get('kernel')->getEnvironment();
                  if ($env == 'dev')
                  $copypath = "/../../mobntouch/src/cdn/img/company/avatars/";
                  else
                  $copypath = "/../../web/src/cdn/img/company/avatars/";

                  $realpath = "/img/company/avatars/";

                  $root = getcwd();
                  $originalFilename = $company->getUsername() . '-original.' . $extension;
                  $avatarFilename = $company->getUsername() . '.' . $extension;
                  $fp = fopen($root . $copypath . $originalFilename, "w");
                  fwrite($fp, file_get_contents($dataURI));
                  fclose($fp);

                  //exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 170x170 -quality 95 '.getcwd().$copypath.$avatarFilename);
                  exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $avatarFilename);

                  $time = time();
                  $avatar = $realpath . $avatarFilename . '?' . $time;
                 * 
                 */
                $company->setAvatar($avatar);
                $company->setUpdateDate(time());
                $mS = new ManageSearch($dm);
                $company->setSearch($mS->updateCompanySearch($company));
                $dm->persist($company);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
                //$this->updateCompanySearch($dm, $company);
                //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
                //$manageUserAndCompanySearch->updateCompanySearch($company);
                $manageAvatarAndCover->updateAllDocumentsCompanyAvatar($company);

                /*
                  $dm->createQueryBuilder('DataBaseBundle:Update')
                  // Find the Campaign
                  ->update()
                  ->multiple(true)
                  ->field('companyID')->equals($company->getId())

                  // Update found Campaign
                  ->field("companyAvatar")->set($avatar)

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->flush();
                  $dm->clear(); // Detaches all objects from Doctrine! */
            }
        }
        $this->countCompanyPercentage($user);
        return new JsonResponse($avatar);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function removeCompanyAvatarAction(Request $request) {

        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();


            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/company/avatars/";
            else
                $copypath = "/../../web/src/cdn/img/company/avatars/";

            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setCompanyAvatarCopyPath($copypath);
            $manageAvatarAndCover->removeAvatarOrCover($company->getAvatar(), 'avatar', 'company');
            $company->setAvatar(null);
            $mS = new ManageSearch($dm);
            $company->setSearch($mS->updateCompanySearch($company));
            $dm->flush();
            $dm->clear();
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateCompanySearch($company);
            $manageAvatarAndCover->updateAllDocumentsCompanyAvatar($company);
        }
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Cover...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editCompanyCoverAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $coverFilename = '';
// Get POST parameters
            if (isset($request->cover)) {

                $dataURI = $request->cover;
                $isImage = strpos($dataURI, "image");
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400

                $manageAvatarAndCover = new ManageAvatarAndCover($dm);
                $env = $this->get('kernel')->getEnvironment();
                if ($env == 'dev')
                    $copypath = "/../../mobntouch/src/cdn/img/company/covers/";
                else
                    $copypath = "/../../web/src/cdn/img/company/covers/";
                $realpath = "/img/company/covers/";
                $manageAvatarAndCover->setCompanyCoverCopyPath($copypath);
                $manageAvatarAndCover->setCompanyCoverRealPath($realpath);
                $imageName = $company->getUsername();
                $cover = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $imageName, 'cover', 'company', true);


                /*
                  $pos1 = strpos($dataURI, "/");
                  $pos2 = strpos($dataURI, ";");
                  $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                  $dataURI = 'data://' . substr($dataURI, 5);
                  //$path = "/uploads/profile/avatars/";
                  $env = $this->get('kernel')->getEnvironment();
                  if ($env == 'dev')
                  $copypath = "/../../mobntouch/src/cdn/img/company/covers/";
                  else
                  $copypath = "/../../web/src/cdn/img/company/covers/";

                  $realpath = "/img/company/covers/";

                  $root = getcwd();
                  $originalFilename = $company->getUsername() . '-original.' . $extension;
                  $coverFilename = $company->getUsername() . '.' . $extension;
                  $fp = fopen($root . $copypath . $originalFilename, "w");
                  fwrite($fp, file_get_contents($dataURI));
                  fclose($fp);

                  exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $coverFilename);

                  $time = time();
                  $cover = $realpath . $coverFilename . '?' . $time;
                  $company->setCover($cover);
                  $company->setUpdateDate($time);
                 */
// Save all the parameters
                $company->setCover($cover);
                $company->setUpdateDate(time());
                $dm->flush($company);
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        return new JsonResponse($cover);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function removeCompanyCoverAction(Request $request) {

        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();


            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/company/covers/";
            else
                $copypath = "/../../web/src/cdn/img/company/covers/";

            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setCompanyCoverCopyPath($copypath);
            $manageAvatarAndCover->removeAvatarOrCover($company->getAvatar(), 'cover', 'company');
            $company->setCover(null);
            $dm->flush();
            $dm->clear();
        }
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileCoverAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $coverFilename = '';
            if (isset($request->cover)) {

                $dataURI = $request->cover;
                $isImage = strpos($dataURI, "image");
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400

                $dm = $this->get('doctrine_mongodb.odm.document_manager');
                $manageAvatarAndCover = new ManageAvatarAndCover($dm);
                $env = $this->get('kernel')->getEnvironment();
                if ($env == 'dev')
                    $copypath = "/../../mobntouch/src/cdn/img/profile/covers/";
                else
                    $copypath = "/../../web/src/cdn/img/profile/covers/";
                $realpath = "/img/profile/covers/";
                $imageName = $user->getUsername();
                $manageAvatarAndCover->setProfileCoverCopyPath($copypath);
                $manageAvatarAndCover->setProfileCoverRealPath($realpath);
                $cover = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $imageName, 'cover', 'profile', true);
                /*
                  $pos1 = strpos($dataURI, "/");
                  $pos2 = strpos($dataURI, ";");
                  $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                  $dataURI = 'data://' . substr($dataURI, 5);
                  //$path = "/uploads/profile/avatars/";
                  $env = $this->get('kernel')->getEnvironment();

                  if ($env == 'dev')
                  $copypath = "/../../mobntouch/src/cdn/img/profile/covers/";
                  else
                  $copypath = "/../../web/src/cdn/img/profile/covers/";
                  $realpath = "/img/profile/covers/";

                  $root = getcwd();
                  $originalFilename = $user->getUsername() . '-original.' . $extension;
                  $coverFilename = $user->getUsername() . '.' . $extension;
                  $fp = fopen($root . $copypath . $originalFilename, "w");
                  fwrite($fp, file_get_contents($dataURI));
                  fclose($fp);

                  //exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 128x128 -quality 85 '.getcwd().$copypath.$avatarFilename);
                  exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $coverFilename);

                  $time = time();
                  $user->setCover($realpath . $coverFilename . '?' . $time);
                  $user->setUpdateDate(time());
                 * 
                 */
// Set up database
// Save all the parameters
                $user->setCover($cover);
                $user->setUpdateDate(time());
                $dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
                //$mU = new ManageUser($dm, $this->container);
                //$mU->updateAllDocumentsUserDetails($user);
                $env = $this->get('kernel')->getEnvironment();
                $localPath = $this->container->getParameter('local_console_path');
                $serverPath = $this->container->getParameter('server_console_path');
                if ($env == 'dev') {
                    $process = new Process("{$localPath} Job:UpdateProfile {$user->getId()}");
                } else {
                    $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
                }
                $process->disableOutput();
                $process->start();
            }
        }
        return new JsonResponse($cover);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function removeProfileCoverAction(Request $request) {

        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/profile/covers/";
            else
                $copypath = "/../../web/src/cdn/img/profile/covers/";

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setProfileCoverCopyPath($copypath);
            $manageAvatarAndCover->removeAvatarOrCover($user->getCover(), 'cover', 'profile');
            $user->setCover(null);
            $dm->flush();
            $dm->clear();
            //$mU = new ManageUser($dm, $this->container);
            //$mU->updateAllDocumentsUserDetails($user);
            $env = $this->get('kernel')->getEnvironment();
            $localPath = $this->container->getParameter('local_console_path');
            $serverPath = $this->container->getParameter('server_console_path');
            if ($env == 'dev') {
                $process = new Process("{$localPath} Job:UpdateProfile {$user->getId()}");
            } else {
                $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
            }
            $process->disableOutput();
            $process->start();
        }
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfilePersonalAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $companyPage = $user->getCompanyPage();

// Get POST parameters
            if (isset($request->name))
                $user->setName($request->name);
            if (isset($request->lastname))
                $user->setLastname($request->lastname);
            if (isset($request->company) && !empty($request->company) && !isset($companyPage['administrator']))
                $user->setCompany($request->company);
            if (isset($request->company) && empty($request->company))
                $user->setCompany(null);
            if (isset($request->jobTitle))
                $user->setJobTitle($request->jobTitle);
            if (isset($request->city))
                $user->setCity($request->city);
            if (isset($request->basedCountry))
                $user->setBasedCountry($request->basedCountry);
            $user->setUpdateDate(time());

            $tempname = explode(" ", $request->name);
            $templastname = explode(" ", $request->lastname);
            $tempcompany = explode(" ", $request->company);
            $tempjobTitle = explode(" ", $request->jobTitle);
            $search = array_merge($tempname, $templastname, $tempcompany, $tempjobTitle);
            $user->setSearch($search);

            // Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
            $user->setSearch($searches->updateUserSearch($user));
            // Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            //$this->updateUserSearch($dm, $user);
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateUserSearch($user);

            $company = null;
            $oldCompanyUsername = null;

            //Get old company username
            if (isset($user->companyPage['employee']['company'])) {
                $oldCompanyUsername = $user->companyPage['employee']['company'];
            } else {
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();
                if (isset($company->username)) {
                    $oldCompanyUsername = $company->username;
                }
            }

            if (isset($request->companyid)) {
                // New or modified Existing Company
                $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $request->companyid));
            } else if (isset($request->company) && !empty($request->company)) {
                //$company = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('name'=> $request->company));
                $companyName = trim($request->company);
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('name')->equals(new \MongoRegex('/.*' . $companyName . '.*/i'))
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();
            }

            if (!$company)
                $newCompanyUsername = null;
            else
                $newCompanyUsername = $company->getUsername();

            if ($oldCompanyUsername != $newCompanyUsername) {

                //$oldCompany = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('username'=> $oldCompanyUsername));
                $oldCompany = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('username')->equals($oldCompanyUsername)
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();

                if ($oldCompany) {

                    // Update Employees
                    $employees = $oldCompany->getEmployees();
                    $newEmployees = array();

                    $updateEmployees = false;

                    foreach ($employees as $key => $employee) {
                        if ($employee['id'] == $user->getId()) {
                            $updateEmployees = true;
                        } else {
                            $newEmployees[] = $employee;
                        }
                    }

                    if ($updateEmployees) {

                        // update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:Company')
                                // Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($oldCompany->getId())

                                // Update found Campaign
                                ->field("employees")->set($newEmployees)

                                // Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                }


                //return new JsonResponse($user->getId());

                $q = $dm->createQueryBuilder('DataBaseBundle:User')
                                // Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId());

                // Update found Campaign
                if ($company) {

                    if ($companyPage && isset($companyPage['employee'])) {
                        $companyPage['employee'] = array('company' => $company->getUsername());
                    } else {
                        $companyPage = array(
                            "employee" => array('company' => $company->getUsername())
                        );
                    }

                    $q->field('companyPage')->set($companyPage);
//$q ->field('companyPage.employee')->set(array('company' => $company->getUsername()));
                    $q->field('company')->set($company->getName());
                    $user->setCompanyPage(array('employee' => array('company' => $company->getUsername())));
                } else if (!isset($companyPage['administrator'])) {
                    $q->field('companyPage')->unsetField()->exists(true);
                    $user->setCompanyPage(null);
                }

                // Options
                $q->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
                //return new JsonResponse();
            }



            if (isset($request->name) or isset($request->lastname) or isset($request->jobTitle) or isset($request->company)) {


// Get the User
//$companyPage = $user->getCompanyPage();
//if($companyPage) {
//$companyUsername = $companyPage['administrator']['company'];
//$company = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('username'=> $companyUsername));

                if ($company) {

                    $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                            ->update()
                            ->multiple(true)
                            ->field('administrators.id')->equals($user->getId())

// Update found Campaign
                            ->field("administrators.$.name")->set($request->name)
                            ->field("administrators.$.lastname")->set($request->lastname)
                            ->field("administrators.$.jobTitle")->set($request->jobTitle)

// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                    /*
                      // Update Admins
                      $admins = $company->getAdministrators();
                      $updateAdmin = false;

                      foreach($admins as $key => $admin){
                      if($admin['id']==$user->getId()){
                      $updateAdmin = true;
                      $admins[$key]['name'] = $request->name;
                      $admins[$key]['lastname'] = $request->lastname;
                      $admins[$key]['jobTitle'] = $request->jobTitle;
                      break;
                      }
                      }

                      if($updateAdmin){

                      // UPDATE

                      $dm->createQueryBuilder('DataBaseBundle:Company')
                      // Find the Campaign
                      ->update()
                      ->multiple(false)
                      ->field('_id')->equals($company->getId())

                      // Update found Campaign
                      ->field("administrators")->set($admins)

                      // Options
                      ->upsert(false)
                      ->getQuery()
                      ->execute();

                      } */
                }

//$companyUsername = $companyPage['employee']['company'];
//$company = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('username'=> $companyUsername));

                if ($company) {

// Update Employees
                    $employees = $company->getEmployees();
                    $updateEmployees = false;

                    foreach ($employees as $key => $employee) {
                        if ($employee['id'] == $user->getId()) {
                            $updateEmployees = true;
                            $employees[$key]['name'] = $request->name;
                            $employees[$key]['lastname'] = $request->lastname;
                            $employees[$key]['jobTitle'] = $request->jobTitle;
                            break;
                        }
                    }

                    if ($updateEmployees) {

// UPDATE

                        $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($company->getId())

// Update found Campaign
                                ->field("employees")->set($employees)


// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    } else {

// ADD

                        $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($company->getId())

// Update found Campaign
                                ->field('employees')->addToSet(array(
                                    'id' => $user->getId(),
                                    'username' => $user->getUsername(),
                                    'name' => isset($request->name) ? $request->name : $user->getLastname(),
                                    'lastname' => isset($request->lastname) ? $request->lastname : $user->getLastname(),
                                    'jobTitle' => isset($request->jobTitle) ? $request->jobTitle : $user->getJobTitle(),
                                    'avatar' => $user->getAvatar(),
                                    'cover' => $user->getCover(),
                                    'miniResume' => $user->getMiniResume(),
                                    'inTouchCounter' => $user->getInTouchCounter(),
                                    'city' => $user->getCity(),
                                    'basedCountry' => $user->getBasedCountry(),
                                    'responseRate' => $user->getResponseRate()
                                ))

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                }


// UPDATE FOLLOWERS INFOS

                $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('followers.id')->equals($user->getId())

// Update found Campaign
                        ->field("followers.$.name")->set($user->getName())
                        ->field("followers.$.lastname")->set($user->getLastname())
                        ->field("followers.$.jobTitle")->set($user->getJobTitle())
                        ->field("followers.$.company")->set($user->getCompany())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

// UPDATE INTOUCH INFOS

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('inTouch.id')->equals($user->getId())

// Update found Campaign
                        ->field("inTouch.$.name")->set($user->getName())
                        ->field("inTouch.$.lastname")->set($user->getLastname())
                        ->field("inTouch.$.jobTitle")->set($user->getJobTitle())
                        ->field("inTouch.$.company")->set($user->getCompany())
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }

            if (isset($request->name) or isset($request->lastname)) {

// UPDATE TOUCH MAIL NAME

                $dm->createQueryBuilder('DataBaseBundle:Mail')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('fromID')->equals($user->getId())

// Update found Campaign
                        ->field("senderName")->set($user->getName() . " " . $user->getLastname())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->createQueryBuilder('DataBaseBundle:Mail')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('toID')->equals($user->getId())

// Update found Campaign
                        ->field("receiverName")->set($user->getName() . " " . $user->getLastname())


// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

// UPDATE OFFER NAME

                $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('userID')->equals($user->getId())

// Update found Campaign
                        ->field("userFirstName")->set($user->getName())
                        ->field("userLastName")->set($user->getLastname())
                        ->field("userCompany")->set($user->getCompany())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

// UPDATE OFFER REPLY NAME

                $dm->createQueryBuilder('DataBaseBundle:OfferReply')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('userID')->equals($user->getId())

// Update found Campaign
                        ->field("userFirstName")->set($user->getName())
                        ->field("userLastName")->set($user->getLastname())
                        ->field("userCompany")->set($user->getCompany())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('profile')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('professional')
                        ->field("action")->set('profile')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = (int) $updatedData["percentage"];
        $user->profilePoints = (int) $updatedData["points"];
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfilePersonalDetailsAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        } else {

            $postdata = $request->getContent();
            $data = json_decode($postdata);

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $user->setName($data->name);
            $user->setLastname($data->lastname);
            if ($data->formattedaddress) {
                $user->setCity($data->city);
                $user->setCountry($data->country);
                $user->setBasedCountry($data->basedCountry);
                $user->setLat($data->geometrylocation->lat);
                $user->setLng($data->geometrylocation->lng);
                $user->setFormatedAddress($data->formattedaddress);
            }
            $user->setBirthdayDD($data->birthdayDD);
            $user->setBirthdayMM($data->birthdayMM);
            $user->setBirthdayYYYY($data->birthdayYYYY);
            $user->setGender($data->gender);
            $user->setJobTitle($data->jobTitle);
            $user->setCompanyType($data->companyType);
            //  $user->setCompanyType($data->role);
            $user->setCompanySubType($data->companySubType);
            $user->setHasEmployer($data->hasEmployer);
            $companyPage = $user->getCompanyPage();
            if (isset($data->grossSalary) && !empty($data->grossSalary)) {
                $user->setGrossSalary($data->grossSalary);
            }
            if (isset($data->currency) && !empty($data->currency)) {
                $user->setCurrency($data->currency);
            }
            $user->setCurrentStatus($data->currentStatus);
            $user->setMiniResume($data->miniResume);
            $user->setLinkedin($data->linkedin);
            $user->setTwitter($data->twitter);
            $user->setFacebook($data->facebook);
            $user->setGithub($data->github);
            $user->setStackOverflow($data->stackOverflow);
            $user->setDribbble($data->dribbble);
            $user->setBehance($data->behance);
            $user->setInstagram($data->instagram);
            $user->setPinterest($data->pinterest);
            $user->setWebsite($data->website);
            $user->setOtherLink($data->otherLink);

            //update user compnay related information
            /* if (isset($data->company) && !empty($data->company) && !isset($companyPage['administrator']) && $data->hasEmployer) {
              $user->setCompany($data->company);
              } else {
              $user->setCompany(null);
              } */


            /* if (!isset($data->company) || !empty($data->company) || !$data->hasEmployer) {
              $user->setCompany(null);
              } */

            if (is_array($user->getCompanyPage()) && array_key_exists('employee', $user->getCompanyPage())) {
                $oldCompanyUserName = $user->getCompanyPage()['employee']['company'];
            } else {
                $oldCompany = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();
                if (isset($oldCompany->username)) {
                    $oldCompanyUserName = $oldCompany->username;
                }
            }
            if (isset($oldCompanyUserName) && !empty($oldCompanyUserName)) {
                $oldCompany = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $oldCompanyUserName));
            }
            //Get company by id or name added by user
            if (isset($data->companyid) && $data->companyid) {
                $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $data->companyid));
            } else if (isset($data->company) && !empty($data->company)) {
                $companyUserName = trim($data->company);
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('name')->equals(new \MongoRegex("/{$companyUserName}/i"))
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();
            }
            //Remove user company page and remove employee from employees list of company
            if (isset($oldCompany) && !isset($company)) {
                $companyName = isset($data->company) ? $data->company : null;
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
                        ->field('companyPage')->unsetField()->exists(true)
                        ->field('company')->set($companyName)
                        ->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $user->setCompany($companyName);
                unset($user->companyPage);

                $dm->flush();
                $dm->clear();

                //Check user previously added company or not
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('employees.id')->equals($user->getId())
                        ->getQuery()
                        ->getSingleResult();

                //If user removed company remove user from old company employees object
                if ($company) {
                    $employees = $company->getEmployees();
                    $updateEmployees = false;
                    $newEmployees = array();
                    foreach ($employees as $key => $employee) {
                        if ($employee['id'] == $user->getId()) {
                            $updateEmployees = true;
                        } else {
                            $newEmployees[] = $employee;
                        }
                    }
                    if ($updateEmployees) {
                        $dm->createQueryBuilder('DataBaseBundle:Company')
                                ->update()
                                ->multiple(false)
                                ->field('_id')
                                ->equals($oldCompany->getId())
                                ->field("employees")
                                ->set($newEmployees)
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                        $dm->flush();
                        $dm->clear();
                    }
                }
            } elseif (!isset($oldCompany) && isset($company) && (!$user->getCompanyPage() || (!is_array($user->getCompanyPage()) || !array_key_exists('administrator', $user->getCompanyPage())))) {
                //!is_array($user->getCompanyPage()) && !array_key_exists('administrator', $user->getCompanyPage())
                $companyPage = array(
                    "employee" => array('company' => $company->getUsername())
                );

                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
                        ->field('company')->set($company->getName())
                        ->field('companyPage')->set($companyPage)
                        ->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($company->getId())
                        ->field('employees')->addToSet(array(
                            'id' => $user->getId(),
                            'username' => $user->getUsername(),
                            'name' => $user->getName(),
                            'lastname' => $user->getLastname(),
                            'jobTitle' => $user->getJobTitle(),
                            'avatar' => $user->getAvatar(),
                            'cover' => $user->getCover(),
                            'miniResume' => $user->getMiniResume(),
                            'inTouchCounter' => $user->getInTouchCounter(),
                            'city' => $user->getCity(),
                            'basedCountry' => $user->getBasedCountry(),
                            'responseRate' => $user->getResponseRate()
                        ))
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
                $dm->flush();
                $dm->clear();

                $user->setCompany($company->getName());
                $user->setCompanyPage($companyPage);
            } elseif (isset($company) && isset($oldCompany) && (!$user->getCompanyPage() || (!is_array($user->getCompanyPage()) || !array_key_exists('administrator', $user->getCompanyPage())))) {

                $companyPage = array(
                    "employee" => array('company' => $company->getUsername())
                );

                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
                        ->field('company')->set($company->getName())
                        ->field('companyPage')->set($companyPage)
                        ->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear();

                $user->setCompany($company->getName());
                $user->setCompanyPage($companyPage);

                $employees = $company->getEmployees();
                $updateEmployees = false;

                foreach ($employees as $key => $employee) {
                    if ($employee['id'] == $user->getId()) {
                        $updateEmployees = true;
                        $employees[$key]['name'] = $user->getName();
                        $employees[$key]['lastname'] = $user->getLastName();
                        $employees[$key]['jobTitle'] = $user->getJobTitle();
                        $employees[$key]['avatar'] = $user->getAvatar();
                        $employees[$key]['responseRate'] = $user->getResponseRate();
                        break;
                    }
                }

                if ($updateEmployees) {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')
                            ->equals($company->getId())
                            ->field("employees")
                            ->set($employees)
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                    $dm->flush();
                    $dm->clear();
                } else {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($company->getId())
                            ->field('employees')->addToSet(array(
                                'id' => $user->getId(),
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'lastname' => $user->getLastname(),
                                'jobTitle' => $user->getJobTitle(),
                                'avatar' => $user->getAvatar(),
                                'cover' => $user->getCover(),
                                'miniResume' => $user->getMiniResume(),
                                'inTouchCounter' => $user->getInTouchCounter(),
                                'city' => $user->getCity(),
                                'basedCountry' => $user->getBasedCountry(),
                                'responseRate' => $user->getResponseRate()
                            ))
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                    $dm->flush();
                    $dm->clear();
                }


                $employees = $oldCompany->getEmployees();
                $updateEmployees = false;
                $newEmployees = array();
                foreach ($employees as $key => $employee) {
                    if ($employee['id'] == $user->getId()) {
                        $updateEmployees = true;
                    } else {
                        $newEmployees[] = $employee;
                    }
                }
                if ($updateEmployees) {
                    $dm->createQueryBuilder('DataBaseBundle:Company')
                            ->update()
                            ->multiple(false)
                            ->field('_id')
                            ->equals($oldCompany->getId())
                            ->field("employees")
                            ->set($newEmployees)
                            ->upsert(false)
                            ->getQuery()
                            ->execute();
                    $dm->flush();
                    $dm->clear();
                }
            }
            $updatedData = $this->updateProfilePercentage($user);
            $user->profilePercentage = (int) $updatedData["percentage"];
            $user->profilePoints = (int) $updatedData["points"];

            //$keywords = new \Mobntouch\APIBundle\Classes\ManageKeywords($dm);
            //$user->setKeywords($keywords->updateUserKeywords($user));

            $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
            $user->setSearch($searches->updateUserSearch($user));
            $dm->flush();
            $dm->clear();
            $Urole = $dm->createQueryBuilder('DataBaseBundle:UserRoles')
                            ->field('name')->equals($data->companyType)
                            ->getQuery()->execute()->count();

            if ($Urole == 0) {
                
                $dm->createQueryBuilder('DataBaseBundle:UserRoles')
                        ->insert()
                        ->field("name")->set($data->companyType)
                        ->getQuery()
                        ->execute();
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
            //$mU = new ManageUser($dm, $this->container);
            //$mU->updateAllDocumentsUserDetails($user);
            $env = $this->get('kernel')->getEnvironment();
            $localPath = $this->container->getParameter('local_console_path');
            $serverPath = $this->container->getParameter('server_console_path');
            if ($env == 'dev') {
                $process = new Process("{$localPath} Job:UpdateProfile {$user->getId()}");
            } else {
                $process = new Process("{$serverPath} Job:UpdateProfile {$user->getId()} --env={$env}");
            }
            $process->disableOutput();
            $process->start();


            return new JsonResponse($user);
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editInstantContactDetailsAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);
        $user->setImContacts((array) $data->imContacts);
        $user->setContactEmail($data->contactEmail);
        $user->setPhone($data->phone);
        $dm->flush();
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileOrderAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);
        $user->setProfileOrder($data->profileOrder);
        $dm->flush();
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddServiceAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $services = $user->getServices();
        //$arrExisingServices = $this->array_column($user->getServices(), 'service');
        //print_r($arrExisingServices);
        //die;

        $arrService = array(
            'service' => $data->service,
            'location' => array(
               'city' => isset($data->city)?$data->city:'',
                'basedCountry' => isset($data->basedCountry)?$data->basedCountry:'',
                'formatted_address' => isset($data->formatted_address)?$data->formatted_address:'',
                'geometrylocation' => isset($data->geometrylocation)?(array) $data->geometrylocation:[]
            ),
            'remoteService' => isset($data->remoteService) ? $data->remoteService : false,
            'whoCanSendMessage' => $data->whoCanSendMessage,
            'experties' => $data->experties,
            'minCharge' => $data->minCharge,
            'maxCharge' => $data->maxCharge,
            'subServices' => isset($data->subServices) ? (array) $data->subServices : []
        );

        //if(!in_array($data->service, $arrExisingServices)){
        $services[] = $arrService;
        //}

        $user->setServices($services);

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();

        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileEditServiceAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);
         $getgeo=[];
        $lat = $user->getLat();
        $lan = $user->getLng();
        $services = $user->getServices();
        $city = $services[$data->selectedIndex]['location']['city'];
        $basedcountry = $services[$data->selectedIndex]['location']['basedCountry'];
        $getgeo['lat'] = $services[$data->selectedIndex]['location']['geometrylocation']['lat'];
        $getgeo['lan'] = $services[$data->selectedIndex]['location']['geometrylocation']['lng'];
        
        
       die;
        $arrService = array(
            'service' => $data->service,
            'location' => array(
                'city' => $data->location->city,
                'basedCountry' => $data->location->basedCountry,
                'formatted_address' => $data->location->formatted_address,
                'geometrylocation' => (array) $data->location->geometrylocation
            ),
            'remoteService' => $data->remoteService,
            'whoCanSendMessage' => $data->whoCanSendMessage,
            'experties' => $data->experties,
            'minCharge' => $data->minCharge,
            'maxCharge' => $data->maxCharge,
            'clients' => isset($data->clients) ? $data->clients : array(),
            'subServices' => (array) $data->subServices
        );
        $services[$data->selectedIndex] = $arrService;
        $user->setServices($services);

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();

        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileRemoveServiceAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $services = $user->getServices();
        $serviceIndex = $data->selectedIndex;
        if (!isset($services[$serviceIndex])) {
            throw new NotFoundHttpException();
        }


        $env = $this->get('kernel')->getEnvironment();
        if ($env == 'dev')
            $copypath = "/../../mobntouch/src/cdn/img/clients/avatars/";
        else
            $copypath = "/../../web/src/cdn/img/clients/avatars/";

        $realpath = "/img/clients/avatars/";
        $manageAvatarAndCover = new ManageAvatarAndCover($dm);
        $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
        $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
        if (array_key_exists('clients', $services[$serviceIndex])) {
            foreach ($services[$serviceIndex]['clients'] as $client) {
                if (array_key_exists('avatar', $client) && !array_key_exists('id', $client)) {
                    $manageAvatarAndCover->removeAvatarOrCover($client['avatar'], 'avatar', 'profile');
                }
            }
        }
        array_splice($services, $serviceIndex, 1);
        $user->setServices($services);

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddServiceSuggestionAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        if ($data->serviceName == null || $data->serviceName == '') {
            throw new NotFoundHttpException();
        }

        $serviceName = trim($data->serviceName);
        $service = $dm->createQueryBuilder('DataBaseBundle:ServiceSuggestions')
                ->field('service')->equals(new \MongoRegex("/{$serviceName}$/i"))
                ->limit(1)
                ->getQuery()
                ->getSingleResult();

        if ($service) {
            $suggestedBy = $service->getSuggestedBy() ? $service->getSuggestedBy() : array();
            $suggestedBy[] = array(
                'id' => $user->getId(),
                'username' => $user->getUsername(),
                'name' => $user->getName(),
                'lastname' => $user->getLastname(),
                'avatar' => $user->getAvatar(),
                'company' => $user->getCompany(),
                'jobTitle' => $user->getJobtitle(),
                'date' => time()
            );
            $service->setSuggestedBy($suggestedBy);
            $service->setUpdateDate(time());
            $dm->flush();
            $dm->clear();
        } else {
            $service = new ServiceSuggestions();
            $service->setService($serviceName);
            $service->setSearch(explode(' ', $serviceName));
            $service->setSuggestedBy(array(array(
                    'id' => $user->getId(),
                    'username' => $user->getUsername(),
                    'name' => $user->getName(),
                    'lastname' => $user->getLastname(),
                    'avatar' => $user->getAvatar(),
                    'cover' => $user->getCover(),
                    'company' => $user->getCompany(),
                    'jobTitle' => $user->getJobtitle(),
                    'date' => time()
            )));
            $service->setUpdateDate(time());
            $dm->persist($service);
            $dm->flush();
        }

        $suggestedServices = $user->getSuggestedServices() ? $user->getSuggestedServices() : array();
        $suggestedServices[] = array(
            'id' => $service->getId(),
            'service' => $service->getService(),
            'date' => time(),
        );
        $user->setSuggestedServices($suggestedServices);
        $user->setUpdateDate(time());
        $dm->flush();
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddServiceClientAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $services = $user->getServices();

        $serviceIndex = $data->clientForService;
        if (!isset($services[$serviceIndex])) {
            throw new NotFoundHttpException();
        }


        if (isset($data->clientCompanyId) && $data->clientCompanyId) {
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $data->clientCompanyId));
        } else if (isset($data->clientCompany)) {

            $companyName = trim($data->clientCompany);
            $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->field('name')->equals(new \MongoRegex("/{$companyName}$/i"))
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();
        }

        if (array_key_exists('clients', $services[$serviceIndex]) && $data->clientCompanyId) {

            foreach ($services[$serviceIndex]['clients'] as $client) {
                if (array_key_exists('id', $client) && $client['id'] == $data->clientCompanyId)
                    throw new AccessDeniedHttpException();
            }
        }

        if ($company) {
            $arrClient = array(
                'id' => $company->getId(),
                'username' => $company->getUsername(),
                'name' => $company->getName(),
                'avatar' => $company->getAvatar(),
                'date' => time()
            );
        } else {
            $arrClient = array(
                'name' => $data->clientCompany,
                'date' => time()
            );
        }
        $services[$serviceIndex]['clients'][] = $arrClient;
        $user->setServices(array_values($services));
        $dm->flush($user);
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileRemoveServiceClientAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $services = $user->getServices();

        if (!isset($data->serviceIndex) || !isset($data->clientIndex)) {
            throw new NotFoundHttpException();
        }

        $serviceIndex = $data->serviceIndex;
        $clientIndex = $data->clientIndex;

        if (!isset($services[$serviceIndex]) || !array_key_exists('clients', $services[$serviceIndex])) {
            throw new NotFoundHttpException();
        }


        $env = $this->get('kernel')->getEnvironment();
        if ($env == 'dev')
            $copypath = "/../../mobntouch/src/cdn/img/clients/avatars/";
        else
            $copypath = "/../../web/src/cdn/img/clients/avatars/";
        $realpath = "/img/clients/avatars/";

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $manageAvatarAndCover = new ManageAvatarAndCover($dm);
        $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
        $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
        $client = $services[$serviceIndex]['clients'][$clientIndex];
        if (array_key_exists('avatar', $client) && !array_key_exists('id', $client)) {
            $manageAvatarAndCover->removeAvatarOrCover($client['avatar'], 'avatar', 'profile');
        }
        array_splice($services[$serviceIndex]['clients'], $clientIndex, 1);
        $user->setServices($services);
        $dm->flush($user);
        $dm->clear();
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddClientAvatarAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $postdata = $request->getContent();
        $request = json_decode($postdata);
        $avatarFilename = '';
        $u = new Utility();
        if (isset($request->avatar)) {
            $dataURI = $request->avatar;
            $serviceIndex = $request->serviceIndex;
            $clinetIndex = $request->clientIndex;
            $services = $user->getServices();
            $service = $services[$serviceIndex];
            $client = $services[$serviceIndex]['clients'][$clinetIndex];
            $isImage = strpos($dataURI, "image");
            if (!$isImage)
                throw new BadRequestHttpException(); // 400

            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/clients/avatars/";
            else
                $copypath = "/../../web/src/cdn/img/clients/avatars/";
            $realpath = "/img/clients/avatars/";

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
            $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
            $imageName = strtolower($u->cleanString($service['service'] . $client['date']));
            $avatar = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $imageName, 'avatar', 'profile', true);
            $services[$serviceIndex]['clients'][$clinetIndex]['avatar'] = $avatar;
            $user->setServices($services);
            $user->setUpdateDate(time());
            $dm->flush();
            $dm->clear();
        }
        return new JsonResponse($avatar);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileContactAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            if (isset($request->email))
                $user->setEmail(strtolower(trim($request->email)));
            if (isset($request->skype))
                $user->setSkype($request->skype);
            if (isset($request->linkedin))
                $user->setLinkedin($request->linkedin);
            if (isset($request->twitter))
                $user->setTwitter($request->twitter);
            if (isset($request->phone))
                $user->setPhone($request->phone);
            if (isset($request->website))
                $user->setWebsite($request->website);
            $user->setUpdateDate(time());

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddIOSAppsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
//$appid = strtolower(trim($request->appid));
        $itunesURL = strtolower(trim($request->itunesURL));

        preg_match("/id(\d+)/", $itunesURL, $appid);
        if (!isset($appid[1])) {
// Checking if url contains an id (correct format)
            throw new BadRequestHttpException(); // 400
        }
        $appid = $appid[1];

// https://itunes.apple.com/fr/app/quiz-run-jeu-fun/id714804727?mt=8
        preg_match("/com\/(\w+)/", $itunesURL, $country);
        if (isset($country[1]) && $country[1] != 'app') {
            $itunesLookupURL = "https://itunes.apple.com/" . $country[1] . "/lookup?id=" . $appid;
        } else {
            $itunesLookupURL = "https://itunes.apple.com/lookup?id=" . $appid;
        }
        $content = file_get_contents($itunesLookupURL);
        $content = json_decode($content);
        if (isset($content->results["0"])) {
            $array = $content->results["0"];

            $genres = $array->genres;

            $mynewapp = array(
                'name' => $array->trackName,
                'appid' => $array->trackId,
                'icon' => $array->artworkUrl60,
                'categories' => $genres,
                'url' => $itunesURL,
                'artistName' => $array->artistName
            );

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $apps = array_merge($user->getIosApps(), array($mynewapp));
            $user->setIosApps($apps);
            $user->setCategories(array_unique(array_merge($user->getCategories(), $genres)));
            $user->setUpdateDate(time());

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            /* $dm->createQueryBuilder('DataBaseBundle:User')
              // Find
              ->update()
              ->multiple(false)
              ->field('_id')->equals($user->getId())

              // Update
              ->field("iosApps")->addToSet($mynewapp)
              ->field("categories")->set(array_unique(array_merge($user->getCategories(),$genres)))
              //foreach($genres as $genre) $q->field("categories")->addToSet($genre);

              // Options
              ->upsert(false)
              ->getQuery()
              ->execute(); */

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('apps')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('apps')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["apps" => $apps, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileDeleteIOSAppsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $appid = strtolower(trim($request->appid));

        /* preg_match("/id(\d+)/", $itunesURL, $appid);
          if(!isset($appid[1])) {
          // Checking if url contains an id (correct format)
          throw new BadRequestHttpException(); // 400
          } */

        /* $content = file_get_contents("https://itunes.apple.com/lookup?id=".$appid);
          $content = json_decode($content);
          if(isset($content->results["0"])){
          $array = $content->results["0"];

          $genres = $array->genres;

          $removeapp = array(
          'name' => $array->trackName,
          'appid' => $array->trackId,
          'icon' => $array->artworkUrl60,
          'categories' => $genres
          );

          // Set up database
          $dm = $this->get('doctrine_mongodb.odm.document_manager');
          $dm->createQueryBuilder('DataBaseBundle:User')
          // Find
          ->update()
          ->multiple(false)
          ->field('_id')->equals($user->getId())

          // Update
          ->field("iosApps")->pull($removeapp)


          // Options
          ->upsert(false)
          ->getQuery()
          ->execute();



          } */

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $iosApps = $user->getIosApps();
        foreach ($iosApps as $key => $app) {
            if ($app['appid'] == $appid) {
                unset($iosApps[$key]);
                break;
            }
        }
        $user->setIosApps($iosApps);
        $user->setUpdateDate(time());
        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["apps" => $iosApps, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAndroidAppsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $googlePlayURL = strtolower(trim($request->googlePlayURL));

//preg_match("/id=(\d+)/", $googlePlayURL, $appid);
            preg_match("/id=(\w.+)/", $googlePlayURL, $appid);
            if (!isset($appid[1])) {
// Checking if url contains an id (correct format)
                throw new BadRequestHttpException(); // 400
            }
            $appid = $appid[1];

            $page_url = 'https://play.google.com/store/apps/details?id=' . $appid;
            $content = file_get_contents($page_url);

            $crawler = new Crawler($content);

            $title = $crawler->filter('.document-title')->text();
            $icon = $crawler->filter('.cover-image')->attr('src');
            $developer = $crawler->filter('.info-container > div > a > span')->text();

            $category = $crawler->filter('.category')->attr('href');
            $category = strrchr($category, "/");
            $category = substr($category, 1);
            $category = str_replace("_", " ", $category);

            $genres = array($category);

            $mynewapp = array(
                'name' => $title,
                'appid' => $appid,
                'icon' => $icon,
                'categories' => $genres,
                'url' => $googlePlayURL,
                'artistName' => $developer
            );

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $apps = array_merge($user->getAndroidApps(), array($mynewapp));
            $user->setAndroidApps($apps);
            $user->setCategories(array_unique(array_merge($user->getCategories(), $genres)));
            $user->setUpdateDate(time());

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('apps')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('apps')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
            $this->updateProfilePercentage($user);
            return new JsonResponse($apps);


            return new JsonResponse();
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileDeleteAndroidAppsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $appid = strtolower(trim($request->appid));

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $androidApps = $user->getAndroidApps();
        foreach ($androidApps as $key => $app) {
            if ($app['appid'] == $appid) {
                unset($androidApps[$key]);
                break;
            }
        }
        $user->setAndroidApps($androidApps);
        $user->setUpdateDate(time());

        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
        $this->updateProfilePercentage($user);
        return new JsonResponse($androidApps);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddCategoryAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $category = ucfirst(strtolower(trim($request->category)));

// Set up database
        $user->setCategories(array_unique(array_merge($user->getCategories(), array($category))));

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!


        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileDeleteCategoryAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $category = strtolower(trim($request->category));

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $categories = $user->getCategories();
        foreach ($categories as $key => $cat) {
            if (strtolower($cat) == $category) {
                unset($categories[$key]);
                break;
            }
        }
        $user->setCategories($categories);
        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!


        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileSummaryAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $summary = $request->summary;

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $user->setSummary($summary);
        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!


        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('summary')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('summary')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }
//$user->profilePercentage=$this->updateProfilePercentage($user);
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["summary" => $summary, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddCompetenceAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $competence = $request->competence;
        $competence = str_replace("#", "", $competence);

// Set up database
        $user->setCompetences(array_unique(array_merge($user->getCompetences(), array($competence))));
        $user->setUpdateDate(time());

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $dm->persist($user);
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        $dm->createQueryBuilder('DataBaseBundle:Competence')
// Find the Campaign
                ->update()
                ->multiple(false)
                ->field('name')->equals($competence)

// Update found Campaign
                ->field("name")->set($competence)

// Options
                ->upsert(true)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        ;
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function updateUserVersionAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();
        $lastVersion = null;

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {


// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);
// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
//return new JsonResponse($request);
            if (isset($request->skipStatus)) {
                $skipStatus = $request->skipStatus;

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
                        ->field('skipStatus')->set(true)
                        ->upsert(true)
                        ->getQuery()
                        ->execute();
                $dm->flush();
                $dm->clear();
                $retrun = (["skipStatus" => true]);
            } else {

// Get POST parameters
                $lastVersion = $request->lastVersion;

// Set up database
                $user->setVersion($lastVersion);

// Set up database
//$dm = $this->get('doctrine_mongodb.odm.document_manager');

                $dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
                $retrun = $lastVersion;
            }
        }

        return new JsonResponse($retrun);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function editProfileDeleteCompetenceAction(Request $request)
      {

      // Get the User
      $user = $this->getCurrentUser();

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }else{

      }
      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $competence = $request->competence;

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');
      $competences = $user->getCompetences();
      foreach($competences as $key => $comp){
      if($comp==$competence){
      unset($competences[$key]);
      break;
      }
      }
      $user->setCompetences($competences);
      $dm->persist($user);
      $dm->flush();



      return new JsonResponse($user);
      }
     */

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function editProfileAddLanguageAction(Request $request)
      {

      // Get the User
      $user = $this->getCurrentUser();

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }else{

      }
      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $newlanguage = ucfirst(strtolower(trim($request->newlanguage)));

      // Set up database
      $user->setLanguages(array_unique(array_merge($user->getLanguages(),array($newlanguage))));

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      $dm->persist($user);
      $dm->flush();



      return new JsonResponse($user);
      } */
    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function editProfileDeleteLanguageAction(Request $request)
      {

      // Get the User
      $user = $this->getCurrentUser();

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }else{

      }
      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $language = strtolower(trim($request->language));

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');
      $languages = $user->getLanguages();
      foreach($languages as $key => $lang){
      if(strtolower($lang)==$language){
      unset($languages[$key]);
      break;
      }
      }
      $user->setLanguages($languages);
      $dm->persist($user);
      $dm->flush();



      return new JsonResponse($user);
      } */

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileBuyTrafficAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $buytraffic = $request->buytraffic;


            /* $key = $request->key;
              $interests = $request->traffic_interests;
              $gender = $request->traffic_gender;
              $fromage = $request->traffic_fromage;
              $toage = $request->traffic_toage;
              $fromperiod = $request->traffic_fromperiod; // Tue Nov 04 2014 00:00:00 GMT+0100
              $toperiod = $request->traffic_toperiod; */


            /* $user->setBuyTraffic(array(array(
              "interests" => $interests,
              "gender" => $gender,
              "fromage" => $fromage,
              "toage" => $toage,
              "fromperiod" => intval(strtotime($fromperiod))*1000,
              "toperiod" => intval(strtotime($toperiod))*1000,
              ))); */

//$vars = array('interests', 'gender', 'fromage', 'toage', 'fromperiod', 'toperiod');
            $vars = array('platform', 'countries', 'pricing');

            /*
              // Check valid fields
              foreach($buytraffic as $key => $traffic){
              foreach($vars as $var){
              if(!isset($traffic->$var)) throw new BadRequestHttpException(); // 400
              }
              } */

// Check valid fields
            foreach ($buytraffic as $key => $traffic) {
                foreach ($vars as $var) {
                    if (!isset($traffic->$var)) {
                        throw new BadRequestHttpException(); // 400
//unset($buytraffic[$key]); // Delete empty or invalid form
//break;
                    }
                }
                if (isset($buytraffic[$key])) {
                    if (isset($traffic->fromperiod) and gettype($traffic->fromperiod) == 'string')
                        $buytraffic[$key]->fromperiod = intval(strtotime($traffic->fromperiod)) * 1000;
                    if (isset($traffic->toperiod) and gettype($traffic->toperiod) == 'string')
                        $buytraffic[$key]->toperiod = intval(strtotime($traffic->toperiod)) * 1000;
                    if (isset($traffic->pricing)) {
                        $newPricing = array();
                        $pricingQty = 0;
                        foreach ($traffic->pricing as $array) {
                            foreach ($array as $pricing => $value) {
                                if ($value) {
                                    $newPricing[$pricing] = true;
                                    $pricingQty++;
                                }
                            }
                        }
                        $buytraffic[$key]->pricing = array($newPricing);
                        $buytraffic[$key]->pricingQty = $pricingQty;
                    }
                }
            }

            $oldBuytraffic = $user->getBuyTraffic();
            $user->setBuyTraffic($buytraffic);


// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            /* $updateFeed = false;
              if($oldBuytraffic==null and $buytraffic!=null) $updateFeed = true;
              else if(count($this->arrayRecursiveDiff($oldBuytraffic, $buytraffic))>0) $updateFeed = true;

              if($updateFeed){ */

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('buyTraffic')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('buyTraffic')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["buytraffic" => $buytraffic, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileSellTrafficAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $selltraffic = $request->selltraffic;

            /*            $cpi = $request->traffic_cpi;
              $cpm = $request->traffic_cpm;
              $cpc = $request->traffic_cpc;
              $cpa = $request->traffic_cpa;
              $ctr = $request->traffic_ctr;
              $ppc = $request->traffic_ppc;
              $ppi = $request->traffic_ppi;
              $type = $request->traffic_type;
              $ios = $request->traffic_ios;
              $android = $request->traffic_android;
              $windows = $request->traffic_windows;
              $blackberry = $request->traffic_blackberry;
              $web = $request->traffic_web;
              $kind = $request->traffic_kind;
              $country = $request->traffic_country; */

//$vars = array('cpa', 'cps', 'cpc', 'cpv', 'cpd', 'cpi', 'cpl', 'cpm', 'dclick', 'c2call', 'ppcall', 'incent', 'noincent', 'ios', 'android', 'windows', 'blackberry', 'web', 'unity', 'baba', 'kind', 'trafficType', 'targeting', 'trading', 'country');
//$vars = array('cpa', 'cps', 'cpc', 'cpv', 'cpd', 'cpi', 'cpl', 'cpm', 'dclick', 'c2call', 'ppcall', 'incent', 'noincent', 'ios', 'android', 'windows', 'blackberry', 'web', 'unity', 'baba');
            $vars = array('pricing', 'platform', 'countries');

// Check valid fields
            foreach ($selltraffic as $key => $traffic) {
                foreach ($vars as $var) {
                    if (!isset($traffic->$var)) {
                        throw new BadRequestHttpException(); // 400
                        unset($selltraffic[$key]); // Delete empty or invalid form
                        break;
                    }
                }
                if (isset($selltraffic[$key])) {

// Pricing
                    if (isset($traffic->pricing)) {
                        $newPricing = array();
                        $pricingQty = 0;
                        foreach ($traffic->pricing as $array) {
                            foreach ($array as $pricing => $value) {
                                if ($value) {
                                    $newPricing[$pricing] = true;
                                    $pricingQty++;
                                }
                            }
                        }
                        $selltraffic[$key]->pricing = array($newPricing);
                        $selltraffic[$key]->pricingQty = $pricingQty;
                    }

// Platform
                    if (isset($traffic->platform)) {
                        $newPlatform = array();
                        $platformQty = 0;
                        foreach ($traffic->platform as $array) {
                            foreach ($array as $platform => $value) {
                                if ($value) {
                                    $newPlatform[$platform] = true;
                                    $platformQty++;
                                }
                            }
                        }
                        $selltraffic[$key]->platform = array($newPlatform);
                        $selltraffic[$key]->platformQty = $platformQty;
                    }
                }
            }

            $oldSelltraffic = $user->getSellTraffic();
            $user->setSellTraffic($selltraffic);

            /* $user->setSellTraffic(array(array(
              "cpi" => $cpi,
              "cpm" => $cpm,
              "cpc" => $cpc,
              "cpa" => $cpa,
              "ctr" => $ctr,
              "ppc" => $ppc,
              "ppi" => $ppi,
              "type" => $type,
              "ios" => $ios,
              "android" => $android,
              "windows" => $windows,
              "blackberry" => $blackberry,
              "web" => $web,
              "kind" => $kind,
              "country" => $country,
              ))); */

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            /* $updateFeed = false;
              if($oldSelltraffic==null and $selltraffic!=null) $updateFeed = true;
              else if(count($this->arrayRecursiveDiff($oldSelltraffic, $selltraffic))>0) $updateFeed = true;
              if($updateFeed){ */

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('sellTraffic')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('sellTraffic')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["sellTraffic" => $selltraffic, "user" => $user]);
    }

    public function editProfileCustomServicesAction(Request $request) {
        // Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        // Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

        // Get POST parameters
        $customServices = $request->customServices;
        $customBoxname = isset($request->customBoxname) && !empty($request->customBoxname) ? $request->customBoxname : 'Offers';
        $services = array();
        foreach ($customServices as $key => $service) {
            if (isset($service->market) && !empty($service->market) && isset($service->action) && !empty($service->action)) {

                $services[] = array(
                    'action' => $service->action,
                    'market' => $service->market,
                    'values' => isset($service->values) ? $service->values : array()
                );
            }
        }

        $profileOrder = $user->getProfileOrder();
        if ($profileOrder) {
            foreach ($profileOrder as $key => &$order) {
                if (!in_array($order['text'], ['Services', 'Experience', 'Education', 'About'])) {
                    $profileOrder[$key]['text'] = $customBoxname;
                }
            }
        } else if ($profileOrder && is_array($profileOrder) && count($profileOrder) <= 4) {
            array_push($profileOrder, array('text' => $customBoxname, 'i' => 5));
        } else {
            $profileOrder = array(
                array('text' => 'Services', 'i' => 1),
                array('text' => 'Experience', 'i' => 2),
                array('text' => 'Education', 'i' => 3),
                array('text' => 'About', 'i' => 4),
                array('text' => $customBoxname, 'i' => 5)
            );
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $user->setProfileOrder($profileOrder);
        $user->setCustomBoxname($customBoxname);
        $user->setCustomServices($services);
        $ms = new ManageSearch($dm);
        $search = $ms->updateUserSearch($user);

        $user->setSearch($search);

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!


        return new JsonResponse(["customServices" => $services, "customBoxname" => $customBoxname, "profileOrder" => $profileOrder]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfilePaymentAction(Request $request) {
// Get the User

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $paymentTerms = array();
            $paymentMethods = array();

            $oldPaymentTerms = $user->getPaymentTerms();
            $oldPaymentMethods = $user->getPaymentMethods();

// Get POST parameters
            if (isset($request->newPaymentTerms)) {

                if (is_array($request->newPaymentTerms)) {
                    $terms = $request->newPaymentTerms;
                    foreach ($terms as $key => $value) {
                        if ($value)
                            $paymentTerms[$key] = $value;
                    }
                }
                else {
                    $terms = get_object_vars($request->newPaymentTerms);
                    foreach ($terms as $key => $value) {
                        if ($value)
                            $paymentTerms[$key] = $value;
                    }
                }
                $paymentTerms = (array) $paymentTerms;
                $user->setPaymentTerms($paymentTerms);
            } else
                $user->setPaymentTerms($paymentTerms);
            if (isset($request->newPaymentMethods)) {

                if (is_array($request->newPaymentMethods)) {
                    $methods = $request->newPaymentMethods;
                    foreach ($methods as $key => $value) {
                        if ($value)
                            $paymentMethods[$key] = $value;
                    }
                }
                else {
                    $methods = get_object_vars($request->newPaymentMethods);
                    foreach ($methods as $key => $value) {
                        if ($value)
                            $paymentMethods[$key] = $value;
                    }
                }
                $paymentMethods = (array) $paymentMethods;
                $user->setPaymentMethods($paymentMethods);
            } else
                $user->setPaymentMethods($paymentMethods);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('payment')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('payment')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
//return new JsonResponse($user);
//$user->profilePercentage=$this->updateProfilePercentage($user);
        return new JsonResponse(array('paymentTerms' => $paymentTerms, 'paymentMethods' => $paymentMethods, "user" => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileTrackingServicesAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        $trackingServices = array();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
//if(is_array($request->trackingServices)) $services = $request->trackingServices;
//else $services = get_object_vars($request->trackingServices);
            $services = get_object_vars($request->trackingServices);

//$vars = array('name', 'extra', 'description');
//$vars = array('name');
// Check valid fields
            /* foreach($trackingServices as $key => $traffic){
              foreach($vars as $var){
              if(!isset($traffic->$var)) {
              unset($trackingServices[$key]); // Delete empty or invalid form
              break;
              }
              }
              } */

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $q = $dm->createQueryBuilder('DataBaseBundle:User')
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($user->getId());

            $other = false;

            foreach ($services as $key => $value) {


                if ($key == 'other' && $value == true)
                    $other = true;
                if ($key == 'othertrackingSolutions') {
                    if ($other) {
                        $q->field("trackingServices.$key")->set($value);
                        $trackingServices[strval($key)] = $value;
                    } else {
                        $q->field("trackingServices.$key")->set(array());
                        $trackingServices[strval($key)] = array();
                    }
                } else {
                    $q->field("trackingServices.$key")->set($value);
                    $trackingServices[strval($key)] = $value;
                }
                /*  }else{
                  $q->field("trackingServices.$key")->unsetField();
                  $q->field("trackingServices")->unsetField();
                  //->field("inTouch.$userId")->unsetField()->exists(true)
                  } */
            }

            $q->field("updateDate")->set(time());

// Options
            $q->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
//$dm->clear(); // Detaches all objects from Doctrine!
//return new JsonResponse($services);
//$user->setTrackingServices(array($trackingServices));
// Set up database
//$dm = $this->get('doctrine_mongodb.odm.document_manager');
//$dm->persist($user);
//$dm->flush();

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('tracking')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('business')
                        ->field("action")->set('tracking')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(["trackingServices" => $trackingServices, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileReferencesAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $services = $request->services;

            $vars = array('name', 'extra', 'description');

// Check valid fields
            foreach ($services as $key => $traffic) {
                foreach ($vars as $var) {
                    if (!isset($traffic->$var)) {
                        unset($services[$key]); // Delete empty or invalid form
                        break;
                    }
                }
            }

            $user->setServices($services);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileCompetencesAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $competences = $request->competences;
            $languages = $request->languages;

            foreach ($competences as $key => $competence) {
                $competences[$key] = strval(str_replace("#", "", $competence->text));
            }
            $competences = array_unique($competences);

            foreach ($languages as $key => $language) {
                $languages[$key] = strval(str_replace("#", "", $language->text));
            }
            $languages = array_unique($languages);

// Set up database
            $user->setCompetences($competences);
            $user->setLanguages($languages);
            $user->setUpdateDate(time());

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('competences')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('professional')
                        ->field("action")->set('competences')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(array("competences" => $competences, "languages" => $languages, "user" => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileEditCompetencesAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $summary = $data->summary;
        $competences = $data->competences;
        $languages = $data->languages;

        foreach ($competences as $key => $competence) {
            $competences[$key] = strval(str_replace("#", "", isset($competence->text) ? $competence->text : $competence));
        }
        $competences = array_unique($competences);

        foreach ($languages as $key => $language) {
            $languages[$key] = strval(str_replace("#", "", isset($language->text) ? $language->text : $language ));
        }
        $languages = array_unique($languages);

        $user->setSummary($summary);
        $user->setCompetences($competences);
        $user->setLanguages($languages);
        $user->setUpdateDate(time());

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('competences')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('competences')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];
        return new JsonResponse(array("competences" => $competences, "languages" => $languages, "summary" => $summary, "user" => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddExperienceAction(Request $request) {

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }


        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);


        if (!$data->company || empty($data->company) || !$data->type) {
            throw new AccessDeniedHttpException();
        }

        if (isset($data->companyId)) {
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('id' => $data->companyId));
        } else if (isset($data->company)) {
            $companyName = trim($data->company);
            $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->field('name')->equals(new \MongoRegex("/{$companyName}$/i"))
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();
        }

        $arrExperience = array(
            'company' => $data->company,
            'type' => $data->type,
            'roles' => array(),
            'date' => time()
        );

        if ($company) {
            $arrExperience['companyid'] = $company->getId();
            $arrExperience['companyUsername'] = $company->getUsername();
            $arrExperience['logo'] = $company->getAvatar();
        }



        $user->experiences[] = $arrExperience;

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('experiences')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('experiences')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();
        }


        $user->setUpdateDate(time());

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        return new JsonResponse(["experiences" => $user->experiences, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileEditExperienceAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $experiences = $user->getExperiences();
        $experience = $data->experience;
        $experienceIndex = $data->experienceIndex;


        foreach ($experience->roles as $key => $role) {
            if (!isset($role->jobtitle) || empty($role->jobtitle)) {
                unset($experience->roles[$key]);
            } else {
                if (!isset($role->tomonth) && !isset($role->toyear)) {
                    $role->currently = true;
                }
            }
        }


        $experiences[$experienceIndex]['type'] = $experience->type;
        $experiences[$experienceIndex]['roles'] = $experience->roles;

        $user->setExperiences($experiences);
        $user->setUpdateDate(time());

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();


        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('experiences')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('experiences')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }


        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        return new JsonResponse(["experiences" => $experiences, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddExperienceCompanyAvatarAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }
        $postdata = $request->getContent();
        $request = json_decode($postdata);
        $avatarFilename = '';
        $u = new Utility();
        if (isset($request->avatar)) {
            $dataURI = $request->avatar;
            $experienceIndex = $request->experienceIndex;
            $experiences = $user->getExperiences();
            $experience = $experiences[$experienceIndex];

            $isImage = strpos($dataURI, "image");
            if (!$isImage)
                throw new BadRequestHttpException(); // 400

            $env = $this->get('kernel')->getEnvironment();
            if ($env == 'dev')
                $copypath = "/../../mobntouch/src/cdn/img/profile/logo/";
            else
                $copypath = "/../../web/src/cdn/img/profile/logo/";
            $realpath = "/img/profile/logo/";

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $manageAvatarAndCover = new ManageAvatarAndCover($dm);
            $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
            $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
            $imageName = strtolower($u->cleanString($user->getUsername() . "-" . $experience['company']));
            $avatar = $manageAvatarAndCover->uploadAvatarOrCover($dataURI, $imageName, 'avatar', 'profile', true);
            $experiences[$experienceIndex]['logo'] = $avatar;
            $user->setExperiences($experiences);
            $user->setUpdateDate(time());
            $dm->flush();
            $dm->clear();
        }
        return new JsonResponse($avatar);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileAddEducationAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);
        $u = new Utility();

        $educations = $user->getEducations() ? $user->getEducations() : array();
        $graduation = $data->graduation;
        $college = $data->college;
        $collegeid = $data->collegeId;

        if (isset($data->collegeId)) {
            $college = $dm->getRepository('DataBaseBundle:College')->findOneBy(array('id' => $data->collegeId));
        } else if (isset($data->college)) {
            $collegeName = trim($data->college);
            $college = $dm->createQueryBuilder('DataBaseBundle:College')
                    ->field('name')->equals(new \MongoRegex("/{$collegeName}$/i"))
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();
        }

        if ($college) {

            if (is_array($educations) && count($educations) > 0 && in_array($college->getUsername(), $this->array_column($educations, 'collegeUsername'))) {
                throw new AccessDeniedHttpException();
            }

            if (!in_array($user->getUsername(), $this->array_column($college->getStudents(), 'username'))) {
                $dm->createQueryBuilder('DataBaseBundle:College')
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($college->getId())
                        ->field('students')->push(array('$each' => array(array(
                                    'id' => $user->getId(),
                                    'username' => $user->getUsername(),
                                    'name' => $user->getName(),
                                    'graduation' => $graduation,
                                    'lastname' => $user->getLastname(),
                                    'jobTitle' => $user->getJobTitle(),
                                    'company' => $user->getCompany(),
                                    'avatar' => $user->getAvatar(),
                                    'date' => time()
                                )), '$slice' => -90))
                        ->field('updateDate')->set(time())
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear();
            }
            $collegeUsername = $college->getUsername();
        } else {
            $collegeUsername = $u->cleanUsername($u->removeAccents($data->college));

            $dm->createQueryBuilder('DataBaseBundle:College')
                    ->insert()
                    ->field('username')->set($collegeUsername)
                    ->field('name')->set($data->college)
                    ->field('avatar')->set(null)
                    ->field('degrees')->set(array())
                    ->field('students')->set(array(array(
                            'id' => $user->getId(),
                            'username' => $user->getUsername(),
                            'name' => $user->getName(),
                            'graduation' => $graduation,
                            'lastname' => $user->getLastname(),
                            'jobTitle' => $user->getJobTitle(),
                            'company' => $user->getCompany(),
                            'avatar' => $user->getAvatar(),
                            'date' => time()
                )))
                    ->field('search')->set(explode(" ", $data->college))
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();
            $dm->flush();
            $dm->clear();
        }

        $college = $dm->getRepository('DataBaseBundle:College')->findOneBy(array('username' => $collegeUsername));

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('educations')->push(array('$each' => array(array(
                            'collegeid' => $college->getId(),
                            'collegeUsername' => $college->getUsername(),
                            'college' => $college->getName(),
                            'graduation' => $graduation,
                            'avatar' => $college->getAvatar(),
                            'date' => time()
                        )), '$slice' => -90))
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();


        $dm->flush();
        $dm->clear();

        array_push($educations, array(
            'collegeid' => $college->getId(),
            'collegeUsername' => $college->getUsername(),
            'college' => $college->getName(),
            'graduation' => $graduation,
            'avatar' => $college->getAvatar(),
            'currently' => false,
            'date' => time()
        ));

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('educations')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('educations')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        $user->setEducations($educations);
        $user->setUpdateDate(time());
        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        return new JsonResponse(array('educations' => $educations, 'user' => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileEditEducationAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);
        $u = new Utility();

        $educations = $user->getEducations() ? $user->getEducations() : array();
        $education = $educations[$data->educationIndex];
        $graduation = $data->graduation;
        $collegeid = $data->collegeid;


        if (isset($data->collegeid)) {
            $college = $dm->getRepository('DataBaseBundle:College')->findOneBy(array('id' => $data->collegeid));
        } else if (isset($data->college)) {
            $collegeName = trim($data->college);
            $college = $dm->createQueryBuilder('DataBaseBundle:College')
                    ->field('name')->equals(new \MongoRegex("/{$collegeName}$/i"))
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();
        }

        if ($college && $education['collegeid'] == $college->getId()) {

            $education['graduation'] = $data->graduation;
            $education['degree'] = $data->degree;
        } else if ($college && $education['collegeid'] != $college->getId()) {

            $dm->createQueryBuilder('DataBaseBundle:College')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($education['collegeid'])
                    ->field("students")->pull(array('id' => $user->getId()))
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->createQueryBuilder('DataBaseBundle:College')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($college->getId())
                    ->field('students')->push(array('$each' => array(array(
                                'id' => $user->getId(),
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'graduation' => $graduation,
                                'lastname' => $user->getLastname(),
                                'jobTitle' => $user->getJobTitle(),
                                'company' => $user->getCompany(),
                                'avatar' => $user->getAvatar(),
                                'date' => time()
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $education['graduation'] = $data->graduation;
            $education['degree'] = $data->degree;
            $education['date'] = time();

            $education['college'] = $college->getName();
            $education['collegeid'] = $college->getId();
            $education['collegeUsername'] = $college->getUsername();
            $education['avatar'] = $college->getAvatar();
        } else if (!$college) {

            $dm->createQueryBuilder('DataBaseBundle:College')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($education['collegeid'])
                    ->field("students")->pull(array('id' => $user->getId()))
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $collegeUsername = $u->cleanUsername($u->removeAccents($data->college));
            $dm->createQueryBuilder('DataBaseBundle:College')
                    ->insert()
                    ->field('username')->set($collegeUsername)
                    ->field('name')->set($data->college)
                    ->field('avatar')->set(null)
                    ->field('degrees')->set(array())
                    ->field('students')->set(array(array(
                            'id' => $user->getId(),
                            'username' => $user->getUsername(),
                            'name' => $user->getName(),
                            'graduation' => $graduation,
                            'lastname' => $user->getLastname(),
                            'jobTitle' => $user->getJobTitle(),
                            'company' => $user->getCompany(),
                            'avatar' => $user->getAvatar(),
                            'date' => time()
                )))
                    ->field('search')->set(explode(" ", $data->college))
                    ->field('updateDate')->set(time())
                    ->getQuery()
                    ->execute();

            $college = $dm->getRepository('DataBaseBundle:College')->findOneBy(array('username' => $collegeUsername));

            $education['graduation'] = $data->graduation;
            $education['degree'] = $data->degree;
            $education['date'] = time();

            $education['college'] = $college->getName();
            $education['collegeid'] = $college->getId();
            $education['collegeUsername'] = $college->getUsername();
            $education['avatar'] = $college->getAvatar();
        }
        $user->setUpdateDate(time());
        $educations[$data->educationIndex] = $education;
        $user->setEducations($educations);
        $degrees = $college->getDegrees();
        if ($data->degree != '') {
            if (!in_array($data->degree, $degrees)) {
                array_push($degrees, $data->degree);
                $college->setDegrees($degrees);
            }
        }

        $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
        $user->setSearch($searches->updateUserSearch($user));

        $dm->flush();
        $dm->clear();

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('educations')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('educations')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        return new JsonResponse(array('educations' => $educations, 'user' => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Avatar...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileRemoveEducationAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $educations = $user->getEducations() ? $user->getEducations() : array();
        $education = $educations[$data->educationIndex];

        array_splice($educations, $data->educationIndex, 1);

        $dm->createQueryBuilder('DataBaseBundle:College')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($education['collegeid'])
                ->field("students")->pull(array('id' => $user->getId()))
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $user->setEducations($educations);

        $dm->flush();
        $dm->clear();

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('action')->equals('educations')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(1))
                    ->field("filter")->set('professional')
                    ->field("action")->set('educations')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        $user->setEducations($educations);
        $user->setUpdateDate(time());

        return new JsonResponse(array('educations' => $educations, 'user' => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileExperiencesAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $experiences = $request->experiences;

            $vars = array('company', 'jobtitle');

// Check valid fields
            foreach ($experiences as $key => $experience) {
                foreach ($vars as $var) {
                    if (!isset($experience->$var)) {
                        unset($experiences[$key]); // Delete empty or invalid forms
                        break;
                    }
                }
                if (isset($experiences[$key])) {
//'fromperiod' => isset($p->startDate)?$p->startDate->year."-".str_pad($p->startDate->month, 2, '0', STR_PAD_LEFT)."-01T12:00:00.000Z":null, //2015-04-02T22:00:00.000Z

                    if (isset($experience->fromperiod) and gettype($experience->fromperiod) == 'string')
                        $experiences[$key]->fromperiod = date(DATE_ATOM, strtotime($experience->fromperiod));
                    if (isset($experience->toperiod) and gettype($experience->toperiod) == 'string')
                        $experiences[$key]->toperiod = date(DATE_ATOM, strtotime($experience->toperiod));
//if(isset($experience->fromperiod) and gettype($experience->fromperiod)=='string') $experiences[$key]->fromperiod = intval(strtotime($experience->fromperiod))*1000;
//if(isset($experience->toperiod) and gettype($experience->toperiod)=='string') $experiences[$key]->toperiod = intval(strtotime($experience->toperiod))*1000;

                    if (isset($experience->companyWebsite))
                        if (!preg_match("~^(?:f|ht)tps?://~i", $experience->companyWebsite))
                            $experiences[$key]->companyWebsite = "http://" . $experience->companyWebsite;
                }
// Get POST parameters
                if (isset($experience->logo) and ( strpos($experience->logo, 'data:') !== false)) {

                    $dataURI = $experience->logo;
                    $dataURI = 'data://' . substr($dataURI, 5);
//$path = "/uploads/profile/logo/";

                    $env = $this->get('kernel')->getEnvironment();
                    if ($env == 'dev')
                        $copypath = "/../../angular/src/cdn/img/profile/logo/";
                    else
                        $copypath = "/../../web/src/cdn/img/profile/logo/";
                    $realpath = "/img/profile/logo/";

                    $root = getcwd();
                    $tempName = str_replace(' ', '-', $experience->company);
                    $tempName = str_replace(',', '-', $tempName);
                    $tempName = str_replace('&', '-', $tempName);
                    $tempName = str_replace('|', '-', $tempName);
                    $tempName = str_replace('.', '-', $tempName);
                    $tempName = str_replace('/', '-', $tempName);
                    $tempName = str_replace('---', '-', $tempName);
                    $tempName = str_replace('--', '-', $tempName);
                    $filename = $user->getUsername() . "-" . $tempName;
                    $originalFilename = $filename . '-original.png';
                    $logoFilename = $filename . '.png';
                    $fp = fopen($root . $copypath . $originalFilename, "w");
                    fwrite($fp, file_get_contents($dataURI));
                    fclose($fp);

//exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 50x50 -quality 85 '.getcwd().$copypath.$logoFilename);
                    exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $logoFilename);

                    $experiences[$key]->logo = $realpath . $logoFilename . '?' . time();
                }
            }

            $user->setExperiences($experiences);
            $user->setUpdateDate(time());

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('experiences')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('professional')
                        ->field("action")->set('experiences')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }
        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        return new JsonResponse(["experiences" => $experiences, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileRemoveExperienceAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $data = json_decode($postdata);

        $experienceIndex = $data->experienceIndex;

        $experiences = $user->getExperiences();

        foreach ($experiences as $key => $value) {
            if ($key == $experienceIndex) {
                array_splice($experiences, $experienceIndex, 1);
            }
        }

        //array_slice($experiences, $experienceIndex, 1);
        $user->setExperiences($experiences);

        $updatedData = $this->updateProfilePercentage($user);
        $user->profilePercentage = $updatedData["percentage"];
        $user->profilePoints = $updatedData["points"];

        return new JsonResponse(["experiences" => $experiences, "user" => $user]);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editProfileEventsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $email = strtolower(trim($request->email));

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $user->setEmail($email);

            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        $this->updateProfilePercentage($user);
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function autocompleteAction(Request $request) {

      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $headerString = strtolower(trim($request->query->headerString));
      $profileType = strtolower(trim($request->query->profileType));

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      if ($profileType == 'companies') {

      $search = $dm->createQueryBuilder('DataBaseBundle:CompanySearch');
      } else {

      $search = $dm->createQueryBuilder('DataBaseBundle:UserSearch')
      ->field('validated')->equals(true);
      }
      // Query String
      $string = array();
      if (isset($headerString) and $headerString != null) {

      $queryString = str_replace(',', ' ', $headerString);
      $temp = explode(" ", $queryString);

      foreach ($temp as $var)
      if ($var)
      $string[] = new \MongoRegex("/{$var}/ix");

      $search->field('search')->all($string);
      }

      $search = $search->limit(5)->getQuery()->execute();

      $results = array();
      foreach ($search as $dbuser) {
      $results[] = $dbuser;
      }


      return new JsonResponse($results);
      } */

    /**
     * @ApiDoc(
     *  tags={
     *         "user", "company"
     *     },
     *  description="Autocomplete for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function autocompleteAction(Request $request) {
        ob_flush();
        ob_clean();
        $postdata = $request->getContent();
        $request = json_decode($postdata);

        $headerString = strtolower(trim($request->query->headerString));
        $profileType = strtolower(trim($request->query->profileType));

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        if ($profileType == 'companies') {
            $search = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->hydrate(false)
                    ->select('id', 'username', 'avatar', 'name', 'companyType');
        } else if ($profileType == 'colleges') {
            $search = $dm->createQueryBuilder('DataBaseBundle:College')
                    ->hydrate(false)
                    ->select('id', 'username', 'avatar', 'name');
        } else if ($profileType == 'role') {
            $search = $dm->createQueryBuilder('DataBaseBundle:UserRoles')
                    ->hydrate(false)
                    ->select('id', 'name');
        } else {
            $search = $dm->createQueryBuilder('DataBaseBundle:UserSearch')
                            ->field('validated')->equals(true);
        }
        $string = array();
        if (isset($headerString) and $headerString != null) {

            $queryString = str_replace(',', ' ', $headerString);
            $temp = explode(" ", $queryString);
            foreach ($temp as $var)
                if ($var)
                    $string[] = new \MongoRegex("/{$var}/ix");
            if ($profileType == 'role') {
                $search->field('name')->all($string);
            } else {

                $search->field('search')->all($string);
            }
        }

        $search = $search->limit(5)->getQuery()->execute()->toArray();
        return new JsonResponse(array_values($search));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user", "company"
     *     },
     *  description="Autocomplete for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function publicSearchAction(Request $request) {
        ob_flush();
        ob_clean();
        $util = new Utility();
        $data = (object) $request->request->all();

        if (!isset($data->query) || strlen($data->query) <= 0) {
            return new JsonResponse([]);
        }

        $arrSearchResult = array();
        $string = array();
        $temp = explode(" ", $data->query);
        foreach ($temp as $var) {
            if ($var) {
                $var = $util->accentToRegex($var);
                $string[] = new \MongoRegex("/.*{$var}.*/i");
            }
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $cSearch = $dm->createQueryBuilder('DataBaseBundle:Company')
                ->hydrate(false)
                ->select('id', 'username', 'name', 'avatar', 'cover', 'companyType', 'city', 'country', 'basedCountry')
                ->field('name')->in($string)
                ->sort('companyPoints', -1)
                ->limit(4)
                ->getQuery()
                ->execute()
                ->toArray();

       /* $rSearch = $dm->createQueryBuilder('DataBaseBundle:UserRoles')
                ->hydrate(false)
                ->select('id', 'name')
                ->field('name')->in($string)
                ->limit(4)
                ->getQuery()
                ->execute()
                ->toArray();*/

        $uSearch = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('id', 'username', 'name', 'lastname', 'avatar', 'cover', 'jobTitle', 'company')
                        ->field('validated')->equals(true);
        $uSearch->addOr($uSearch->expr()->field('name')->in($string));
        $uSearch->addOr($uSearch->expr()->field('lastname')->in($string));
        $uSearch->addOr($uSearch->expr()->field('company')->in($string));
        $uSearch->addOr($uSearch->expr()->field('search')->in($string));
        $uSearch = $uSearch->sort('profilePoints', -1)
                ->limit(4)
                ->getQuery()
                ->execute()
                ->toArray();


        foreach ($cSearch as $comSearch) {
            $comSearch['id'] = $comSearch['_id']->{'$id'};
            unset($comSearch['_id']);
            $comSearch['type'] = 'company';
            $arrSearchResult[] = $comSearch;
        }

      /*  foreach ($rSearch as $roleSearch) {
            $roleSearch['id'] = $roleSearch['_id']->{'$id'};
            unset($roleSearch['_id']);
            $roleSearch['type'] = 'role';
            $arrSearchResult[] = $roleSearch;
        }*/

        foreach ($uSearch as $usrSearch) {
            $usrSearch['id'] = $usrSearch['_id']->{'$id'};
            unset($usrSearch['_id']);
            $usrSearch['type'] = 'people';
            $arrSearchResult[] = $usrSearch;
        }

        return new JsonResponse($arrSearchResult);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user", "company"
     *     },
     *  description="Autocomplete for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function publicCompanyProfileSearchAction(Request $request, $type, $query, $offset, $limit) {
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $count = 0;
        $list = array();
        $util = new Utility();
        $user = null;
        $raw_token = $request->headers->get('authorization');
        if (isset($raw_token)) {
            $token = substr($raw_token, strpos($raw_token, '.') + 1);
            $uData = json_decode(base64_decode(substr($token, 0, strpos($token, '.'))));
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $uData->username));
        }

        $string = array();
        $temp = explode(" ", $query);
        foreach ($temp as $var) {
            if ($var) {
                $var = $util->accentToRegex($var);
                $string[] = new \MongoRegex("/.*{$var}.*/i");
            }
        }

        if ($type == 'company' || $type == 'all') {
            $companies = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->hydrate(false)
                    ->field('name')->in($string)
                    ->select('id', 'username', 'name', 'avatar', 'cover', 'city', 'basedCountry', 'description', 'followers')
                    ->sort('companyPoints', -1)
                    ->limit($limit)
                    ->skip($offset * $limit);
            $count += $companies->getQuery()->execute()->count();
            $companies = $companies->getQuery()
                    ->execute()
                    ->toArray();

            foreach ($companies as $id => $company) {
                $company['id'] = $id;
                unset($company["_id"]);
                $company['noOfFollowers'] = 0;
                $company['isFollowing'] = false;
                if (array_key_exists('followers', $company)) {
                    $followers = $this->array_column($company['followers'], 'id');
                    if (isset($company['description'])) {
                        $company['description'] = substr($company['description'], 0, 160);
                    }
                    $company['noOfFollowers'] = count($followers);
                    $company['isFollowing'] = $user ? in_array($user->getId(), $followers) : false;
                }
                unset($company['followers']);
                $company['type'] = 'company';
                $company['query'] = $query;
                $list[] = $company;
            }
        }
        if ($type == 'profile' || $type == 'all') {

            $userConnected = array();
            $userConnectedIds = array();
            //Already sent connection request // status : 1
            $userRequestedIds = array();
            //Received connection request // status : 2
            $userRequestIds = array();

            if ($user) {
                $userConnections = $user->getInTouch() ? $user->getInTouch() : array();
                foreach ($userConnections as $uConnection) {
                    if ($uConnection['status'] == 1) {
                        $userRequestedIds[] = $uConnection['id'];
                    } else if ($uConnection['status'] == 2) {
                        $userRequestIds[] = $uConnection['id'];
                    } else if ($uConnection['status'] == 3) {
                        $userConnectedIds[] = $uConnection['id'];
                    }
                }
            }

            $profiles = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select(array('id', 'username', 'name', 'lastname', 'avatar', 'cover', 'jobTitle', 'company', 'companyPage', 'city', 'miniResume', 'summary', 'keywords'));

            $profiles->addOr($profiles->expr()->field('name')->in($string));
            $profiles->addOr($profiles->expr()->field('lastname')->in($string));
            $profiles->addOr($profiles->expr()->field('company')->in($string));
            $count += $profiles->getQuery()->execute()->count();
            $profiles = $profiles->sort('profilePoints', -1)
                    ->limit($limit)
                    ->skip($offset * $limit)
                    ->getQuery()
                    ->execute();

            $mMC = new ManageMutualConnections($dm);
            foreach ($profiles as $id => $dbuser) {
                $dbuser['id'] = $id;
                unset($dbuser['_id']);
                $dbuser['isConnected'] = $user ? in_array($dbuser['id'], $userConnectedIds) : false;
                $dbuser['isRequested'] = $user ? in_array($dbuser['id'], $userRequestedIds) : false;
                $dbuser['isRequest'] = $user ? in_array($dbuser['id'], $userRequestIds) : false;
                $arrMutualConnection = $user ? $mMC->getMutualConnections($user, $dbuser, false) : array();
                $dbuser['mutualConnections'] = $arrMutualConnection;
                $dbuser['type'] = 'profile';
                $dbuser['query'] = $query;
                $list[] = $dbuser;
            }
        }

        return new JsonResponse(array('count' => $count, 'list' => $list));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user", "company"
     *     },
     *  description="Autocomplete for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function autocompleteAboutAction(Request $request, $type = 'skill') {
        ob_flush();
        ob_clean();
        $postdata = $request->getContent();
        $request = json_decode($postdata);

        $headerString = strtolower(trim($request->query->headerString));
        $type = strtolower(trim($request->query->type));

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $arrSearch = array();
        if ($type == 'skills') {
            $search = $dm->createQueryBuilder('DataBaseBundle:User')
                            ->hydrate(false)
                            ->select('competences')
                            ->field('competences')->equals(new \MongoRegex("/^{$headerString}/i"));
            $search = $search->limit(5)->getQuery()->execute()->toArray();

            foreach ($search as $key => $competence) {
                $arrSearch = array_unique(array_merge($arrSearch, preg_grep('/^' . $headerString . '.*/i', $competence['competences'])));
            }
        }
        return new JsonResponse(array_values($arrSearch));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user", "company"
     *     },
     *  description="Autocomplete for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function autocompleteLocationAction(Request $request, $text) {

        $content = file_get_contents('https://maps.googleapis.com/maps/api/place/autocomplete/json?sensor=false&types=(regions)&key=AIzaSyCMlbQR4KLG3U0EkeBy8wuIMoQp4Hdzv-M&input=' . $text);

        $content = str_replace('predictions', 'results', $content);

        $results = json_decode($content, TRUE);

        return new JsonResponse((Array) $results['results']);
    }

##### PING #####

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Ping",
     * )
     */
    /*
      public function pingAction(Request $request) {
      return new JsonResponse();
      }
     */
    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Logout the user",
     *  parameters={
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *      {"name"="password", "dataType"="string", "required"=true, "description"="password"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /* public function logoutAction(Request $request)
      {
      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $password = $request->password;
      $email = strtolower(trim($request->email));

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      // Get the User
      $user = $dm->getRepository('DataBaseBundle:User')->findOneBy( array('email'=> $email));

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }


      return new JsonResponse();
      } */

    /**
     * @ApiDoc(
     *  tags={
     *         "user","company"
     *     },
     *  description="Search API for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function searchAction(Request $request) {
// Get the User
        $users = $userIds = array();
        $user = $this->getCurrentUser();
        $query = null;
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $query = $request->query;
//return new JsonResponse($query->offersCountry);
            if (isset($query->offersCountry) and count($query->offersCountry) > 0 and ! in_array('GLOBAL', $query->offersCountry)) {
                $query->offersCountry = array_merge($query->offersCountry, array('GLOBAL'));
            }
            if (!isset($query->profileType))
                return new JsonResponse();

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            if ($query->profileType == 'people') {
// People

                $q = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('validated')->equals(true)
                        ->sort('profilePoints', -1);
                /*
                  EXAMPLE FOR THE ADVANCED SEARCH ????
                  $q->addAnd(
                  $q->addOr($q->expr()->field('nm')->equals($r))
                  ->addOr($q->expr()->field('dsc')->equals($r))
                  );
                 */

// Query String
                /* $string = array();
                  if(isset($query->string) and $query->string!=null) {

                  $queryString= str_replace(',', ' ', $query->string);
                  $temp = explode(" ", $queryString);

                  foreach($temp as $var) if($var) $string[] = new \MongoRegex("/{$var}/ix");

                  //$q->addOr($q->expr()->field('search')->all($string));
                  $q->field('search')->all($string);

                  } */

// Sell/Buy Trafic - Offers
                $types = array();
                if (isset($query->type)) {
                    foreach ($query->type as $key => $type) {
                        if ($type)
                            $types[$key] = $type;
                    }
                }
                if (count($types) == 2)
                    $types = array();

                $pricings = array();
                if (isset($query->pricingModel)) {
                    foreach ($query->pricingModel as $key => $rating) {
                        if ($rating)
                            $pricings[$key] = $rating;
                    }
                }
                if (count($pricings) == 12)
                    $pricings = array();

                $os = array();
                if (isset($query->os)) {
                    foreach ($query->os as $key => $o) {
                        if ($o)
                            $os[$key] = $o;
                    }
                }
                if (count($os) == 8)
                    $os = array();

                $gender = null;
                if (isset($query->gender)) {
//if($query->gender=='both') $gender = null;
//else $gender = $query->gender;
                    $gender = $query->gender;
                }

                switch ($query->companyType) {
                    case "Advertiser":

// Categories
                        if (isset($query->categories) and count($query->categories) > 0)
                            $q->field('categories')->in($query->categories);

// PRICING + PLATFORM
                        if (count($os) > 0 and count($pricings) > 0) {
                            foreach ($pricings as $pricing => $true0) {
                                foreach ($os as $platform => $true1) {

                                    if (isset($query->offersCountry) and count($query->offersCountry) > 0) {
// IF Countries

                                        if (count($types) > 0) {
// IF Traffic Types
                                            foreach ($types as $type => $true2) {

// Tracking Services
                                                if (isset($query->tracking) and count($query->tracking) > 0) {
                                                    foreach ($query->tracking as $tracking) {
                                                        if ($gender) {
                                                            $q->addOr(
                                                                    $q->expr()
                                                                            ->field("trackingServices.$tracking")->equals(true)
                                                                            ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'gender' => $gender, 'countries' => array('$in' => $query->offersCountry))));
                                                        } else {
                                                            $q->addOr(
                                                                    $q->expr()
                                                                            ->field("trackingServices.$tracking")->equals(true)
                                                                            ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                                        }
                                                    }
                                                } else {
                                                    if ($gender)
                                                        $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                    else
                                                        $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                                }
                                            }
                                        }
                                        else {
// NO Traffic Types
// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'countries' => array('$in' => $query->offersCountry))));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'countries' => array('$in' => $query->offersCountry))));
                                            }
                                        }
                                    }else {
// NO Countries

                                        if (count($types) > 0) {
// IF Traffic Types
                                            foreach ($types as $type => $true2) {
// Tracking Services
                                                if (isset($query->tracking) and count($query->tracking) > 0) {
                                                    foreach ($query->tracking as $tracking) {
                                                        if ($gender) {
                                                            $q->addOr(
                                                                    $q->expr()
                                                                            ->field("trackingServices.$tracking")->equals(true)
                                                                            ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender)));
                                                        } else {
                                                            $q->addOr(
                                                                    $q->expr()
                                                                            ->field("trackingServices.$tracking")->equals(true)
                                                                            ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2)));
                                                        }
                                                    }
                                                } else {
                                                    if ($gender)
                                                        $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender)));
                                                    else
                                                        $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2)));
                                                }
                                            }
                                        }
                                        else {
// NO Traffic Types
// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'gender' => $query->gender)));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1)));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, 'gender' => $query->gender)));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1)));
                                            }
                                        }
                                    }
                                }
                            }
                        }

// ONLY PLATFORM
                        if (count($os) > 0 and count($pricings) <= 0) {
                            foreach ($os as $platform => $true1) {

                                if (isset($query->offersCountry) and count($query->offersCountry) > 0) {
// IF Countries

                                    if (count($types) > 0) {
// IF Traffic Types
                                        foreach ($types as $type => $true2) {

// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                            }
                                        }
                                    }
                                    else {
// NO Traffic Types
// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {
                                                if ($gender) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'countries' => array('$in' => $query->offersCountry))));
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'countries' => array('$in' => $query->offersCountry))));
                                        }
                                    }
                                }else {
// NO Countries

                                    if (count($types) > 0) {
// IF Traffic Types
                                        foreach ($types as $type => $true2) {
// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender)));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2)));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2, 'gender' => $query->gender)));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, $type => $true2)));
                                            }
                                        }
                                    }
                                    else {
// NO Traffic Types
// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {
                                                if ($gender) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'gender' => $query->gender)));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1)));
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1, 'gender' => $query->gender)));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('platform.0.' . $platform => $true1)));
                                        }
                                    }
                                }
                            }
                        }

// ONLY PRICING
                        if (count($os) <= 0 and count($pricings) > 0) {
                            foreach ($pricings as $pricing => $true0) {

                                if (isset($query->offersCountry) and count($query->offersCountry) > 0) {
// IF Countries

                                    if (count($types) > 0) {
// IF Traffic Types
                                        foreach ($types as $type => $true2) {

// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                            }
                                        }
                                    }
                                    else {
// NO Traffic Types
// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {
                                                if ($gender) {
                                                    $q->addOr(
                                                            $q->expr()->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'countries' => array('$in' => $query->offersCountry))));
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'countries' => array('$in' => $query->offersCountry))));
                                        }
                                    }
                                }else {
// NO Countries

                                    if (count($types) > 0) {
// IF Traffic Types
                                        foreach ($types as $type => $true2) {
// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {
                                                    if ($gender) {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'gender' => $query->gender)));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2)));
                                                    }
                                                }
                                            } else {
                                                if ($gender)
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2, 'gender' => $query->gender)));
                                                else
                                                    $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, $type => $true2)));
                                            }
                                        }
                                    }
                                    else {
// NO Traffic Types
// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {
                                                if ($gender) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'gender' => $query->gender)));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0)));
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0, 'gender' => $query->gender)));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('pricing.0.' . $pricing => $true0)));
                                        }
                                    }
                                }
                            }
                        }

// NO PRICING + NO PLATFORM
                        if (count($os) <= 0 and count($pricings) <= 0) {


                            if (isset($query->offersCountry) and count($query->offersCountry) > 0) {
// IF Countries

                                if (count($types) > 0) {
// IF Traffic Types
                                    foreach ($types as $type => $true2) {

// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {
                                                if ($gender) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array($type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array($type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($type => $true2, 'gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($type => $true2, 'countries' => array('$in' => $query->offersCountry))));
                                        }
                                    }
                                }
                                else {
// NO Traffic Types
// Tracking Services
                                    if (isset($query->tracking) and count($query->tracking) > 0) {
                                        foreach ($query->tracking as $tracking) {
                                            if ($gender) {
                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('buyTraffic')->elemMatch(array('gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                            } else {
                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('buyTraffic')->elemMatch(array('countries' => array('$in' => $query->offersCountry))));
                                            }
                                        }
                                    } else {
                                        if ($gender)
                                            $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('gender' => $query->gender, 'countries' => array('$in' => $query->offersCountry))));
                                        else
                                            $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array('countries' => array('$in' => $query->offersCountry))));
                                    }
                                }
                            }else {
// NO Countries

                                if (count($types) > 0) {
// IF Traffic Types
                                    foreach ($types as $type => $true2) {
// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {

                                                if ($gender) {

                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array($type => $true2, 'gender' => $query->gender))
                                                    );
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('buyTraffic')->elemMatch(array($type => $true2))
                                                    );
                                                }
                                            }
                                        } else {
                                            if ($gender)
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($type => $true2, 'gender' => $query->gender)));
                                            else
                                                $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($type => $true2)));
                                        }
                                    }
                                }
                                else {

// NO Traffic Types
// Tracking Services
                                    if (isset($query->tracking) and count($query->tracking) > 0) {
                                        foreach ($query->tracking as $tracking) {

                                            if ($gender) {
                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('buyTraffic')->elemMatch(array('gender' => $query->gender))
                                                );
                                            } else {
                                                $q->addOr($q->expr()->field("trackingServices.$tracking")->equals(true));
                                            }
                                        }
                                    } else {
                                        if ($gender) {
                                            $q->field('buyTraffic')->elemMatch(array('gender' => $query->gender));
                                        }
                                    }
                                }
                            }
                        }



                        break;
                    case "TrafficSupplier":

// Ad format
// User type
// Targeting
// Countries
// Trading models
// Ad format
                        $adformats = array();
                        if (isset($query->adFormat)) {
                            foreach ($query->adFormat as $val) {
                                if ($val)
                                    $adformats[] = $val;
                            }
                        }

// User type
                        $usertypes = array();
                        if (isset($query->userTypes)) {
                            foreach ($query->userTypes as $val) {
                                if ($val)
                                    $usertypes[] = $val;
                            }
                        }
// Targeting
                        $targetings = array();
                        if (isset($query->targeting)) {
                            foreach ($query->targeting as $val) {
                                if ($val)
                                    $targetings[] = $val;
                            }
                        }

// Countries
                        $countries = array();
                        if (isset($query->offersCountry)) {
                            foreach ($query->offersCountry as $val) {
                                if ($val)
                                    $countries[] = $val;
                            }
                        }

// Trading models
                        $tradingModels = array();
                        if (isset($query->tradingModels)) {
                            foreach ($query->tradingModels as $val) {
                                if ($val)
                                    $tradingModels[] = $val;
                            }
                        }


// SUPER ARRAY
                        $superArray = array('countries' => $countries, 'adformat' => $adformats, 'userType' => $usertypes, 'targeting' => $targetings, 'trading' => $tradingModels);

                        arsort($superArray);

                        $queryArray = array();
                        foreach ($superArray as $key => $subArray) {
                            if (count($subArray) > 0)
                                $queryArray[$key] = array('$in' => $subArray);
                        }


// PRICING + PLATFORM
                        if (count($os) > 0 and count($pricings) > 0) {

                            foreach ($pricings as $pricing => $true0) {
                                foreach ($os as $platform => $true1) {

                                    if (count($types) > 0) {
// IF Traffic Types
                                        foreach ($types as $type => $true2) {

                                            $tempQuery = array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1, $type => $true2);
                                            $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                            if (isset($query->tracking) and count($query->tracking) > 0) {
                                                foreach ($query->tracking as $tracking) {

                                                    if (count($queryArray) > 0) {

                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('sellTraffic')->elemMatch($resultArray));
                                                    } else {
                                                        $q->addOr(
                                                                $q->expr()
                                                                        ->field("trackingServices.$tracking")->equals(true)
                                                                        ->field('sellTraffic')->elemMatch($tempQuery));
                                                    }
                                                }
                                            } else {
                                                if (count($queryArray) > 0) {
                                                    $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                                } else {
                                                    $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                                }
                                            }
                                        }
                                    } else {
// NO Traffic Types

                                        $tempQuery = array('pricing.0.' . $pricing => $true0, 'platform.0.' . $platform => $true1);
                                        $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {

                                                if (count($queryArray) > 0) {

                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($resultArray));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($tempQuery));
                                                }
                                            }
                                        } else {
                                            if (count($queryArray) > 0) {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                            } else {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    }
                                }
                            }
                        }

// ONLY PLATFORM
                        if (count($os) > 0 and count($pricings) <= 0) {
                            foreach ($os as $platform => $true1) {

                                if (count($types) > 0) {
// IF Traffic Types
                                    foreach ($types as $type => $true2) {

                                        $tempQuery = array('platform.0.' . $platform => $true1, $type => $true2);
                                        $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {

                                                if (count($queryArray) > 0) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($resultArray));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($tempQuery));
                                                }
                                            }
                                        } else {

                                            if (count($queryArray) > 0) {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                            } else {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    }
                                } else {
// NO Traffic Types

                                    $tempQuery = array('platform.0.' . $platform => $true1);
                                    $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                    if (isset($query->tracking) and count($query->tracking) > 0) {
                                        foreach ($query->tracking as $tracking) {

                                            if (count($queryArray) > 0) {
                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($resultArray));
                                            } else {

                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    } else {
                                        if (count($queryArray) > 0) {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                        } else {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                        }
                                    }
                                }
                            }
                        }

// ONLY PRICING
                        if (count($os) <= 0 and count($pricings) > 0) {
                            foreach ($pricings as $pricing => $true0) {

                                if (count($types) > 0) {
// IF Traffic Types
                                    foreach ($types as $type => $true2) {

                                        $tempQuery = array('pricing.0.' . $pricing => $true0, $type => $true2);
                                        $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                        if (isset($query->tracking) and count($query->tracking) > 0) {
                                            foreach ($query->tracking as $tracking) {

                                                if (count($queryArray) > 0) {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($resultArray));
                                                } else {
                                                    $q->addOr(
                                                            $q->expr()
                                                                    ->field("trackingServices.$tracking")->equals(true)
                                                                    ->field('sellTraffic')->elemMatch($tempQuery));
                                                }
                                            }
                                        } else {
                                            if (count($queryArray) > 0) {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                            } else {
                                                $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    }
                                } else {
// NO Traffic Types

                                    $tempQuery = array('pricing.0.' . $pricing => $true0);
                                    $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                    if (isset($query->tracking) and count($query->tracking) > 0) {
                                        foreach ($query->tracking as $tracking) {
                                            if (count($queryArray) > 0) {
                                                $q->addOr(
                                                        $q->expr()->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($resultArray));
                                            } else {
                                                $q->addOr(
                                                        $q->expr()->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    } else {
                                        if (count($queryArray) > 0) {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                        } else {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                        }
                                    }
                                }
                            }
                        }

// NO PRICING + NO PLATFORM
                        if (count($os) <= 0 and count($pricings) <= 0) {

                            if (count($types) > 0) {
// IF Traffic Types
                                foreach ($types as $type => $true2) {

                                    $tempQuery = array($type => $true2);
                                    $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                    if (isset($query->tracking) and count($query->tracking) > 0) {
                                        foreach ($query->tracking as $tracking) {

                                            if (count($queryArray) > 0) {
                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($resultArray));
                                            } else {

                                                $q->addOr(
                                                        $q->expr()
                                                                ->field("trackingServices.$tracking")->equals(true)
                                                                ->field('sellTraffic')->elemMatch($tempQuery));
                                            }
                                        }
                                    } else {
                                        if (count($queryArray) > 0) {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                        } else {
                                            $q->addOr($q->expr()->field('sellTraffic')->elemMatch($tempQuery));
                                        }
                                    }
                                }
                            } else {
// NO Traffic Types

                                $tempQuery = array();
                                $resultArray = array_merge($queryArray, $tempQuery);

// Tracking Services
                                if (isset($query->tracking) and count($query->tracking) > 0) {
                                    foreach ($query->tracking as $tracking) {

                                        if (count($queryArray) > 0) {
                                            $q->addOr(
                                                    $q->expr()
                                                            ->field("trackingServices.$tracking")->equals(true)
                                                            ->field('sellTraffic')->elemMatch($resultArray));
                                        } else {
                                            $q->addOr(
                                                    $q->expr()
                                                            ->field("trackingServices.$tracking")->equals(true));
                                        }
                                    }
                                } else {
                                    if (count($queryArray) > 0) {
                                        $q->addOr($q->expr()->field('sellTraffic')->elemMatch($resultArray));
                                    } else {
// NOTHING
                                    }
                                }
                            }
                        }



                        break;
                    case "AppSolutions":
// NOTHING
                        break;

                    default:
// NOTHING
                        break;
                }







                /*

                  $countries = array();   // TO BE DELETED
                  $superArray = array('types' => $types, 'ratings' => $pricings, 'os' => $os, 'countries' => $countries);

                  // Sort multi-dimensional array by length
                  usort($superArray, function($a, $b) {
                  return count($b) - count($a);
                  } );

                  foreach($superArray[0] as $os => $true0){ // $os might not be an actual os, but help us to understand the code
                  $ratings2 = array();
                  if(isset($superArray[1])) $ratings2 = $superArray[1];
                  foreach($ratings2 as $rating => $true1){ // $rating might not be an actual rating type, but help us to understand the code
                  $types = array();
                  if(isset($superArray[2])) $types = $superArray[2];
                  foreach($types as $type => $true2){ // $type might not be an actual incent/noincent type, but help us to understand the code
                  $countries = array();
                  if(isset($superArray[3])) $countries = $superArray[3];
                  foreach($countries as $country => $true3){ // $country might not be an actual country, but help us to understand the code
                  if($query->companyType=='Advertiser' ) $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($os => $true0, $rating => $true1, $type => $true2, $country => $true3)));
                  else $q->addOr($q->expr()->field('sellTraffic')->elemMatch(array($os => $true0, $rating => $true1, $type => $true2, $country => $true3)));
                  }
                  if(count($countries)==0)  {
                  if($query->companyType=='Advertiser' ) $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($os => $true0, $rating => $true1, $type => $true2)));
                  else $q->addOr($q->expr()->field('sellTraffic')->elemMatch(array($os => $true0, $rating => $true1, $type => $true2)));
                  }
                  }
                  if(count($types)==0) {
                  if($query->companyType=='Advertiser' ) $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($os => $true0, $rating => $true1)));
                  else $q->addOr($q->expr()->field('sellTraffic')->elemMatch(array($os => $true0, $rating => $true1)));
                  }
                  }
                  if(count($ratings2)==0) {
                  if($query->companyType=='Advertiser' ) $q->addOr($q->expr()->field('buyTraffic')->elemMatch(array($os => $true0)));
                  else $q->addOr($q->expr()->field('sellTraffic')->elemMatch(array($os => $true0)));
                  }
                  }
                 */
            } else {
// Company / OK 22-01-15

                $q = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->sort('companyPoints', -1);

// Query String
                /* if(isset($query->string)) {
                  $q->addOr($q->expr()->field('name')->equals(new \MongoRegex("/{$query->string}/i")));
                  $q->addOr($q->expr()->field('username')->equals(new \MongoRegex("/{$query->string}/i")));
                  } */


                if (isset($query->basedCountry) and $query->basedCountry != null)
                    $q->field('basedCountry')->in($query->basedCountry);

                if (isset($query->city) and $query->city != null)
                    $q->field('city')->equals(new \MongoRegex("/{$query->city}/i"));
                if (isset($query->size) and $query->size != null)
                    $q->field('size')->equals($query->size);
            }

// Query String
            $string = array();
            if (isset($query->string) and $query->string != null) {

                $queryString = str_replace(',', ' ', $query->string);
                $temp = explode(" ", $queryString);

                foreach ($temp as $var)
                    if ($var)
                        $string[] = new \MongoRegex("/{$var}/ix");

                $q->field('search')->all($string);
            }



// Company Types
            $subTypes = array();
            if (isset($query->companySubType)) {
                foreach ($query->companySubType as $key => $type) {
                    if ($type)
                        $subTypes[] = $key;
                }
                if (count($subTypes) > 0 and isset($query->companySubType) and isset($query->companyType) and $query->companyType != 'All')
                    $q->field('companySubType')->in($subTypes);
            }
            if (isset($query->companyType) and $query->companyType != 'All') {
                $q->field('companyType')->equals($query->companyType);
            }

            $count = $q->getQuery()->execute()->count();

            $limit = 10; // MUST BE CHANGED ON CLIENT SIDE ALSO
            $skip = 0;
            if (isset($query->skip))
                $skip = $query->skip;


            if ($query->profileType == "people") {


                $temp = $q
                        ->select(array('id', 'username', 'name', 'lastname', 'avatar', 'responseRate', 'totalReceivedEmails', 'jobTitle', 'company'))
                        ->limit($limit)
                        ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                        ->getQuery()
                        ->execute();


                $mMC = new ManageMutualConnections($dm);
                foreach ($temp as $dbuser) {
                    //$userIds[] = $dbuser->id;
                    //$users[] = $dbuser;
                    //Get Mutual Connections
                    $arrMutualConnection = $mMC->getMutualConnections($user, $dbuser);
                    //Code now in ManageMutualConnections Class
                    /* $arrMutualConnection = array();
                      $q = $dm->createQueryBuilder('DataBaseBundle:User')->hydrate(false)->select('username', 'name', 'lastname', 'email', 'avatar', 'company', 'jobTitle');
                      $q->field('inTouch')->elemMatch(array('status' => 3, 'username' => $user->username));
                      $q->addAnd(
                      $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'username' => $dbuser->username))
                      );
                      $mutualConnections = $q->getQuery()->execute();
                      $emails = array();
                      foreach ($mutualConnections as $mutualConnection) {
                      unset($mutualConnection['_id']);
                      $arrMutualConnection[] = $mutualConnection;
                      $emails[] = $mutualConnection['email'];
                      }

                      //Getting common email from sync contacts of both users as a mutual connection need to refactor this if wants user avatar in future
                      $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                      ->field('isAlreadyExists')->equals(true);
                      $q->addOr(
                      $q->expr()->field('userID')->equals($user->id)
                      );
                      $q->addOr(
                      $q->expr()->field('userID')->equals($dbuser->id)
                      );
                      $inv = $q->getQuery()->execute()->toArray();


                      $result = array();
                      $arrResult = array();
                      foreach ($inv as $i) {
                      if (!isset($result[$i->email]))
                      $result[$i->email] = $i;
                      else
                      $arrResult[] = $i;
                      }





                      foreach ($arrResult as $i) {

                      if (!in_array($i->email, $emails)) {

                      $contact = array(
                      'id' => $i->existingUser['id'],
                      'username' => $i->existingUser['username'],
                      'name' => $i->firstname,
                      'lastname' => $i->lastname,
                      'company' => $i->company,
                      'jobTitle' => $i->jobTitle,
                      'avatar' => isset($i->existingUser['avatar']) ? $i->existingUser['avatar'] : null
                      );

                      $arrMutualConnection[] = $contact;
                      }
                      } */

//                     Not working used to get unique 
//                      $allInvs = array_map(function($v) {
//                      return $v->email;
//                      }, $inv);
//
//                      $uniqueEmails = array_unique($allInvs);
//
//                      $result = array_intersect_key($inv, $uniqueEmails);
//
//                      print_r($result);
//                     Not working remove it once everything will be done
//                      $t = array_uintersect($inv, $inv, function($val1, $val2) {
//                      if ($val1->email == $val2->email) {
//                      return true;
//                      } else {
//                      return false;
//                      }
//                      //echo $val2->email;
//                      //die;
//                      //return strcmp($val1->email, $val2->email);
//                      });
//
//                      print_r($t);
//
//                      die;
//                    Old code refactored above
//                     $result = array_count_values(array_map(function($item) {
//                      return ucwords(strtolower($item->firstname . ' ' . $item->lastname));
//                      }, $inv));
//                    
//                      foreach ($result as $key => $value) {
//                      if ($value == 2 && !in_array($key, $arrMutualConnection)) {
//                      $arrMutualConnection[] = $key;
//                      }
//                      }
                    //End of getting mutual connection from sync contacts

                    $users[] = array(
                        "id" => $dbuser->getId(),
                        "username" => $dbuser->getUsername(),
                        "name" => $dbuser->getName(),
                        "avatar" => $dbuser->getAvatar(),
                        "lastname" => $dbuser->getLastname(),
                        "responseRate" => $dbuser->getResponseRate(),
                        "totalReceivedEmails" => $dbuser->getTotalReceivedEmails(),
                        "jobTitle" => $dbuser->getJobTitle(),
                        "company" => $dbuser->getCompany(),
                        "mutualConnections" => $arrMutualConnection
                    );
                }
            } else {
                $temp = $q
                        ->select(array('id', 'username', 'followers', 'basedCountry', 'city', 'companyType', 'name', 'avatar', 'description'))
                        ->limit($limit)
                        ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                        ->getQuery()
                        ->execute();



                foreach ($temp as $dbuser) {
//$userIds[] = $dbuser->id;
//$users[] = $dbuser;
                    $users[] = array(
                        "id" => $dbuser->getId(),
                        "username" => $dbuser->getUsername(),
                        "followers" => $dbuser->getFollowers(),
                        "avatar" => $dbuser->getAvatar(),
                        "description" => $dbuser->getDescription(),
                        "basedCountry" => $dbuser->getBasedCountry(),
                        "city" => $dbuser->getCity(),
                        "companyType" => $dbuser->getCompanyType(),
                        "name" => $dbuser->getName()
                    );
                }
            }
        }
        if (count($users) < 5 && $query->profileType == "companies") {
            if (isset($query->searchType) and $query->searchType == 'create-company') {
                $q1 = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->sort('companyPercentage', -1);

                $queryStringcreate = substr($query->string, 0, 3);
                $q1->addOr($q->expr()->field('username')->equals(new \MongoRegex('/.*' . $queryStringcreate . '.*/i')));
                $q1->addOr($q->expr()->field('username')->equals(new \MongoRegex('/.*' . $queryStringcreate . '.*/i')));
                $limit = 5; // MUST BE CHANGED ON CLIENT SIDE ALSO
                $skip = 0;
                $temp1 = $q1
                        ->sort('_id', -1)
                        ->limit($limit)
                        ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                        ->getQuery()
                        ->execute();

                foreach ($temp1 as $dbuser) {
                    if (!in_array($dbuser->id, $userIds)) {
                        $users[] = $dbuser;
                    }
                }
            }
        }

        return new JsonResponse(array('count' => $count, 'users' => $users));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user","company"
     *     },
     *  description="Simple search for user and company",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function simpleSearchAction(Request $request) {
        $users = array();

// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $query = $request->query;

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $q = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('validated')->equals(true);

// Query String
        if (isset($query->string)) {
            $q->addOr($q->expr()->field('name')->equals(new \MongoRegex("/{$query->string}/i")));
            $q->addOr($q->expr()->field('lastname')->equals(new \MongoRegex("/{$query->string}/i")));
//$q->addOr($q->expr()->field('username')->equals(new \MongoRegex("/{$query->string}/i")));
            $q->addOr($q->expr()->field('company')->equals(new \MongoRegex("/{$query->string}/i")));
        }


        $temp = $q
//->sort('lastOpen', 'DESC')
                ->limit(20)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                ->getQuery()
                ->execute();


        foreach ($temp as $dbuser) {
            $users[] = array('name' => $dbuser->getName() . " " . $dbuser->getLastname(), 'company' => $dbuser->getCompany(), 'username' => $dbuser->getUsername());
        }


        return new JsonResponse($users);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Simple search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /*   public function autoCompleteSearchAction(Request $request)
      {

      $results = array();


      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $query = $request->query;

      $string = $query->string;

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      if($query->profileType=='companies'){

      // Set up database
      $q = $dm->createQueryBuilder('DataBaseBundle:Company');

      // Query String
      if(isset($string) and $string=null) {

      $queryString= str_replace(',', ' ', $string);
      $queryString = $this->removeAccents($queryString);
      $temp = explode(" ", $queryString);

      $string = array();

      foreach($temp as $var){
      if($var) { $string[] = new \MongoRegex("/{$var}/ix"); }
      }

      $q->addOr($q->expr()->field('search')->all($string));
      }


      $temp = $q
      //->sort('lastOpen', 'DESC')
      ->limit(10)
      //->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
      ->getQuery()
      ->execute();

      //[{"id":"54be364f77d76166df6ae16e","username":"mediaswapp","name":"Mediaswapp","size":"2-10","companyType":"TrafficSupplier","companySubType":["MobileAdvertisingNetwork","SocialAdvertising","AppDiscoveryPublisher"],"avatar":"\/img\/company\/avatars\/mediaswapp.png?1423560958","search":["Mediaswapp"]},{"id":"54dc947fb48f1ed6295ecefa","username":"umiqo","name":"UMIQO GLOBAL","size":"2-10","companyType":"Advertiser","companySubType":null,"avatar":null,"search":["UMIQO GLOBAL"]}]
      foreach($temp as $dbuser){
      $results[] = array('username' => $dbuser->getUsername(), 'name' => $dbuser->getName(), "companyType" => $dbuser->getCompanyType(), "companySubType" => $dbuser->getCompanySubType(), 'avatar' => $dbuser->getAvatar(), 'search' => $dbuser->getSearch());
      }
      }else{

      // Set up database
      $q = $dm->createQueryBuilder('DataBaseBundle:User')
      ->field('validated')->equals(true);

      // Query String
      if(isset($string) and $string!=null) {

      $queryString= str_replace(',', ' ', $string);
      $queryString = $this->removeAccents($queryString);
      $temp = explode(" ", $queryString);

      $string = array();

      foreach($temp as $var){
      if($var) { $string[] = new \MongoRegex("/{$var}/ix"); }
      }

      $q->addOr($q->expr()->field('search')->all($string));
      }


      $temp = $q
      //->sort('lastOpen', 'DESC')
      ->limit(10)
      //->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
      ->getQuery()
      ->execute();

      //[{"id":"54c8c7b0242ff2f13ad63af1","username":"jmarti2","name":"josep","lastname":"marti","jobTitle":"BETA TESTER","company":"MediaSwapp","avatar":null,"responseRate":null,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti"]},{"id":"54be3a3d242ff2ae36d63af1","username":"josepmarti","name":"josep","lastname":"marti","jobTitle":"Developer","company":"MediaSwapp","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","marti josep MediaSwapp","marti josep","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti","Developer"]},{"id":"54bd2d30242ff21736d63af2","username":"jmarti","name":"Jmarti","lastname":"PASCUAL","jobTitle":"UX tester","company":"MediaSwapp","avatar":null,"responseRate":0,"search":["Jmarti PASCUAL","Jmarti PASCUAL MediaSwapp","Jmarti MediaSwapp","PASCUAL MediaSwapp","PASCUAL Jmarti MediaSwapp","PASCUAL Jmarti","MediaSwapp Jmarti","MediaSwapp PASCUAL","MediaSwapp Jmarti PASCUAL","UX","tester"]},{"id":"54db1532242ff29808d63af1","username":"josepmarti","name":"josep","lastname":"marti","jobTitle":"Develope","company":"MediaSwapp","avatar":null,"responseRate":0,"totalReceivedEmails":1,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","marti josep MediaSwapp","marti josep","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti","Develope"]},{"id":"54db1974242ff29808d63af2","username":"pepemartinez","name":"pepe","lastname":"martinez","jobTitle":"Developers","company":"Google","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["pepe martinez","pepe martinez Google","pepe Google","martinez Google","martinez pepe Google","martinez pepe","Google pepe","Google martinez","Google pepe martinez","Developers"]},{"id":"54e23239242ff29d4cd63af1","username":"joseptesting","name":"josep","lastname":"testing","jobTitle":"Dev","company":"Med","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep testing","josep testing Med","josep Med","testing Med","testing josep Med","testing josep","Med josep","Med testing","Med josep testing","Dev"]},{"id":"54e2ff58242ff2a04cd63af2","username":"joseptesting","name":"josep","lastname":"testing","jobTitle":"dev","company":"media","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep testing","josep testing media","josep media","testing media","testing josep media","testing josep","media josep","media testing","media josep testing","dev"]}]
      foreach($temp as $dbuser){
      $results[] = array('username' => $dbuser->getUsername(), 'name' => $dbuser->getName(), 'lastname' => $dbuser->getLastname(), 'jobTitle' => $dbuser->getJobTitle(),  "company" => $dbuser->getCompany(), 'avatar' => $dbuser->getAvatar(), 'search' => $dbuser->getSearch());
      }

      }


      return new JsonResponse($results);

      }
     */

    /**
     * @ApiDoc(
     *  tags={
     *         "company",
     *     },
     *  description="Company name search",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function companyNameSearchAction(Request $request) {

        $companies = array();

// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);


// Get POST parameters
        $query = strval($request->companyName);

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $q = $dm->createQueryBuilder('DataBaseBundle:CompanySearch');

// Query String
        if (isset($query)) {
            $q->expr()->field('name')->equals(new \MongoRegex("/{$query}/i"));
        }

        $temp = $q
//->sort('lastOpen', 'DESC')
                ->limit(10)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                ->getQuery()
                ->execute();


        foreach ($temp as $dbcompany) {
            $companies[] = $dbcompany;
        }

        return new JsonResponse($companies);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function followAction(Request $request) {

        $newfollower = null;
        $newfollowing = null;

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $request = json_decode($postdata);

        $username = $request->username;

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $username));

        if (!$company) {
            throw new NotFoundHttpException();
        }

        $newfollowing = array(
            'id' => $company->getId(),
            'date' => time(),
            'name' => $company->getName(),
            'username' => $company->getUsername(),
            'avatar' => $company->getAvatar(),
            'companyType' => $company->getCompanyType()
        );
        $newfollower = array(
            'id' => $user->getId(),
            'username' => $user->getUsername(),
            'name' => $user->getName(),
            'lastname' => $user->getLastname(),
            'avatar' => $user->getAvatar(),
            'cover' => $user->getCover(),
            'jobTitle' => $user->getJobTitle(),
            'company' => $user->getCompany(),
            'miniResume' => $user->getMiniResume(),
            'city' => $user->getCity(),
            'basedCountry' => $user->getBasedCountry(),
            'date' => time()
        );

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('following')->addToSet($newfollowing)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $q = $dm->createQueryBuilder('DataBaseBundle:Company');
        $q->update()
                ->multiple(false)
                ->field('_id')->equals($company->getId())
                ->field('followers')->addToSet($newfollower)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $q = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->update()
                        ->multiple(true)
                        ->field('companyID')->equals($company->getId());
        $q->addOr($q->expr()->field('type')->equals(2));
        $q->addOr($q->expr()->field('type')->equals(5));

        $q->field("companyFollowers")->set(intval(count($company->getFollowers()) + 1))
                ->upsert(false)
                ->getQuery()
                ->execute();

// Update company page shares on Updates
        $q = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->update()
                        ->multiple(true)
                        ->field('sharedCompanyUsername')->equals($company->getUsername());
        $q->addOr($q->expr()->field('type')->equals(5));
        $q->addOr($q->expr()->field('type')->equals(7));
        $q->field("sharedCompanyFollowers")->set(intval(count($company->getFollowers()) + 1))
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        $timing = strtotime("-1 hour");

        $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->field('userID')->equals($user->getId())
                        ->field('companyID')->equals($company->getId())
                        ->field('action')->equals('follow')
                        ->field('date')->gte($timing)
                        ->getQuery()->execute()->count();

        if ($updateFeed == 0) {

            $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->insert()
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                    ->field("userJobTitle")->set($user->getJobTitle())
                    ->field("type")->set(intval(2))
                    ->field("filter")->set('professional')
                    ->field("action")->set('follow')
                    ->field("likesCounter")->set(intval(0))
                    ->field("commentsCounter")->set(intval(0))
                    ->field("liked")->set(array())
                    ->field("isLike")->set(false)
                    ->field("companyID")->set($company->getId())
                    ->field("companyUsername")->set($company->getUsername())
                    ->field("companyAvatar")->set($company->getAvatar())
                    ->field("companyFullName")->set($company->getName())
                    ->field("companyFollowers")->set(intval(count($company->getFollowers()) + 1))
                    ->field("companyType")->set($company->getCompanyType())
//->field("companyFollowers")->set(intval(count($company->getFollowers())))
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $admins = $company->getAdministrators();
            if ($admins) {
                $noOfFollowers = $company->getFollowers() && is_array($company->getFollowers()) ? ( count($company->getFollowers()) + 1 ) : 1;
                foreach ($admins as $admin) {

                    if ($admin['id'] != $user->getId()) {

                        $tempAdmin = $dm->createQueryBuilder('DataBaseBundle:User')
                                ->field('_id')->equals($admin['id'])
                                ->getQuery()
                                ->getSingleResult();

                        if ($tempAdmin) {

                            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                    ->update()
                                    ->multiple(false)
                                    ->field('_id')->equals($tempAdmin->getId())

// Update found Campaign
                                    ->field('alertsNotifications')->inc(1)
                                    ->field('alerts')->push(array('$each' => array(array(
                                                'id' => $user->getId() . time(),
                                                'type' => 8,
                                                'read' => false,
                                                'action' => 'is now following ' . $company->getName(),
                                                'username' => $user->getUsername(),
                                                'name' => $user->getName(),
                                                'lastname' => $user->getLastname(),
                                                'avatar' => $user->getAvatar(),
                                                'date' => time() * 1000
                                            )), '$slice' => -90))
                                    ->field('updateDate')->set(time())

// Options
                                    ->upsert(false)
                                    ->getQuery()
                                    ->execute();

                            $settings = $tempAdmin->getSettings();
                            if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_companyfollow']) and $settings['notifications'][0]['email_companyfollow']) {

                                $players = array();
                                if ($tempAdmin->getPlayerId()) {
                                    $players[] = $tempAdmin->getPlayerId();

                                    switch ($this->get('kernel')->getEnvironment()) {
                                        case 'adhoc':
                                            $baseURL = 'https://www-dev.mobintouch.com';
                                            break;
                                        case 'prod':
                                            $baseURL = 'https://www.mobintouch.com';
                                            break;
                                        default:
                                            $baseURL = 'https://www.mobintouch.com';
                                            break;
                                    }
                                    $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' is now following ' . $company->getName(), $players, $baseURL . '/followers');
                                }
                            }
                        }
                    }
                }
            }
        }
        $updatedData = $this->countCompanyPercentage($user);
        return new JsonResponse(array('newfollower' => $newfollower, 'newfollowing' => $newfollowing));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function unfollowAction(Request $request) {

// Get the User
        $users = array();
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $username = $request->username;

            $oldFollower = null;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $username));

            if ($company) {

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

                $followings = $user->getFollowing();
                foreach ($followings as $key => $follow) {
                    if ($follow['id'] == $company->getId()) {

                        unset($followings[$key]);

// update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId())

// Update found Campaign
                                ->field('following')->pull($follow)
                                ->field('updateDate')->set(time())

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                }
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!

                $user->setFollowing($followings);
//$dm->persist($user);
//$dm->flush();

                $followers = $company->getFollowers();
                foreach ($followers as $key => $follow) {
                    if ($follow['id'] == $user->getId()) {

                        $oldFollower = $follow;

// update DATABASE
                        $q = $dm->createQueryBuilder('DataBaseBundle:Company');
// Find the Campaign
                        $q->update()
                                ->multiple(false)
                                ->field('_id')->equals($company->getId())

// Update found Campaign
                                ->field('followers')->pull($follow)

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        break;
                    }
                }


// Update followers on Updates
                $q = $dm->createQueryBuilder('DataBaseBundle:Update')
                                ->update()
                                ->multiple(true)
//->field('type')->equals(2) // Follow company update
                                ->field('companyID')->equals($company->getId());
                $q->addOr($q->expr()->field('type')->equals(2));
                $q->addOr($q->expr()->field('type')->equals(5));


// Update found Campaign
                $q->field("companyFollowers")->set(intval(count($company->getFollowers()) - 1))

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

// Update company page shares on Updates
                $q = $dm->createQueryBuilder('DataBaseBundle:Update')
                                ->update()
                                ->multiple(true)
//->field('type')->equals(2) // Follow company update
                                ->field('sharedCompanyUsername')->equals($company->getUsername());
                $q->addOr($q->expr()->field('type')->equals(5));
                $q->addOr($q->expr()->field('type')->equals(7));


// Update found Campaign
                $q->field("sharedCompanyFollowers")->set(intval(count($company->getFollowers()) - 1))

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();


                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
//$company->setFollowers($followers);
//$dm->persist($company);
//$dm->flush();

                /*
                  // Set up database
                  $dm = $this->get('doctrine_mongodb.odm.document_manager');

                  $followings = $user->getFollowing();
                  foreach($followings as $key => $follow){
                  if($follow['_id']==$company->getId()){
                  unset($followings[$key]);
                  break;
                  }
                  }
                  $user->setFollowing($followings);
                  $dm->persist($user);
                  $dm->flush();

                  $followers = $company->getFollowers();
                  foreach($followers as $key => $follow){
                  if($follow['_id']==$user->getId()){
                  unset($followers[$key]);
                  break;
                  }
                  }
                  $company->setFollowers($followers);
                  $dm->persist($company);
                  $dm->flush(); */
                $updatedData = $this->countCompanyPercentage($user);
            }
        }

        return new JsonResponse(array('user' => $user, 'follower' => $oldFollower));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getConnectAction(Request $request) {

// Get the User
        $result = array();
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $userId = $request->userId;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $view = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($userId)
                    ->getQuery()
                    ->getSingleResult();

            if ($view) {
                $already = false;
                $inTouch = $user->getInTouch();
                if ($inTouch) {
                    foreach ($inTouch as $touch) {
                        if ($touch['id'] == $userId)
                            $already = true;
                        break;
                    }
                }
                if (!$already) {

                    $myUserID = $user->getId();

// update DATABASE
                    $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($myUserID)

// Update found Campaign
                            ->field("inTouch")->addToSet(
                                    array(
                                        'id' => $userId,
                                        'username' => $view->getUsername(),
                                        'name' => $view->getName(),
                                        'lastname' => $view->getLastname(),
                                        'avatar' => $view->getAvatar(),
                                        'cover' => $view->getCover(),
                                        'miniResume' => $view->getMiniResume(),
                                        'jobTitle' => $view->getJobTitle(),
                                        'company' => $view->getCompany(),
                                        'status' => 1,
                                        'date' => time()
                                    )
                            ) // Status = 1 : SENT Request
                            ->field('updateDate')->set(time())

// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();


// update DATABASE
                    $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($userId)

// Update found Campaign
                            ->field("inTouch")->addToSet(
                                    array(
                                        'id' => $myUserID,
                                        'username' => $user->getUsername(),
                                        'name' => $user->getName(),
                                        'lastname' => $user->getLastname(),
                                        'avatar' => $user->getAvatar(),
                                        'cover' => $user->getCover(),
                                        'miniResume' => $user->getMiniResume(),
                                        'jobTitle' => $user->getJobTitle(),
                                        'company' => $user->getCompany(),
                                        'status' => 2,
                                        'date' => time()
                                    )
                            ) // Status = 2 : Waiting to be validated
                            ->field('alertsNotifications')->inc(1)
                            ->field('alerts')->push(array('$each' => array(array(
                                        'id' => $user->getId() . time(),
                                        'type' => 1,
                                        'read' => false,
                                        'action' => 'sent you an connection request',
                                        'username' => $user->getUsername(),
                                        'name' => $user->getName(),
                                        'lastname' => $user->getLastname(),
                                        'avatar' => $user->getAvatar(),
                                        'date' => time() * 1000
                                    )), '$slice' => -90))
                            ->field('updateDate')->set(time())


// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
// update DATABASE
                    /*   $dm->createQueryBuilder('DataBaseBundle:inTouch')
                      // Find the Campaign
                      ->update()
                      ->multiple(false)
                      ->field('userID1')->equals($myUserID)
                      ->field('userID2')->equals($userId)

                      // Update found Campaign
                      ->field("user1")->set(array('id' => $myUserID, 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany())) // Status = 2 : Waiting to be validated
                      ->field("user2")->set(array('id' => $userId, 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany())) // Status = 2 : Waiting to be validated
                      ->field("date")->set(time()) // Status = 2 : Waiting to be validated
                      ->field("status")->set(2) // Status = 2 : Waiting to be validated

                      // Options
                      ->upsert(false)
                      ->getQuery()
                      ->execute(); */


                    $settings = $view->getSettings();
                    if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_intouchrequest']) and $settings['notifications'][0]['email_intouchrequest']) {

                        switch ($this->get('kernel')->getEnvironment()) {
                            case 'adhoc':
                                $baseURL = 'https://cdn-dev.mobintouch.com';
                                break;
                            case 'prod':
                                $baseURL = 'https://cdn.mobintouch.com';
                                break;
                            default:
                                $baseURL = 'https://cdn.mobintouch.com';
                                break;
                        }

                        $parts = parse_url($_SERVER['HTTP_REFERER']);
                        $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                        $connectionLink = 'https://' . $parts["host"] . "/manage-connections/requested";
                        $link = 'https://' . $parts["host"];
                        $profileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';
                        $userJobTitleCompany = $user->getJobTitle() && $user->getCompany() ? $user->getJobTitle() . ' at ' . $user->getCompany() : $user->getJobTitle();
                        $mMc = new ManageMutualConnections($dm);
                        $mutualConnections = count($mMc->getMutualConnections($user, $view, false));
                        $params = array(
                            'personalizations' => array(
                                array(
                                    'to' => array(
                                        array('email' => $view->getEmail())
                                    ),
                                    'substitutions' => array(
                                        ':logo_link' => $link,
                                        ':logo_name_link' => $link,
                                        ':connection_profile_link' => $profileLink,
                                        ':connection_picture_link' => $profileUrl,
                                        ':connection_first_name' => $user->getName(),
                                        ':connection_last_name' => $user->getLastname(),
                                        ':connection_job_title_at_company' => $userJobTitleCompany,
                                        ':number_mutual_connections' => "$mutualConnections",
                                        ':connection_connect_link' => $connectionLink,
                                        ':manage_connections_link' => $connectionLink
                                    )
                                ),
                            ),
                            'from' => array(
                                'email' => "noreply@mobintouch.com",
                                'name' => "Mobintouch"
                            ),
                            'subject' => $user->getName() . ', connect with me on Mobintouch',
                            'content' => array(array(
                                    'type' => 'text/html',
                                    'value' => ' '
                                )
                            ),
                            'template_id' => $this->container->getParameter('template_connection_request_id'),
                            'asm' => array(
                                'group_id' => $this->container->getParameter('group_new_connection')
                            )
                        );
                      //  Utility::sendgrid_mail(json_encode($params));
                        /*
                          $send_grid_options = array(
                          'sub' => array(
                          ':logo_link' => array($link),
                          ':logo_name_link' => array($link),
                          ':connection_profile_link' => array($profileLink),
                          ':connection_picture_link' => array($profileUrl),
                          ':connection_first_name' => array($user->getName()),
                          ':connection_last_name' => array($user->getLastname()),
                          ':connection_job_title' => array($user->getJobTitle()),
                          ':connection_company_name' => array($user->getCompany()),
                          ':number_mutual_connections' => array($mutualConnections),
                          ':connection_connect_link' => array($connectionLink),
                          ':manage_connections_link' => array($connectionLink)
                          ),
                          'filters' => array(
                          'templates' => array(
                          'settings' => array(
                          'enable' => 1,
                          'template_id' => $this->container->getParameter('template_connection_request_id')
                          )
                          )
                          )
                          );
                          $params = array(
                          'to' => $view->getEmail(),
                          'from' => "noreply@mobintouch.com",
                          'fromname' => "Mobintouch",
                          'subject' => $user->getName() . ', connect with me on Mobintouch',
                          'html' => " ",
                          'x-smtpapi' => json_encode($send_grid_options),
                          );
                          Utility::sendgrid_mail($params); */

                        /* $message = \Swift_Message::newInstance()
                          ->setSubject($user->getName() . ' sent you an connection request')
                          ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                          ->setTo($view->getEmail())
                          ->setContentType("text/html")
                          ->setBody(
                          $this->renderView(
                          'APIBundle:Mail:intouchrequest.html.twig', array('title' => 'New connection request', 'baseURL' => $baseURL, 'user' => $user, 'profileLink' => $profileLink, 'intouchLink' => $intouchLink, 'unsubcribe' => 1)
                          )
                          );
                          if ($this->get('kernel')->getEnvironment() != 'dev')
                          $this->get('mailer')->send($message); */

                        $players = array();
                        if ($view->getPlayerId()) {
                            $players[] = $view->getPlayerId();
                            $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' sent you an connection request', $players, $intouchLink);
                        }
                    }

                    $result = array('id' => $userId, 'status' => 1, 'date' => time(), 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany());
                } else {
                    throw new NotFoundHttpException();     // 404
                }
            }
        }

        return new JsonResponse(array($userId => $result));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function acceptConnectionAction(Request $request) {
        $result = array();
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $userId = $request->userId;

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $view = $dm->createQueryBuilder('DataBaseBundle:User')->field('_id')->equals($userId)->getQuery()->getSingleResult();

        if ($view) {

            $myUserID = $user->getId();


            $dm->createQueryBuilder('DataBaseBundle:User')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($myUserID)
                    ->field('inTouch.id')->equals($userId)
                    ->field("inTouch.$.status")->set(3)
                    ->field("inTouch.$.date")->set(time())
                    ->field("inTouch.$.name")->set($view->getName())
                    ->field("inTouch.$.lastname")->set($view->getLastname())
                    ->field("inTouch.$.avatar")->set($view->getAvatar())
                    ->field("inTouch.$.jobTitle")->set($view->getJobTitle())
                    ->field("inTouch.$.company")->set($view->getCompany())
                    ->field("inTouchCounter")->inc(1)
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->createQueryBuilder('DataBaseBundle:User')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($userId)
                    ->field('inTouch.id')->equals($myUserID)
                    ->field("inTouch.$.status")->set(3)
                    ->field("inTouch.$.date")->set(time())
                    ->field("inTouch.$.name")->set($user->getName())
                    ->field("inTouch.$.lastname")->set($user->getLastname())
                    ->field("inTouch.$.avatar")->set($user->getAvatar())
                    ->field("inTouch.$.jobTitle")->set($user->getJobTitle())
                    ->field("inTouch.$.company")->set($user->getCompany())
                    ->field("inTouchCounter")->inc(1)
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $user->getId() . time(),
                                'type' => 2,
                                'read' => false,
                                'action' => 'and you are now connected.',
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'lastname' => $user->getLastname(),
                                'avatar' => $user->getAvatar(),
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!

            $settings = $view->getSettings();
            if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_intouchvalidated']) and $settings['notifications'][0]['email_intouchvalidated']) {

                $parts = parse_url($_SERVER['HTTP_REFERER']);
                $link = 'https://' . $parts["host"];
                $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                $messageLink = 'https://' . $parts["host"] . "/touchmail/compose/" . $user->getUsername();
                $intouchLink = 'https://' . $parts["host"] . "/connections/direct";

                switch ($this->get('kernel')->getEnvironment()) {
                    case 'adhoc':
                        $baseURL = 'https://cdn-dev.mobintouch.com';
                        break;
                    case 'prod':
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                    default:
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                }

                $profileImage = $baseURL . '/img/mit-default-avatar.png?v=' . time();
                if ($user->getAvatar() && !empty($user->getAvatar())) {
                    $profileImage = $baseURL . $user->getAvatar();
                }
                $userJobTitleComapny = $user->getJobTitle() && $user->getCompany() ? $user->getJobTitle() . ' at ' . $user->getCompany() : $user->getJobTitle();
                $connectionLink = 'https://' . $parts["host"] . "/connections/direct";

                /* $message = \Swift_Message::newInstance()
                  ->setSubject('You and ' . $user->getName() . ' are now connected')
                  ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                  ->setTo($view->getEmail())
                  ->setContentType("text/html")
                  ->setBody(
                  $this->renderView(
                  'APIBundle:Mail:intouchconfirmation.html.twig', array('user' => $user, 'profileLink' => $profileLink, 'messageLink' => $messageLink, 'baseURL' => $baseURL, 'unsubcribe' => 1)
                  )
                  );
                  if ($this->get('kernel')->getEnvironment() != 'dev')
                  $this->get('mailer')->send($message); */

                /* $send_grid_options = array(
                  'sub' => array(
                  ':logo_link' => array($link),
                  ':logo_name_link' => array($link),
                  ':connection_profile_link' => array($profileLink),
                  ':connection_picture_link' => array($profileImage),
                  ':connection_first_name' => array($user->getName()),
                  ':connection_last_name' => array($user->getLastname()),
                  ':connection_jobtitle_company' => array($userJobTitleComapny),
                  ':connection_job_title' => array($user->getJobtitle()),
                  ':connection_company_name' => array($user->getCompany())
                  ),
                  'filters' => array(
                  'templates' => array(
                  'settings' => array(
                  'enable' => 1,
                  'template_id' => $this->container->getParameter('template_connection_request_accepted_id')
                  )
                  )
                  )
                  );

                  $params = array(
                  'to' => $view->getEmail(),
                  'from' => "noreply@mobintouch.com",
                  'fromname' => "Mobintouch",
                  'subject' => $user->getName() . " " . $user->getLastname() . " accepted your request",
                  'html' => " ",
                  'x-smtpapi' => json_encode($send_grid_options),
                  );
                  Utility::sendgrid_mail($params); */

                $params = array(
                    'personalizations' => array(
                        array(
                            'to' => array(
                                array('email' => $view->getEmail())
                            ),
                            'substitutions' => array(
                                ':logo_link' => $link,
                                ':logo_name_link' => $link,
                                ':connection_profile_link' => $profileLink,
                                ':connection_picture_link' => $profileImage,
                                ':connection_first_name' => $user->getName(),
                                ':connection_last_name' => $user->getLastname(),
                                ':connection_job_title_at_company' => $userJobTitleComapny,
                                ':manage_connections_link' => $connectionLink
                            )
                        ),
                    ),
                    'from' => array(
                        'email' => "noreply@mobintouch.com",
                        'name' => "Mobintouch"
                    ),
                    'subject' => $user->getName() . " " . $user->getLastname() . " accepted your request",
                    'content' => array(array(
                            'type' => 'text/html',
                            'value' => ' '
                        )
                    ),
                    'template_id' => $this->container->getParameter('template_connection_request_accepted_id'),
                    'asm' => array(
                        'group_id' => $this->container->getParameter('group_connection_request_accepted')
                    )
                );
                Utility::sendgrid_mail(json_encode($params));

                $players = array();
                if ($view->getPlayerId()) {
                    $players[] = $view->getPlayerId();
                    $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' and you are now connected', $players, $intouchLink);
                }
            }


            //$result = array('_id' => $userId, 'status' => 3, 'date' => time());
            $result = array('id' => $userId, 'status' => 3, 'date' => time(), 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany());


            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('userID')->equals($user->getId())
                    ->field('inTouchID')->equals($view->getId())
                    ->field('action')->equals('intouch')
                    ->field('date')->gte($timing)
                    ->getQuery()
                    ->execute()
                    ->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(3))
                        ->field("filter")->set('professional')
                        ->field("action")->set('intouch')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->field("inTouchID")->set($view->getId())
                        ->field("inTouchUsername")->set($view->getUsername())
                        ->field("inTouchAvatar")->set($view->getAvatar())
                        ->field("inTouchFullName")->set($view->getName() . " " . $view->getLastname())
                        ->field("inTouchJobTitle")->set($view->getJobTitle())
                        ->field("inTouchCompany")->set($view->getCompany())
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        } else {
            throw new NotFoundHttpException();     // 404
        }


        return new JsonResponse(array('id' => $userId));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function declineConnectionAction(Request $request) {

// Get the User
        $result = array();
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $userId = $request->userId;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $view = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($userId)
                    ->getQuery()
                    ->getSingleResult();

            if ($view) {

                $myUserID = $user->getId();

// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($myUserID)

// Update found Campaign
//->field("inTouch.$userId")->unsetField()->exists(true)
                        ->field("inTouch")->pull(array('id' => $userId))
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();




// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($userId)

// Update found Campaign
//->field("inTouch.$myUserID")->unsetField()->exists(true)
                        ->field("inTouch")->pull(array('id' => $myUserID))
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
// update DATABASE
                /*  $dm->createQueryBuilder('DataBaseBundle:inTouch')
                  // Find the Campaign
                  ->update()
                  ->multiple(false)
                  ->field('userID1')->equals($myUserID)
                  ->field('userID2')->equals($userId)

                  // Update found Campaign
                  ->field("user1")->set(array('id' => $myUserID, 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany())) // Status = 2 : Waiting to be validated
                  ->field("user2")->set(array('id' => $userId, 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany())) // Status = 2 : Waiting to be validated
                  ->field("date")->set(time()) // Status = 2 : Waiting to be validated
                  ->field("status")->set(0) // Status = 2 : Waiting to be validated

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute(); */


//$result = array('_id' => $userId, 'status' => 0, 'date' => time());
                $result = array('id' => $myUserID, 'status' => 3, 'date' => time(), 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany());
            } else {
                throw new NotFoundHttpException();     // 404
            }
        }

        return new JsonResponse(array($userId => $result));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function deleteConnectionAction(Request $request) {

// Get the User
        $result = array();
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $userId = $request->userId;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $view = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($userId)
                    ->getQuery()
                    ->getSingleResult();

            if ($view) {

                $myUserID = $user->getId();

// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($myUserID)

// Update found Campaign
//->field("inTouch.$userId")->unsetField()->exists(true)
                        ->field("inTouch")->pull(array('id' => $userId))
                        ->field("inTouchCounter")->inc(-1)
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();


// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($userId)

// Update found Campaign
//->field("inTouch.$myUserID")->unsetField()->exists(true)
                        ->field("inTouch")->pull(array('id' => $myUserID))
                        ->field("inTouchCounter")->inc(-1)
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
// update DATABASE
                /*    $dm->createQueryBuilder('DataBaseBundle:inTouch')
                  // Find the Campaign
                  ->update()
                  ->multiple(false)
                  ->field('userID1')->equals($myUserID)
                  ->field('userID2')->equals($userId)

                  // Update found Campaign
                  ->field("user1")->set(array('id' => $myUserID, 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany())) // Status = 2 : Waiting to be validated
                  ->field("user2")->set(array('id' => $userId, 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany())) // Status = 2 : Waiting to be validated
                  ->field("date")->set(time()) // Status = 2 : Waiting to be validated
                  ->field("status")->set(0) // Status = 2 : Waiting to be validated

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute(); */


//$result = array('_id' => $userId, 'status' => 0, 'date' => time());
                $result = array('id' => $myUserID, 'status' => 3, 'date' => time(), 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany());
            } else {
                throw new NotFoundHttpException();     // 404
            }
        }

        return new JsonResponse(array($userId => $result));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function connectionSuggestionsAction(Request $request) {
        ini_set('memory_limit', '1024M');
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $mMC = new ManageMutualConnections($dm);
        $arrPeopleYouMayKnow = array();


        //PEOPLE YOU MAY KNOW TEST
        /* $connections = array_filter($user->getInTouch(), function($v) {
          return $v['status'] == 3;
          }); */

        //$arrConnectedUsers = $this->array_column($user->getInTouch(), 'id');


        $arrConnectedUsers = array();
        $arrRequestedIds = array();
        $connections = $user->getInTouch() ? $user->getInTouch() : array();
        foreach ($connections as $con) {
            if ($con['status'] == 3) {
                $arrConnectedUsers[] = $con['id'];
            } else if ($con['status'] == 1 || $con['status'] == 2) {
                $arrRequestedIds[] = $con['id'];
            }
        }

        $notNowIds = array();
        $userNotNow = $user->getNotNow() ? $user->getNotNow() : array();
        if ($userNotNow) {
            $notNow = array_filter($userNotNow, function($v) {
                return $v['expiryDate'] >= time();
            });
            $user->setNotNow($notNow);
            $notNowIds = $this->array_column($notNow, 'id');
        }

        $q = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('inTouch', 'inTouchCounter', 'username', 'name', 'lastname', 'avatar', 'cover', 'jobTitle', 'company', 'companyPage', 'miniResume')
                        ->field('id')->notIn($arrConnectedUsers)
                        ->field('id')->notIn($notNowIds)
                        ->field('id')->notIn($arrRequestedIds);

        $q->field('inTouch')->elemMatch(
                array('status' => 3, 'id' => array(
                        '$in' => $arrConnectedUsers
                    ))
        );

        /* ->field('inTouch.id')->in($arrConnectedUsers) */

        $users = $q->field('inTouchCounter')->gt(0)
                //->map($map)
                //->reduce($reduce)
                ->getQuery()
                ->execute()
                ->toArray();



        foreach ($users as $id => $u) {

            if ($id == $user->getId() || in_array($id, $arrConnectedUsers)) {
                unset($users[$id]);
                continue;
            }

            $mutualConnections = array_filter($u['inTouch'], function($v) use ($arrConnectedUsers) {
                return $v['status'] == 3 && in_array($v['id'], $arrConnectedUsers);
            });

            //$mutualConnections = $mMC->getMutualConnections($user, $u, false);
            $users[$id]['id'] = $id;
            $users[$id]['noOfMutualConnections'] = count($mutualConnections);
            $users[$id]['mutualConnections'] = array_values($mutualConnections);

            unset($users[$id]['inTouch']);
            unset($users[$id]['_id']);
        }

        usort($users, function($a, $b) {
            return $b['noOfMutualConnections'] - $a['noOfMutualConnections'];
        });

        return new JsonResponse(array_values($users));

        //END OF PEOPLE YOU MAY KNOW TEST 


        $connections = array_filter($user->getInTouch(), function($v) {
            return $v['status'] == 3;
        });

        $arrConnectedUsers = $this->array_column($connections, 'id');
        $notNowIds = array();
        if ($user->getNotNow()) {
            $notNow = array_filter($user->getNotNow(), function($v) {
                return $v['expiryDate'] >= time();
            });
            $user->setNotNow($notNow);
            $notNowIds = $this->array_column($notNow, 'id');
            $dm->flush();
            $dm->clear();
        }

        $users = $dm->createQueryBuilder('DataBaseBundle:User')
                ->hydrate(false)
                ->select('inTouch', 'username', 'name', 'lastname', 'avatar', 'cover', 'jobTitle', 'company', 'miniResume')
                ->field('inTouch.id')->in($arrConnectedUsers)
                ->field('inTouch.id')->notEqual($user->getId())
                //->field('inTouch.jobTitle')->equals($user->getJobTitle())
                ->getQuery()
                ->execute();

        foreach ($users as $id => $u) {
            //if ($u->getInTouch() && count($u->getInTouch()) && !in_array($u->getId(), $arrConnectedUsers) && !in_array($u->getId(), $notNowIds) && $u->getId() != $user->getId()) {
            if (!in_array($id, $arrConnectedUsers) && !in_array($id, $notNowIds) && $id != $user->getId()) {

                $mutualConnection = array_filter($u['inTouch'], function($v) use ($arrConnectedUsers) {
                    return $v['status'] == 3 && in_array($v['id'], $arrConnectedUsers);
                });

                if ($mutualConnection) {
                    $arrPeopleYouMayKnow[] = array(
                        'id' => $id,
                        'username' => $u['username'],
                        'name' => $u['name'],
                        'lastname' => $u['lastname'],
                        'avatar' => isset($u['avatar']) ? $u['avatar'] : null,
                        'cover' => isset($u['cover']) ? $u['cover'] : null,
                        'jobTitle' => $u['jobTitle'],
                        'company' => $u['company'],
                        'miniResume' => isset($u['miniResume']) ? $u['miniResume'] : null,
                        'noOfMutualConnections' => count($mutualConnection),
                        'mutualConnections' => array_values($mutualConnection)
                    );
                }
            }
        }

        usort($arrPeopleYouMayKnow, function($a, $b) {
            return $b['noOfMutualConnections'] - $a['noOfMutualConnections'];
        });

        return new JsonResponse($arrPeopleYouMayKnow);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Feature Company for connections page",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function connectionSearchAction(Request $request) {


        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $user = null;
        $raw_token = $request->headers->get('authorization');
        if (isset($raw_token)) {
            $token = substr($raw_token, strpos($raw_token, '.') + 1);
            $uData = json_decode(base64_decode(substr($token, 0, strpos($token, '.'))));
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $uData->username));
        }

        $data = (object) $request->request->all();
        if (!isset($data->connection))
            return new JsonResponse();

        /* 2017-03-11
          $arrQueryCities = array();
          $arrQueryBasedCountries = array();
          $arrQueryRoles = array();
          $arrQuerySubRoles = array();
          $arrQueryInterests = array();
          $arrQueryCompanies = array(); */
        $arrQueries = array();
        $showCount = true;
        if (isset($data->query) && is_array($data->query) && count($data->query) > 0) {

            $stopKeywords = array("able", "about", "above", "abroad", "according", "accordingly", "across", "actually", "adj", "after", "afterwards", "again", "against", "ago", "ahead", "ain\'t", "all", "allow", "allows", "almost", "alone", "along", "alongside", "already", "also", "although", "always", "am", "amid", "amidst", "among", "amongst", "an", "and", "another", "any", "anybody", "anyhow", "anyone", "aything", "anyway", "anyways", "anywhere", "apart", "appear", "appreciate", "appropriate", "are", "aren\'t", "around", "as", "a\'s", "aside", "ask", "asking", "associated", "at", "available", "away", "awfully", "back", "backward", "backwards", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "begin", "behind", "being", "believe", "belw", "beside", "besides", "best", "better", "between", "beyond", "both", "brief", "but", "by", "came", "can", "cannot", "cant", "can\'t", "caption", "cause", "causes", "certain", "certainly", "changes", "clearly", "c\'mon", "co", "co.", "com", "come", "comes", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "corresponding", "could", "couldn\'t", "course", "c\'s", "currently", "dare", "daren\'t", "definitely", "described", "despite", "did", "didn\'t", "different", "directly", "do", "does", "doesn\'t", "doing", "done", "do\'t", "down", "downwards", "during", "each", "edu", "eg", "eight", "eighty", "either", "else", "elsewhere", "end", "ending", "enough", "entirely", "especially", "et", "etc", "even", "ever", "evermore", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "fairly", "far", "farther", "few", "fewer", "fifth", "first", "five", "folloed", "following", "follows", "for", "forever", "former", "formerly", "forth", "forward", "found", "four", "from", "further", "furthermore", "get", "gets", "getting", "given", "gives", "go", "goes", "going", "gone", "got", "gotten", "greetings", "had", "hadn\'t", "half", "happens", "hardly", "has", "hasn\'t", "have", "haven\'t", "having", "he", "he\'d", "he\'ll", "hello", "help", "hece", "her", "here", "hereafter", "hereby", "herein", "here\'s", "hereupon", "hers", "herself", "he\'s", "hi", "him", "himself", "his", "hither", "hopefully", "how", "howbeit", "however", "hunred", "i\'d", "ie", "if", "ignored", "i\'ll", "i\'m", "immediate", "in", "inasmuch", "inc", "inc.", "indeed", "indicate", "indicated", "indicates", "inner", "inside", "insofar", "instead", "ino", "inward", "is", "isn\'t", "it", "it\'d", "it\'ll", "its", "it\'s", "itself", "i\'ve", "just", "k", "keep", "keeps", "kept", "know", "known", "knows", "last", "lately", "later", "latter", "lattely", "least", "less", "lest", "let", "let\'s", "like", "liked", "likely", "likewise", "little", "look", "looking", "looks", "low", "lower", "ltd", "made", "mainly", "make", "makes", "many", "my", "maybe", "mayn\'t", "me", "mean", "meantime", "meanwhile", "merely", "might", "mightn\'t", "mine", "minus", "miss", "more", "moreover", "most", "mostly", "mr", "mrs", "much", "must", "must\'t", "my", "myself", "name", "namely", "nd", "near", "nearly", "necessary", "need", "needn\'t", "needs", "neither", "never", "neverf", "neverless", "nevertheless", "new", "next", "nine", "niety", "no", "nobody", "non", "none", "nonetheless", "noone", "no-one", "nor", "normally", "not", "nothing", "notwithstanding", "novel", "now", "nowhere", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "on", "once", "one", "ones", "one\'s", "only", "onto", "opposite", "or", "other", "others", "otherwise", "ought", "oughtn\'t", "our", "ours", "ourselves", "out", "outide", "over", "overall", "own", "particular", "particularly", "past", "per", "perhaps", "placed", "please", "plus", "possible", "presumably", "probably", "provided", "provides", "que", "qite", "qv", "rather", "rd", "re", "really", "reasonably", "recent", "recently", "regarding", "regardless", "regards", "relatively", "respectively", "right", "round", "said", "same", "saw", "say", "saying", "says", "second", "secondly", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "severa", "shall", "shan\'t", "she", "she\'d", "she\'ll", "she\'s", "should", "shouldn\'t", "since", "six", "so", "some", "somebody", "someday", "somehow", "someone", "something", "sometime", "sometims", "somewhat", "somewhere", "soon", "sorry", "specified", "specify", "specifying", "still", "sub", "such", "sup", "sure", "take", "taken", "taking", "tell", "tends", "th", "than", "thank", "thanks", "thanx", "that", "that\'ll", "thats", "that\'s", "that\'ve", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "there\'d", "therefoe", "therein", "there\'ll", "there\'re", "theres", "there\'s", "thereupon", "there\'ve", "these", "they", "they\'d", "they\'ll", "they\'re", "they\'ve", "thing", "things", "think", "third", "thiry", "this", "thorough", "thoroughly", "those", "though", "three", "through", "throughout", "thru", "thus", "till", "to", "together", "too", "took", "toward", "towards", "tried", "tries", "tuly", "try", "trying", "t\'s", "twice", "two", "un", "under", "underneath", "undoing", "unfortunately", "unless", "unlike", "unlikely", "until", "unto", "up", "upon", "upwards", "us", "use", "used", "useful", "uses", "using", "usually", "v", "value", "various", "versus", "very", "via", "viz", "vs", "want", "wants", "was", "wasn\'t", "way", "we", "we\'d", "welcome", "well", "we\'ll", "went", "were", "we\'re", "weren\'t", "we\'ve", "what", "whatever", "what\'ll", "what\'s", "what\'ve", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whee\'s", "whereupon", "wherever", "whether", "which", "whichever", "while", "whilst", "whither", "who", "who\'d", "whoever", "whole", "who\'ll", "whom", "whomever", "who\'s", "whose", "why", "wil", "willing", "wish", "with", "within", "without", "wonder", "won\'t", "would", "wouldn\'t", "yes", "yet", "you", "you\'d", "you\'ll", "your", "you\'re", "yours", "yourself", "yourselves", "you\'ve", "zero");

            foreach ($data->query as $query) {

                //Made single array to match everything 2017-03-11 exclude stopkeywords
                $texts = explode(' ', $query['text']);
                $textsCount = count($texts);
                if ($textsCount > 1) {
                    foreach ($texts as $text)
                        if ($text && !in_array($text, $stopKeywords))
                            $arrQueries[] = new \MongoRegex("/{$text}/ix");
                }else {
                    $arrQueries[] = new \MongoRegex("/{$texts[0]}/ix");
                }

                //Made single array to match everything 2017-03-11
                /* $texts = explode(' ', $query['text']);
                  foreach ($texts as $text)
                  if ($text)
                  $arrQueries[] = new \MongoRegex("/{$text}/ix"); */

                /* Modified Algo to make work with dropdown selection previusly work with exetly match 2017-03-11
                  if (isset($query['type'])) {
                  switch ($query['type']) {
                  case 'city':
                  $arrQueryCities[] = new \MongoRegex("/{$query['city']}/i");
                  break;
                  case 'country':
                  $arrQueryBasedCountries[] = new \MongoRegex("/{$query['basedCountry']}/i");
                  break;
                  case 'role':
                  $arrQueryRoles[] = $query['text'];
                  break;
                  case 'subrole':
                  $arrQuerySubRoles[] = $query['text'];
                  break;
                  case 'interest':
                  $arrQueryInterests[] = new \MongoRegex("/{$query['text']}/i");
                  break;
                  case 'company':
                  $arrQueryCompanies[] = $query['username'];
                  break;
                  default:
                  $arrQueries[] = new \MongoRegex("/{$query['text']}/i");
                  break;
                  }
                  } else {
                  $texts = explode(' ', $query['text']);
                  foreach ($texts as $text)
                  if ($text)
                  $arrQueries[] = new \MongoRegex("/{$text}/ix");
                  }
                 */
            }
        } else if ($data->connection === 'everyone') {
            $showCount = false; //hide count when connection filter is everyone without any keyword filter
        }

        $userConnections = $user && $user->getInTouch() ? $user->getInTouch() : array();
        //Connected ids // status : 3
        $userConnected = array();
        $userConnectedIds = array();
        //Already sent connection request // status : 1
        $userConnectionRequested = array();
        $userRequestedIds = array();
        //Received connection request // status : 2
        $userReceivedConnectionRequest = array();
        $userRequestIds = array();

        foreach ($userConnections as $uConnection) {
            if ($uConnection['status'] == 1) {
                $userRequestedIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 2) {
                $userRequestIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 3) {
                $userConnectedIds[] = $uConnection['id'];
            }
        }

        /* $userConnections = array_filter($userConnections, function($v) {
          return $v['status'] == 3;
          });
          $userConnectedIds = $this->array_column($userConnections, 'id'); */

        $q = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('validated')->equals(true);
        if ($user) {
            $q->field('id')->notEqual($user->getId());
        }

        if ($data->connection === 'direct') {
            $q->field('id')->in($userConnectedIds);
        }

        if ($data->connection === 'secondary') {
            $q->field('inTouch')->elemMatch(array('status' => 3, 'id' => array('$in' => $userConnectedIds)));
            $q->field('id')->notIn($userConnectedIds);
        }

        if ($data->connection === 'received') {
            $q->field('id')->in($userRequestedIds);
        }

        if ($data->connection === 'requested') {
            $q->field('id')->in($userRequestIds);
        }

        /* 2017-03-11
          if ($arrQueryCities) {
          $q->field('city')->in($arrQueryCities);
          }

          if ($arrQueryBasedCountries) {
          $q->field('basedCountry')->in($arrQueryBasedCountries);
          }

          if ($arrQueryRoles) {
          $q->field('companyType')->in($arrQueryRoles);
          }

          if ($arrQuerySubRoles) {
          $q->field('companySubType')->in($arrQuerySubRoles);
          }

          if ($arrQueryInterests) {
          $q->addAnd(
          $q->expr()->addOr(
          $q->expr()->field('keywords')->in($arrQueryInterests)
          )->addOr(
          $q->expr()->field('competences')->in($arrQueryInterests)
          )
          );
          }

          if ($arrQueryCompanies) {
          $q->field('companyPage.employee.company')->in($arrQueryCompanies);
          } */

        if ($arrQueries) {
            /* $q->addAnd(
              $q->expr()->addOr(
              $q->expr()->field('search')->all($arrQueries)
              )->addOr(
              $q->expr()->field('keywords')->all($arrQueries)
              )->addOr(
              $q->expr()->field('competences')->all($arrQueries)
              )->addOr(
              $q->expr()->field('companySubType')->all($arrQueries)
              )->addOr(
              $q->expr()->field('companyType')->all($arrQueries)
              )->addOr(
              $q->expr()->field('city')->all($arrQueries)
              )
              ); */

            /* $q->addAnd(
              $q->expr()
              ->addOr(
              $q->expr()->field('keywords')->all($arrQueries)
              )
              ->addOr(
              $q->expr()->field('city')->all($arrQueries)
              )
              ); */

            /* $q->addAnd(
              $q->expr()->field('keywords')->all($arrQueries)
              ); */

            /* $sQ = $dm->createQueryBuilder('DataBaseBundle:UserSearch')
              ->hydrate(false)
              ->select('userID')
              ->field('id')->notEqual($user->getId())
              ->field('validated')->equals(true)
              ->field('search')->all($arrQueries)
              ->getQuery()
              ->execute()
              ->toArray();

              $uIds = array();
              foreach ($sQ as $s) {
              $uIds[] = $s['userID'];
              }

              $q->field('id')->in($uIds); */
            $q->field('search')->all($arrQueries);
        }

        $count = $q->getQuery()->execute()->count();

        $limit = $user ? 20 : 100;
        $skip = 0;
        if (isset($data->skip) && $user) {
            $skip = $data->skip;
        }

        $temp = $q
                ->hydrate(false)
                ->select(array('id', 'username', 'name', 'lastname', 'avatar', 'cover', 'jobTitle', 'company', 'companyPage', 'city', 'basedCountry', 'miniResume', 'summary', 'keywords'))
                ->sort('profilePoints', -1)
                ->limit($limit)
                ->skip($skip * $limit)
                ->getQuery()
                ->execute();

        $mMC = new ManageMutualConnections($dm);
        $users = array();
        foreach ($temp as $dbuser) {
            $dbuser['id'] = $dbuser['_id']->{'$id'};
            unset($dbuser['_id']);
            $dbuser['isConnected'] = in_array($dbuser['id'], $userConnectedIds);
            $dbuser['isRequested'] = in_array($dbuser['id'], $userRequestedIds);
            $dbuser['isRequest'] = in_array($dbuser['id'], $userRequestIds);
            $arrMutualConnection = $mMC->getMutualConnections($user, $dbuser, false);
            $dbuser['mutualConnections'] = $arrMutualConnection;

            /* if (isset($dbuser['keywords']) && is_array($dbuser['keywords'])) {
              //$dbuser['keywords'] = array_values(array_udiff($dbuser['keywords'], array($dbuser['name'], $dbuser['lastname'], $dbuser['jobTitle'], $dbuser['company'], $dbuser['city']),'strcasecmp'));
              $dbuser['keywords'] = $this->filterKeywords($dbuser);
              } */

            $users[] = $dbuser;
        }
        return new JsonResponse(array('count' => $showCount ? $count : null, 'connections' => $users, 'isLoadableConnections' => ((($skip + 1) * $limit) < $count && $user)));
    }

    public function peopleDirectoryAction(Request $request, $startwith, $skip) {
        $limit = 99;
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $query = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('id', 'username', 'name', 'lastname')
                        ->field('name')->equals(new \MongoRegex("/^{$startwith}/i"))
                        ->field('validated')->equals(true);

        $count = $query->getQuery()->execute()->count();

        $users = $query->limit($limit)
                ->skip($skip * $limit)
                ->sort('name', 1)
                ->getQuery()
                ->execute()
                ->toArray();

        $result = array();
        foreach ($users as $id => $u) {
            $u['id'] = $id;
            unset($u["_id"]);
            $result[] = $u;
        }

        $hasNext = (($skip + 1) * $limit) < $count;
        $hasPrev = $skip > 0;

        return new JsonResponse(array('users' => $result, 'hasNext' => $hasNext, 'hasPrev' => $hasPrev));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Feature Company for connections page",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function companySuggestionsAction(Request $request) {

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $user = null;
        $raw_token = $request->headers->get('authorization');
        if (isset($raw_token)) {
            $token = substr($raw_token, strpos($raw_token, '.') + 1);
            $uData = json_decode(base64_decode(substr($token, 0, strpos($token, '.'))));
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $uData->username));
        }

        $companyPage = $user && $user->getCompanyPage() ? $user->getCompanyPage() : null;
        if ($companyPage && is_array($companyPage) && count($user->getCompanyPage()) > 0 && array_key_exists('employee', $companyPage)) {
            $companyUserName = $companyPage['employee']['company'];
            $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->hydrate(false)
                    ->select('id', 'username', 'name', 'companyPoints', 'followers', 'avatar', 'cover')
                    ->field('username')->equals($companyUserName)
                    ->sort('companyPoints', -1)
                    ->getQuery()
                    ->execute()
                    ->toArray();
        }

        $companies = $dm->createQueryBuilder('DataBaseBundle:Company')
                ->hydrate(false)
                ->select('id', 'username', 'name', 'companyPoints', 'followers', 'avatar', 'cover')
                ->limit(5)
                ->sort('companyPoints', -1)
                ->getQuery()
                ->execute()
                ->toArray();

        if (isset($company) && is_array($company) && is_array($companies)) {
            $companies = array_merge($company, $companies);
        }

        $arrCompanies = array();
        foreach ($companies as $id => $company) {
            $arrCompanies[] = array(
                'id' => $id,
                'username' => $company['username'],
                'name' => $company['name'],
                'followers' => is_array($company['followers']) ? count($company['followers']) : $company['followers'],
                'companyPoints' => $company['companyPoints'],
                'avatar' => isset($company['avatar']) ? $company['avatar'] : null,
                'cover' => isset($company['cover']) ? $company['cover'] : null
            );
        }

        return new JsonResponse($arrCompanies);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "Import Slack contacts"
     *     },
     * description="Import Slack Contacts",
     *  parameters={
     *  {
     *          "name"="contacts",
     *          "dataType"="file",
     *          "required"=true,
     *          "description"="linkedin csv file"
     *      }
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function importContactsAction(Request $request) {

        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $contacts = $request->get('contacts');
        $service = $request->get('service');

        $time = time();
        $countContacts = 0;
        $contactCount = count($contacts);

        if (is_array($contacts) && $contactCount > 0) {

            $importedConnections = $user->getImportedConnections() ? $user->getImportedConnections() : array();
            if (!isset($importedConnections[$service]) || (isset($importedConnections[$service]) && !$importedConnections[$service])) {
                $importedConnections[$service] = true;
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($user->getId())
                        ->field('importedConnections')->set($importedConnections)
                        ->getQuery()
                        ->execute();
            }

            /* $dm->createQueryBuilder('DataBaseBundle:User')
              ->update()
              ->multiple(false)
              ->field('id')->equals($user->getId())
              ->field('importedConnections.' . $service)->set(true)
              ->getQuery()
              ->execute(); */

            /* if(array_key_exists('service',$request->request->all()) && $request->get('service') == 'gmail'){
              $dm->createQueryBuilder('DataBaseBundle:User')
              ->update()
              ->multiple(false)
              ->field('id')->equals($user->getId())
              ->field('importedConnections.gmail')->set(true)
              ->getQuery()
              ->execute();
              } */

            $invitedContacts = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                    ->hydrate(false)
                    ->field("userID")->equals($user->getId())
                    ->field("provider")->equals($service)
                    ->select('email', 'userId')
                    ->getQuery()
                    ->execute()
                    ->toArray();


            $invitedEmails = $this->array_column($invitedContacts, 'email');

            $contactEmails = $this->array_column($contacts, 'email');

            $arrExistsUsers = array();
            $existsUsers = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'email', 'avatar', 'inTouchCounter', 'inBusinessRelationCounter', 'jobTitle', 'company')
                    ->field('email')->in($contactEmails)
                    ->getQuery()
                    ->execute()
                    ->toArray();

            foreach ($existsUsers as $u) {
                $u['id'] = (string) $u['_id'];
                unset($u['_id']);
                if (is_array($u) && array_key_exists('email', $u)) {
                    $arrExistsUsers[$u['email']] = $u;
                }
            }
            $arrExistsUserEmails = array_keys($arrExistsUsers);


            foreach ($contacts as $contact) {
                $isAlreadyExists = in_array($contact['email'], $arrExistsUserEmails);
                $isAlreadyInvited = in_array($contact['email'], $invitedEmails);

                if (!$isAlreadyInvited) {
                    $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                    ->insert()
                                    ->field("userID")->set($user->getId());




                    if (($service == 'gmail' || $service == 'slack') && array_key_exists('firstname', $contact) && !empty($contact['firstname'])) {
                        $q->field("firstname")->set($contact['firstname']);
                    }

                    if ($service == 'microsoft' && array_key_exists('first_name', $contact) && !empty($contact['first_name'])) {
                        $q->field("firstname")->set($contact['first_name']);
                    }

                    if (($service == 'gmail' || $service == 'slack') && array_key_exists('lastname', $contact) && !empty($contact['lastname'])) {
                        $q->field("lastname")->set($contact['lastname']);
                    }

                    if ($service == 'microsoft' && array_key_exists('last_name', $contact) && !empty($contact['last_name'])) {
                        $q->field("lastname")->set($contact['last_name']);
                    }

                    $q->field("email")->set($contact['email']);
                    $q->field("isInvited")->set(false);
                    $q->field("isAlreadyExists")->set($isAlreadyExists);
                    $q->field("provider")->set($service);
                    $q->field("createdDate")->set($time);
                    if ($isAlreadyExists) {
                        $usr = $arrExistsUsers[$contact['email']];
                        unset($usr['email']);
                        if (!array_key_exists('inTouchCounter', $usr)) {
                            $usr['inTouchCounter'] = 0;
                        }
                        $q->field("existingUser")->set($usr);
                    }
                    $q->getQuery()->execute();
                    $countContacts++;
                } else if ($isAlreadyInvited) {

                    $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                    ->update()
                                    ->multiple(false)
                                    ->field('userID')->equals($user->getId())
                                    ->field('email')->equals($contact['email'])
                                    ->field('provider')->equals($service)
                                    ->field('updateDate')->set($time)
                                    ->field("isAlreadyExists")->set($isAlreadyExists);

                    if ($isAlreadyExists) {
                        $usr = $arrExistsUsers[$contact['email']];
                        unset($usr['email']);
                        if (!array_key_exists('inTouchCounter', $usr)) {
                            $usr['inTouchCounter'] = 0;
                        }
                        $q->field("existingUser")->set($usr);
                    }
                    $q->getQuery()->execute();
                }
                $dm->flush();
                $dm->clear();
            }
        }

        $hasConnectionsToInvite = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->hydrate(false)
                ->field("userID")->equals($user->getId())
                ->field("provider")->equals($service)
                ->field("isInvited")->equals(false)
                ->select('email', 'userId')
                ->getQuery()
                ->execute()
                ->count();

        return new JsonResponse(array('success' => true, 'contacts_imported' => $countContacts, 'hasConnectionsToInvite' => $hasConnectionsToInvite));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "Import connections manually"
     *     },
     * description="Import connections manually",
     *  parameters={
     *  {
     *          "name"="contacts",
     *          "dataType"="file",
     *          "required"=true,
     *          "description"="linkedin csv file"
     *      }
     * },
     *  statusCodes={
     *         200="Returned when successful",
     *         401="When user token is invalid",
     *         404={
     *              "Returned when user not found",
     *              "Returned when something else not found"
     *         }
     *     }
     * )
     */
    public function importManuallyEmailContactsAction(Request $request) {

        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
        $util = new Utility();
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $contacts = $request->get('contacts');
        $service = $request->get('service');
        //$note = $request->get('note');
        $inTouch = $user->getInTouch();
        $arrInTouchIds = array();
        $noOfConnections = 0;
        $arrEmailsToInvite = array();
        $arrInTouchIds = array();
        if (!empty($inTouch)) {

            foreach ($inTouch as $int) {
                $arrInTouchIds[] = $int['id'];
                if ($int['status'] == 3) {
                    $noOfConnections++;
                }
            }

            $arrInTouchIds = $this->array_column($inTouch, 'id');
        }

        $arrContacts = array();
        $contectsArray = explode(",", $contacts);
        $contactEmails = array();
        foreach ($contectsArray as $email) {
            $pattern = '/<(.*?)>/';
            $pattern2 = '/:(.*?)/';
            $result = preg_split($pattern, $email, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
            if (!isset($result[1])) {
                $result = preg_split($pattern2, $email, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
            }
            if ((isset($result[0]) && strpos($result[0], '@')) !== false || (isset($result[1]) && strpos($result[1], '@') !== false)) {
                if (strpos($result[0], '@') !== false) {
                    $email = $result[0];
                    $name = isset($result[1]) ? str_replace('\"', '', $result[1]) : explode('@', $email)[0];
                } else {
                    $email = $result[1];
                    $name = isset($result[0]) ? str_replace('\"', '', $result[0]) : explode('@', $email)[0];
                }
                $email = $util->cleanStringSoft($email);
                if ($email != $user->getEmail()) {
                    $arrContacts[] = array('email' => $email, 'name' => $name);
                    $contactEmails[] = $email;
                }
            }
        }

        $time = time();
        $countContacts = 0;
        $contactCount = count($arrContacts);

        if (is_array($arrContacts) && $contactCount > 0) {
            $importedConnections = $user->getImportedConnections() ? $user->getImportedConnections() : array();
            if (!isset($importedConnections['email']) || (isset($importedConnections['email']) && !$importedConnections['email'])) {
                $importedConnections['email'] = true;
                $dm->createQueryBuilder('DataBaseBundle:User')
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($user->getId())
                        ->field('importedConnections')->set($importedConnections)
                        ->getQuery()
                        ->execute();
            }

            $invitedContacts = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                    ->hydrate(false)
                    ->field("userID")->equals($user->getId())
                    ->field("provider")->equals('email')
                    ->select('email', 'userId')
                    ->getQuery()
                    ->execute()
                    ->toArray();

            $invitedEmails = $this->array_column($invitedContacts, 'email');


            $arrExistsUsers = array();
            $existsUsers = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'name', 'lastname', 'jobTitle', 'company', 'miniResume', 'email', 'avatar', 'cover', 'inTouchCounter', 'inBusinessRelationCounter')
                    ->field('email')->in($contactEmails)
                    ->getQuery()
                    ->execute()
                    ->toArray();

            foreach ($existsUsers as $u) {
                $u['id'] = (string) $u['_id'];
                unset($u['_id']);
                if (is_array($u) && array_key_exists('email', $u)) {
                    $arrExistsUsers[$u['email']] = $u;
                }
            }
            $arrExistsUserEmails = array_keys($arrExistsUsers);


            //Email assets
            switch ($this->get('kernel')->getEnvironment()) {
                case 'adhoc':
                    $baseURL = 'https://cdn-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
                default:
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
            }

            $parts = parse_url($_SERVER['HTTP_REFERER']);
            $userProfileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';
            $inviteLink = 'https://' . $parts["host"] . "/signup/" . $user->getId();
            $manageConnectionLink = 'https://' . $parts["host"] . "/connections/direct";
            $userJobTitleCompany = $user->getJobTitle() && $user->getCompany() ? $user->getJobTitle() . ' at ' . $user->getCompany() : $user->getJobTitle();
            foreach ($arrContacts as $contact) {

                $isAlreadyExists = in_array($contact['email'], $arrExistsUserEmails);
                $isAlreadyInvited = in_array($contact['email'], $invitedEmails);

                if (!$isAlreadyInvited) {
                    $q = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                    ->insert()
                                    ->field("userID")->set($user->getId())
                                    ->field("firstname")->set($contact['name'])
                                    ->field("email")->set($contact['email'])
                                    ->field("isInvited")->set(true)
                                    ->field("isAlreadyExists")->set($isAlreadyExists)
                                    ->field("provider")->set('email')
                                    ->field("createdDate")->set($time);
                    if ($isAlreadyExists) {
                        $usr = $arrExistsUsers[$contact['email']];
                        unset($usr['email']);
                        if (!array_key_exists('inTouchCounter', $usr)) {
                            $usr['inTouchCounter'] = 0;
                        }
                        $q->field("existingUser")->set($usr);
                    }
                    $q->getQuery()->execute();

                    $countContacts++;

                    if ($isAlreadyExists) {

                        if (!in_array($usr['id'], $arrInTouchIds)) {
                            $inTouchContacts[] = array(
                                'id' => $usr['id'],
                                'username' => $usr['username'],
                                'name' => isset($usr['firstname']) ? $usr['firstname'] : null,
                                'lastname' => isset($usr['lastname']) ? $usr['lastname'] : null,
                                'avatar' => isset($usr['avatar']) ? $usr['avatar'] : null,
                                'cover' => isset($usr['cover']) ? $usr['cover'] : null,
                                'miniResume' => isset($usr['miniResume']) ? $usr['miniResume'] : null,
                                'jobTitle' => isset($usr['jobTitle']) ? $usr['jobTitle'] : null,
                                'company' => isset($usr['company']) ? $usr['company'] : null,
                                'status' => 3,
                                'date' => $time
                            );

                            $dm->createQueryBuilder('DataBaseBundle:User')
                                    ->update()
                                    ->multiple(false)
                                    ->field('_id')->equals($usr['id'])
                                    ->field('inTouch')->addToSet(
                                            array(
                                                'id' => $user->getId(),
                                                'username' => $user->getUsername(),
                                                'name' => $user->getName(),
                                                'lastname' => $user->getLastname(),
                                                'avatar' => $user->getAvatar(),
                                                'cover' => $user->getCover(),
                                                'miniResume' => $user->getMiniResume(),
                                                'jobTitle' => $user->getJobTitle(),
                                                'company' => $user->getCompany(),
                                                'status' => 3,
                                                'date' => $time
                                            ) // Status = 2 : Waiting to be validated
                                    )
                                    ->field("inTouchCounter")->inc(1)
                                    ->field('alertsNotifications')->inc(1)
                                    ->field('alerts')->push(array('$each' => array(array(
                                                'id' => $user->getId() . time(),
                                                'type' => 1,
                                                'read' => false,
                                                'action' => 'now connected with you.',
                                                'username' => $user->getUsername(),
                                                'name' => $user->getName(),
                                                'lastname' => $user->getLastname(),
                                                'avatar' => $user->getAvatar(),
                                                'date' => time() * 1000
                                            )), '$slice' => -90))
                                    ->field('updateDate')->set($time)
                                    ->upsert(false)
                                    ->getQuery()
                                    ->execute();
                        }

                        if ($this->get('kernel')->getEnvironment() == 'prod') {
                            //Custom note for invite email is remaining need to set in invite email var is $note its value "" when user didnt set anything
                            /*
                              $send_grid_options = array(
                              'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':url' => array('https://' . $parts["host"] . "/profile/" . $user->getUsername()), ':sender_img' => array($userProfileUrl)),
                              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_already_exists_contact_template_id'))))
                              );
                              $params = array(
                              'to' => $contact->email,
                              'from' => "noreply@mobintouch.com",
                              'fromname' => $user->name . " " . $user->lastname,
                              'subject' => $user->name . " " . $user->lastname . " is now on mobintouch",
                              'html' => " ",
                              'x-smtpapi' => json_encode($send_grid_options),
                              );
                              $this->sendgrid_mail($params);
                             */
                            //Intouch Request Mail remove from comment after confirmation
                            /* $parts = parse_url($_SERVER['HTTP_REFERER']);
                              $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                              $intouchLink = 'https://' . $parts["host"] . "/intouch";
                              $message = \Swift_Message::newInstance()
                              ->setSubject($user->getName() . ' sent you an intouch request')
                              ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                              ->setTo($contact->email)
                              ->setContentType("text/html")
                              ->setBody(
                              $this->renderView(
                              'APIBundle:Mail:intouchrequest.html.twig', array('title' => 'New inTouch request', 'baseURL' => 'https://cdn.mobintouch.com', 'user' => $user, 'profileLink' => $profileLink, 'intouchLink' => $intouchLink, 'unsubcribe' => 1)
                              )
                              );
                              $this->get('mailer')->send($message); */

                            //New template V2.0
                            /* $send_grid_options = array(
                              'sub' => array(':first_name' => array($contact['name']), ':contact_first_name' => array($user->name), ':contact_last_name' => array($user->lastname), ':contact_job_title' => array($user->jobTitle), ':contact_company_name' => array($user->company), ':contact_profile_link' => array('https://' . $parts["host"] . "/profile/" . $user->getUsername()), ':profile_picture_link' => array($userProfileUrl), ':manage_connections_link' => array($manageConnectionLink)),
                              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('template_your_contact_joined_id'))))
                              );
                              $params = array(
                              'to' => $contact->email,
                              'from' => "noreply@mobintouch.com",
                              'fromname' => $user->name . " " . $user->lastname,
                              'subject' => $user->name . " " . $user->lastname . ", one of your contact just joined Mobintouch",
                              'html' => " ",
                              'x-smtpapi' => json_encode($send_grid_options),
                              );
                              Utility::sendgrid_mail($params); */

                            //New Sendgrid v3 api
                            $params = array(
                                'personalizations' => array(
                                    array(
                                        'to' => array(
                                            array('email' => $contact->email)
                                        ),
                                        'substitutions' => array(
                                            ':logo_link' => 'https://' . $parts["host"],
                                            ':logo_name_link' => 'https://' . $parts["host"],
                                            ':first_name' => $contact['name'],
                                            ':contact_first_name' => $user->getName(),
                                            ':contact_last_name' => $user->getLastname(),
                                            ':contact_job_title_at_company' => $userJobTitleCompany,
                                            ':contact_profile_link' => 'https://' . $parts["host"] . "/profile/" . $user->getUsername(),
                                            ':profile_picture_link' => $userProfileUrl,
                                            ':manage_connections_link' => $manageConnectionLink
                                        )
                                    ),
                                ),
                                'from' => array(
                                    'email' => "noreply@mobintouch.com",
                                    'name' => $user->name . " " . $user->lastname
                                ),
                                'subject' => $user->name . " " . $user->lastname . ", one of your contact just joined Mobintouch",
                                'content' => array(array(
                                        'type' => 'text/html',
                                        'value' => ' '
                                    )
                                ),
                                'template_id' => $this->container->getParameter('template_your_contact_joined_id'),
                                'asm' => array(
                                    'group_id' => $this->container->getParameter('group_contact_joined')
                                )
                            );

                            Utility::sendgrid_mail(json_encode($params));
                        }
                    } else {
                        if ($this->get('kernel')->getEnvironment() == 'prod') {
                            //Old mail code need to remove one added new onw on prod it is on comment 
                            /*
                              $send_grid_options = array(
                              'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':token' => array($user->getId()), ':sender_img' => array($userProfileUrl)),
                              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_invitation_template_id')))),
                              );
                              $params = array(
                              'to' => $contact->email,
                              'from' => "noreply@mobintouch.com",
                              'fromname' => $user->name . " " . $user->lastname,
                              'subject' => "Join me on mobintouch.com",
                              'html' => " ",
                              'x-smtpapi' => json_encode($send_grid_options),
                              );
                              $this->sendgrid_mail($params);
                             * 
                             */
                            //New template V2.0
                            /* $send_grid_options = array(
                              'sub' => array(':recipient_first_name' => array($contact['name']), ':sender_first_name' => array($user->name), ':sender_last_name' => array($user->lastname), ':sender_job_title' => array($user->jobTitle), ':sender_company_name' => array($user->company), ':token' => array($user->getId()), ':sender_invitation_link' => array($inviteLink), ':sender_picture_link' => array($userProfileUrl), ':sender_number_connections' => array($noOfConnections)),
                              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('template_invite_id')))),
                              );
                              $params = array(
                              'to' => $contact->email,
                              'from' => "noreply@mobintouch.com",
                              'fromname' => $user->name . " " . $user->lastname,
                              'subject' => $contact['name'] . ", please accept my invitation to Mobintouch ",
                              'html' => " ",
                              'x-smtpapi' => json_encode($send_grid_options),
                              );
                              Utility::sendgrid_mail($params); */
                            //New sendgrid v3 
                            $params = array(
                                'personalizations' => array(
                                    array(
                                        'to' => array(
                                            array('email' => $contact->email)
                                        ),
                                        'substitutions' => array(
                                            ':logo_link' => 'https://' . $parts["host"],
                                            ':logo_name_link' => 'https://' . $parts["host"],
                                            ':recipient_first_name' => $contact['name'],
                                            ':sender_first_name' => $user->getName(),
                                            ':sender_last_name' => $user->getLastname(),
                                            ':sender_job_title_at_company' => $userJobTitleCompany,
                                            ':sender_invitation_link' => $inviteLink,
                                            ':sender_picture_link' => $userProfileUrl,
                                            ':sender_number_connections' => "$noOfConnections"
                                        )
                                    ),
                                ),
                                'from' => array(
                                    'email' => "noreply@mobintouch.com",
                                    'name' => $user->getName() . " " . $user->getLastname()
                                ),
                                'subject' => $contact['name'] . ", please accept my invitation to Mobintouch",
                                'content' => array(array(
                                        'type' => 'text/html',
                                        'value' => ' '
                                    )
                                ),
                                'template_id' => $this->container->getParameter('template_invite_id'),
                                'asm' => array(
                                    'group_id' => $this->container->getParameter('group_invite')
                                )
                            );
                            Utility::sendgrid_mail(json_encode($params));
                        }
                    }
                }
            }
        }

        if (!empty($inTouch)) {
            $util->imitateMerge($inTouchContacts, $inTouch);
        }

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('inTouch')->set($inTouchContacts)
                ->field('inTouchCounter')->set(count($inTouchContacts))
                ->field('updateDate')->set($time)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();

        return new JsonResponse(array('success' => true, 'contacts_imported' => $countContacts));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function connectionNotNowAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $data = json_decode($request->getContent());

        if (!isset($data->userId)) {
            throw new NotFoundHttpException();     // 404
        }

        $viewUser = $dm->getRepository('DataBaseBundle:User')->find($data->userId);
        if (!$viewUser) {
            throw new NotFoundHttpException();     // 404
        }
        $time = time();
        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field("notNow")->addToSet(array(
                    'id' => $viewUser->getId(),
                    'username' => $viewUser->getUsername(),
                    'date' => $time,
                    'expiryDate' => strtotime("+7 days", $time),
                ))
                ->field('updateDate')->set($time)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear();

        $notNow = $user->getNotNow();

        $notNow[] = array(
            'id' => $viewUser->getId(),
            'username' => $viewUser->getUsername(),
            'date' => $time,
            'expiryDate' => strtotime("+1 minutes", $time),
        );



        $user->setNotNow($notNow);
        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /*  public function listInTouchAction(Request $request)
      {

      // Get the User
      $result = array();
      $user = $this->getCurrentUser();

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }else{

      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $userId = $request->userId;

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      $list = $dm->createQueryBuilder('DataBaseBundle:inTouch');
      $list->addOr($list->expr()->field('userID1')->equals($user->getId()))
      ->addOr($list->expr()->field('userID2')->equals($user->getId()));
      $list = $list->getQuery()
      ->execute();

      if($list){

      $myUserID = $user->getId();

      // update DATABASE
      $dm->createQueryBuilder('DataBaseBundle:User')
      // Find the Campaign
      ->update()
      ->multiple(false)
      ->field('_id')->equals($myUserID)

      // Update found Campaign
      ->field("inTouch.$userId")->set(array('_id' => $userId, 'status' => 1, 'date' => time())) // Status = 1 : SENT Request

      // Options
      ->upsert(false)
      ->getQuery()
      ->execute();


      // update DATABASE
      $dm->createQueryBuilder('DataBaseBundle:User')
      // Find the Campaign
      ->update()
      ->multiple(false)
      ->field('_id')->equals($userId)

      // Update found Campaign
      ->field("inTouch.$myUserID")->set(array('_id' => $myUserID, 'status' => 2, 'date' => time())) // Status = 2 : Waiting to be validated

      // Options
      ->upsert(false)
      ->getQuery()
      ->execute();


      // update DATABASE
      $dm->createQueryBuilder('DataBaseBundle:inTouch')
      // Find the Campaign
      ->update()
      ->multiple(false)
      ->field('userID1')->equals($myUserID)
      ->field('userID2')->equals($userId)

      // Update found Campaign
      ->field("user1")->set(array('_id' => $myUserID, 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany())) // Status = 2 : Waiting to be validated
      ->field("user2")->set(array('_id' => $userId, 'name' => $view->getName(), 'lastname' => $view->getLastname(), 'username' => $view->getUsername(), 'avatar' => $view->getAvatar(), 'jobTitle' => $view->getJobTitle(), 'company' => $view->getCompany())) // Status = 2 : Waiting to be validated
      ->field("date")->set(time()) // Status = 2 : Waiting to be validated
      ->field("status")->set(2) // Status = 2 : Waiting to be validated

      // Options
      ->upsert(false)
      ->getQuery()
      ->execute();


      $result = array('_id' => $userId, 'status' => 1, 'date' => time());


      }else{
      throw new NotFoundHttpException();     // 404
      }
      }

      return new JsonResponse($result);

      } */

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function resetNotificationsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(true)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field("alertsNotifications")->set(0)
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $alerts = $user->getAlerts();
            if (count($alerts) > 0) {
                foreach ($alerts as $index => $alert) {
                    $alerts[$index]['read'] = true;
                }
                $user->setAlerts($alerts);
            }

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function resetOffersNotificationsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');


// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field("updateDate")->set(time())
                    ->field("lastOffersCounter")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse(true);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function firstProfileVisitAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field("hasVisitedOwnProfile")->set(true)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function firstProfileEditAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {


            $companyPage = $user->getCompanyPage();
            if ($companyPage) {
                if (array_values($companyPage) === $companyPage) {
                    $companyPage['employee'] = $companyPage[0];
                    unset($companyPage[0]);
                }
            }



// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
// Update found Campaign
                    ->field('companyPage')->set($companyPage)
                    ->field("hasEditedOwnProfile")->set(true)
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "user",
     *     },
     *  description="Update notification read status",
     *  parameters={
     *      {"name"="alertID", "dataType"="string", "required"=true, "description"="Alert notification id"},
     *  },
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function readNotificationAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        $alerts = array();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $alertID = $request->alertID;

            $alerts = $user->getAlerts();
            foreach ($alerts as $key => $alert) {
                if ($alert['id'] == $alertID) {
                    $alerts[$key]['read'] = true;
                    break;
                }
            }

            $user->setAlerts($alerts);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($alerts);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function linkedinAuthAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();
        $accessToken = null;
        if (!$user instanceof User) {
            throw new NotFoundHttpException();  // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);
            $redirectBase = $request->redirectBase;
            /* for server */
            $client_id = "77qs31x0xkh7tz";
            $client_secret = "fzruvzqCLHPUrWE0";
            $redirect_uri = $redirectBase . '/edit/profile';

            /* for local 
              $client_id="75hu5mydytl4vt";
              $client_secret="OB84oCLrjQKR9C3e";
              //$redirect_uri = $redirectBase.'/mobntouch/src/offers/all'; */

// Get POST parameters
            $code = $request->code; // ""AQS_tExsZECXFg3NdqQCs-pgPwbGyuM4gRIrKZ37-WADF35UY-cR3uZIvrnlR3jiXyCQ8NMKx6MP-315B6LT1pHUn6gPo29fc7KnMlfVxK33GqB2poA""
            $access_token = '';
            $getURL = "https://www.linkedin.com/uas/oauth2/accessToken";
            $params = array(
                'grant_type' => 'authorization_code',
                'client_id' => $client_id,
                'client_secret' => $client_secret,
                'code' => $code,
                'redirect_uri' => $redirect_uri,
            );

            $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);
            $context = stream_context_create(
                    array('http' =>
                        array('method' => 'POST',
                        )
                    )
            );

            $response = file_get_contents($url, true, $context);
            $token = json_decode($response);
            $access_token = $token->access_token;
            if (isset($token->access_token)) {
                $accessToken = $token->access_token;
                $user->setHasSyncLinkedin(true);
                $user->setLinkedInAccessToken($accessToken);
                $user->setLinkedInAccessTokenDate(time());
            } else {
                $accessToken = $user->getLinkedInAccessToken();
            }

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            return new JsonResponse($accessToken);
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function linkedinProfileAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

            $accessToken = $user->getLinkedInAccessToken();

// PERSONAL INFORMATIONS

            $connectionsURL = "https://api.linkedin.com/v1/people/~:(id,picture-url,picture-urls::(original),summary,positions,languages,skills,date-of-birth,public-profile-url)?oauth2_access_token=" . $accessToken . "&format=json"; // WORKS OK WITH HEADER AUTHORIZATION

            $getch = curl_init();
            curl_setopt($getch, CURLOPT_URL, $connectionsURL);
            curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($getch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                    // 'Authorization: Bearer ' . $accessToken, // WORKS OK
            ));
            curl_setopt($getch, CURLOPT_HEADER, true);
// allow redirects
            curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
// return a response into a variable
            curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
// times out after 30s
            curl_setopt($getch, CURLOPT_TIMEOUT, 30);
// set POST method
            curl_setopt($getch, CURLOPT_POST, 0);
// add POST fields parameters
//curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

            $JSONresponse = curl_exec($getch);
            curl_close($getch);

            $JSONresponse = strstr($JSONresponse, '{');
            $response = json_decode($JSONresponse);

//if(isset($response->status) and $response->status==401) throw new AccessDeniedHttpException(); // 403
// GET LINKED IN SUMMARY
            if (isset($response->summary) and $response->summary != null)
                $user->setSummary($response->summary);

// GET LINKED PUBLIC PROFILE URL
            if (isset($response->publicProfileUrl))
                $user->setLinkedin($response->publicProfileUrl);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            if (isset($response->status) and $response->status == 401) {

                $user->setHasSyncLinkedin(false);
                $user->setLinkedInAccessTokenDate(0);

                $dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
//return new JsonResponse($response);

                throw new AccessDeniedHttpException(); // 403
            }

// GET LINKED IN ID
            $user->setLinkedinID($response->id);

// GET LINKED IN DATE OF BIRTH
            if (isset($response->dateOfBirth)) {
                $user->setBirthdayDD(str_pad($response->dateOfBirth->day, 2, '0', STR_PAD_LEFT));
                $user->setBirthdayMM(str_pad($response->dateOfBirth->month, 2, '0', STR_PAD_LEFT));
                $user->setBirthdayYYYY($response->dateOfBirth->year);
            }

// GET LINKED IN LANGUAGES
            if (isset($response->languages) and isset($response->languages->values)) {
                $languages = array();
                foreach ($response->languages->values as $l) {
                    $languages[] = $l->language->name;
                }
                if ($user->getLanguages()) {
                    $user->setLanguages(array_unique(array_merge($user->getLanguages(), $languages)));
                } else {
                    $user->setLanguages($languages);
                }
            }

// GET LINKED IN SKILLS
            if (isset($response->skills) and isset($response->skills->values)) {
                $skills = array();
                foreach ($response->skills->values as $s) {
                    $skills[] = $s->skill->name;
                }
                if ($user->getCompetences()) {
                    $user->setCompetences(array_unique(array_merge($user->getCompetences(), $skills), SORT_STRING));
                } else {
                    $user->setCompetences($skills);
                }
            }


            if (isset($response->pictureUrls->values[0]) && !$user->getAvatar()) {

                $env = $this->get('kernel')->getEnvironment();
                if ($env == 'dev')
                    $copypath = "/../../angular/src/cdn/img/profile/avatars/";
                else
                    $copypath = "/../../web/src/cdn/img/profile/avatars/";
                $realpath = "/img/profile/avatars/";
                $manageAvatarAndCover = new ManageAvatarAndCover($dm);
                $manageAvatarAndCover->setProfileAvatarCopyPath($copypath);
                $manageAvatarAndCover->setProfileAvatarRealPath($realpath);
                $imageName = $user->getUsername();
                $avatar = $manageAvatarAndCover->uploadAvatarOrCover($response->pictureUrls->values[0], $imageName, 'avatar', 'profile', true, 'url');
                /*
                  $env = $this->get('kernel')->getEnvironment();
                  if ($env == 'dev')
                  $copypath = "/../../angular/src/cdn/img/profile/avatars/";
                  else
                  $copypath = "/../../web/src/cdn/img/profile/avatars/";
                  $realpath = "/img/profile/avatars/";

                  $root = getcwd();
                  $originalFilename = $user->getUsername() . '-original.jpeg';
                  $avatarFilename = $user->getUsername() . '.jpeg';
                  $fp = fopen($root . $copypath . $originalFilename, "w");
                  fwrite($fp, file_get_contents($response->pictureUrls->values[0]));
                  fclose($fp);

                  //exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 128x128 -quality 100 '.getcwd().$copypath.$avatarFilename);
                  exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $avatarFilename);

                  $time = time();
                  $avatar = $realpath . $avatarFilename . '?' . $time;
                 * 
                 */
                $user->setAvatar($avatar);
                $user->setUpdateDate(time());
                $dm->flush();
                $dm->clear();
                $manageAvatarAndCover->updateAllDocumentsProfileAvatar($user);

                /*
                  if ($avatar) {
                  // UPDATE FEED AVATAR
                  // WE MUST INVEST TIME TO REFACTOR THIS!!!!!!

                  $dm->createQueryBuilder('DataBaseBundle:Update')
                  // Find the Campaign
                  ->update()
                  ->multiple(true)
                  ->field('userID')->equals($user->getId())

                  // Update found Campaign
                  ->field("userAvatar")->set($avatar)

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->createQueryBuilder('DataBaseBundle:Update')
                  // Find the Campaign
                  ->update()
                  ->multiple(true)
                  ->field('inTouchID')->equals($user->getId())

                  // Update found Campaign
                  ->field("inTouchAvatar")->set($avatar)

                  // Options
                  ->upsert(false)
                  ->getQuery()
                  ->execute();

                  $dm->flush();
                  $dm->clear(); // Detaches all objects from Doctrine!
                  }
                 */
            }

// GET LINKED IN EXPERIENCES
            $myCompany = array();
            $myCompanyIDs = array();

            if (isset($response->positions) and isset($response->positions->values)) {
                $experiences = array();
                if ($user->getExperiences())
                    $experiences = $user->getExperiences();

                foreach ($response->positions->values as $p) {
                    if (isset($p->company->id))
                        $myCompanyIDs[] = $p->company->id;
                    if ($p->isCurrent)
                        $myCompany[] = isset($p->company->name) ? $p->company->name : 'Self-employed';

                    $new = true;

                    foreach ($experiences as $exp) {
                        if (isset($p->id) and isset($exp['id']) and $exp['id'] == $p->id) {
                            $new = false;
                            break;
                        }
                    }

                    if ($new) {
                        $experiences[] = array(
                            'id' => $p->id,
                            'company' => isset($p->company->name) ? $p->company->name : 'Self-employed',
                            'jobtitle' => $p->title,
                            //'fromperiod' => isset($p->startDate)?intval(strtotime("01-".$p->startDate->month."-".$p->startDate->year)*1000):null,
//'toperiod' => isset($p->endDate)?intval(strtotime("01-".$p->endDate->month."-".$p->endDate->year)*1000):null,
                            'fromperiod' => isset($p->startDate) ? $p->startDate->year . "-" . str_pad($p->startDate->month, 2, '0', STR_PAD_LEFT) . "-01T12:00:00.000Z" : null, //2015-04-02T22:00:00.000Z
                            'toperiod' => isset($p->endDate) ? $p->endDate->year . "-" . str_pad($p->endDate->month, 2, '0', STR_PAD_LEFT) . "-01T12:00:00.000Z" : null, //2015-04-02T22:00:00.000Z
                            'currently' => $p->isCurrent,
                            'description' => isset($p->summary) ? $p->summary : null
                        );
                    }

//if($p->company->name=='Qolle.com') return new JsonResponse(array("response"=> $response, "startdate" => $p->startDate, "enddate"=>$p->endDate, "string startdate"=>strtotime("01-".$p->startDate->month."-".$p->startDate->year), "string enddate"=> strtotime("01-".$p->endDate->month."-".$p->endDate->year)*1000));
                }

//if($user->getExperiences()) $user->setExperiences(array_unique(array_merge($user->getExperiences(), $experiences), SORT_REGULAR));
//else $user->setExperiences($experiences);
                $user->setExperiences($experiences);
            }
//return new JsonResponse($response);
            $user->setLinkedInCompanies($myCompany);
            $user->setLinkedInCompaniesID($myCompanyIDs);
// Set up database


            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// GET LINKED IN CONNECTIONS
            /*
              $connectionsURL = "https://api.linkedin.com/v1/people/~:(id,first-name,last-name,headline,location,industry)?format=json"; // WORKS OK WITH HEADER AUTHORIZATION

              $getch = curl_init();
              curl_setopt($getch, CURLOPT_URL, $connectionsURL);
              curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
              curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
              curl_setopt($getch, CURLOPT_HTTPHEADER, array(
              'Content-Type: application/json',
              'Authorization: Bearer ' . $accessToken, // WORKS OK
              ));
              curl_setopt($getch, CURLOPT_HEADER, true);
              // allow redirects
              curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
              // return a response into a variable
              curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
              // times out after 30s
              curl_setopt($getch, CURLOPT_TIMEOUT, 30);
              // set POST method
              curl_setopt($getch, CURLOPT_POST, 0);
              // add POST fields parameters
              //curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

              $JSONresponse = curl_exec($getch);

              curl_close($getch);

              //$email  = 'name@example.com';

              $JSONresponse = strstr($JSONresponse, '{');
              //echo $domain; // mostrará @example.com
              //$JSONresponse = strstr($JSONresponse, '{', true); // Desde PHP 5.3.0
              //echo $user; // mostrará name

              $response = json_decode($JSONresponse);
             * 
             */
            /*
              $connections = $response->positions->values;

              $arraySameCompany = array();
              $arrayIndustryMarketingAdvertising = array();
              $arrayOthersGoodIndustries = array();

              //$myCompanyIDs = array(2639290, 3476086);
              $allowedIndustries = array("Marketing and Advertising", "Online Media", "Internet", "Wireless", "Gambling & Casinos", "Computer Games", "Computer Software");

              foreach ($connections as $connection) {

              if ($user->getLinkedInInvites() != null and in_array($connection->id, $user->getLinkedInInvites())) {
              // DO NOT ADD THIS PERSON AGAIN
              } else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries)) {
              if (!$this->alreadyLinkedInSync($connection->id, $connection->lastName, $myCompany)) {
              $currentCompany = false;
              if (isset($connection->positions) and isset($connection->positions->values)) {
              foreach ($connection->positions->values as $position) {
              if (isset($position->company->id) and in_array($position->company->id, $myCompanyIDs)) {
              $currentCompany = true;
              $arraySameCompany[] = $connection;
              break;
              }
              }
              }
              if (!$currentCompany) {
              if (isset($connection->industry) and $connection->industry == "Marketing and Advertising")
              $arrayIndustryMarketingAdvertising[] = $connection;
              else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries))
              $arrayOthersGoodIndustries[] = $connection;
              }
              }
              }
              }
             */

// GET LINKED IN CONNECTIONS
            /*
              $connectionsURL = "https://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,headline,picture-url,industry,positions)?format=json"; // WORKS OK WITH HEADER AUTHORIZATION

              $getch = curl_init();
              curl_setopt($getch, CURLOPT_URL, $connectionsURL);
              curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
              curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
              curl_setopt($getch, CURLOPT_HTTPHEADER, array(
              'Content-Type: application/json',
              'Authorization: Bearer ' . $accessToken, // WORKS OK
              ));
              curl_setopt($getch, CURLOPT_HEADER, true);
              // allow redirects
              curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
              // return a response into a variable
              curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
              // times out after 30s
              curl_setopt($getch, CURLOPT_TIMEOUT, 30);
              // set POST method
              curl_setopt($getch, CURLOPT_POST, 0);
              // add POST fields parameters
              //curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

              $JSONresponse = curl_exec($getch);

              curl_close($getch);

              //$email  = 'name@example.com';

              $JSONresponse = strstr($JSONresponse, '{');
              //echo $domain; // mostrará @example.com
              //$JSONresponse = strstr($JSONresponse, '{', true); // Desde PHP 5.3.0
              //echo $user; // mostrará name

              $response = json_decode($JSONresponse);
              $connections = $response->values;

              $arraySameCompany = array();
              $arrayIndustryMarketingAdvertising = array();
              $arrayOthersGoodIndustries = array();

              //$myCompanyIDs = array(2639290, 3476086);
              $allowedIndustries = array("Marketing and Advertising", "Online Media", "Internet", "Wireless", "Gambling & Casinos", "Computer Games", "Computer Software");

              foreach ($connections as $connection) {

              if ($user->getLinkedInInvites() != null and in_array($connection->id, $user->getLinkedInInvites())) {
              // DO NOT ADD THIS PERSON AGAIN
              } else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries)) {
              if (!$this->alreadyLinkedInSync($connection->id, $connection->lastName, $myCompany)) {
              $currentCompany = false;
              if (isset($connection->positions) and isset($connection->positions->values)) {
              foreach ($connection->positions->values as $position) {
              if (isset($position->company->id) and in_array($position->company->id, $myCompanyIDs)) {
              $currentCompany = true;
              $arraySameCompany[] = $connection;
              break;
              }
              }
              }
              if (!$currentCompany) {
              if (isset($connection->industry) and $connection->industry == "Marketing and Advertising")
              $arrayIndustryMarketingAdvertising[] = $connection;
              else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries))
              $arrayOthersGoodIndustries[] = $connection;
              }
              }
              }
              }
             */
            $timing = strtotime("-1 hour");

            $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('userID')->equals($user->getId())
                            ->field('action')->equals('sync')
                            ->field('date')->gte($timing)
                            ->getQuery()->execute()->count();

            if ($updateFeed == 0) {

                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->insert()
                        ->field("date")->set(time())
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set(intval(1))
                        ->field("filter")->set('professional')
                        ->field("action")->set('sync')
                        ->field("likesCounter")->set(intval(0))
                        ->field("commentsCounter")->set(intval(0))
                        ->field("liked")->set(array())
                        ->field("isLike")->set(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }

            $arraySameCompany = array();
            $arrayIndustryMarketingAdvertising = array();
            $arrayOthersGoodIndustries = array();
            return new JsonResponse(array("user" => $user, "connections" => array_merge($arraySameCompany, $arrayIndustryMarketingAdvertising, $arrayOthersGoodIndustries), "linkedInAccessTokenDate" => $user->getLinkedInAccessTokenDate()));
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function linkedinConnectionsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        $accessToken = null;
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $code = $request->code; // ""AQS_tExsZECXFg3NdqQCs-pgPwbGyuM4gRIrKZ37-WADF35UY-cR3uZIvrnlR3jiXyCQ8NMKx6MP-315B6LT1pHUn6gPo29fc7KnMlfVxK33GqB2poA""
            $redirectBase = $request->redirectBase;
            $redirect_uri = $redirectBase . '/invite-contacts';

            if ($code != 'alreadyLoggedin') {

                $getURL = "https://www.linkedin.com/uas/oauth2/accessToken";
                $getQuery = "grant_type=authorization_code&code=" . $code . "&redirect_uri=$redirect_uri&client_id=77qs31x0xkh7tz&client_secret=fzruvzqCLHPUrWE0";

                $getch = curl_init();
                /* set url to send post request */
                curl_setopt($getch, CURLOPT_URL, $getURL);
                /* allow redirects */
                curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
                /* return a response into a variable */
                curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
                /* times out after 30s */
                curl_setopt($getch, CURLOPT_TIMEOUT, 30);
                /* set POST method */
                curl_setopt($getch, CURLOPT_POST, 1);
                /* add POST fields parameters */
                curl_setopt($getch, CURLOPT_POSTFIELDS, $getQuery); // Set the request as a POST FIELD for curl.
//Execute cUrl session
                $JSONresponse = curl_exec($getch);

                $response = json_decode($JSONresponse);
                curl_close($getch);
                if (isset($response->access_token)) {
                    $user->setHasSyncLinkedin(true);
                    $accessToken = $response->access_token;
                    $user->setLinkedInAccessToken($accessToken);
                    $user->setLinkedInAccessTokenDate(time());
                } else
                    $accessToken = $user->getLinkedInAccessToken();


// PERSONAL INFORMATIONS

                $connectionsURL = "https://api.linkedin.com/v1/people/~:(id,picture-url,summary,positions,languages,skills,date-of-birth,public-profile-url)?format=json"; // WORKS OK WITH HEADER AUTHORIZATION

                $getch = curl_init();
                curl_setopt($getch, CURLOPT_URL, $connectionsURL);
                curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
                curl_setopt($getch, CURLOPT_HTTPHEADER, array(
                    'Content-Type: application/json',
                    'Authorization: Bearer ' . $accessToken, // WORKS OK
                ));
                curl_setopt($getch, CURLOPT_HEADER, true);
// allow redirects
                curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
// return a response into a variable
                curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
// times out after 30s
                curl_setopt($getch, CURLOPT_TIMEOUT, 30);
// set POST method
                curl_setopt($getch, CURLOPT_POST, 0);
// add POST fields parameters
//curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

                $JSONresponse = curl_exec($getch);
                curl_close($getch);

                $JSONresponse = strstr($JSONresponse, '{');
                $response = json_decode($JSONresponse);

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

                if (isset($response->status) and $response->status == 401) {

                    $user->setHasSyncLinkedin(false);
                    $user->setLinkedInAccessTokenDate(0);

                    $dm->persist($user);
                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!

                    throw new AccessDeniedHttpException(); // 403
                }

// GET LINKED IN ID
                $user->setLinkedinID($response->id);

// GET LINKED IN EXPERIENCES
                $myCompany = array();
                $myCompanyIDs = array();

                if (isset($response->positions) and isset($response->positions->values)) {
                    foreach ($response->positions->values as $p) {
                        if (isset($p->company->id))
                            $myCompanyIDs[] = $p->company->id;
                        if ($p->isCurrent)
                            $myCompany[] = $p->company->name;
                    }
                }

                $user->setLinkedInCompanies($myCompany);
                $user->setLinkedInCompaniesID($myCompanyIDs);
            } else {
                $accessToken = $user->getLinkedInAccessToken();
                $myCompany = $user->getLinkedInCompanies();
                $myCompanyIDs = $user->getLinkedInCompaniesID();
            }

            if ($myCompany == null)
                $myCompany = array();
            if ($myCompanyIDs == null)
                $myCompanyIDs = array();

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// GET CONNECTIONS

            $connectionsURL = "https://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,headline,picture-url,industry,positions)?format=json"; // WORKS OK WITH HEADER AUTHORIZATION

            $getch = curl_init();
            curl_setopt($getch, CURLOPT_URL, $connectionsURL);
            curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
            curl_setopt($getch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                'Authorization: Bearer ' . $accessToken, // WORKS OK
            ));
            curl_setopt($getch, CURLOPT_HEADER, true);
// allow redirects
            curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
// return a response into a variable
            curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
// times out after 30s
            curl_setopt($getch, CURLOPT_TIMEOUT, 30);
// set POST method
            curl_setopt($getch, CURLOPT_POST, 0);
// add POST fields parameters
//curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

            $JSONresponse = curl_exec($getch);


            curl_close($getch);

//$email  = 'name@example.com';

            $JSONresponse = strstr($JSONresponse, '{');
//echo $domain; // mostrará @example.com
//$JSONresponse = strstr($JSONresponse, '{', true); // Desde PHP 5.3.0
//echo $user; // mostrará name

            $response = json_decode($JSONresponse);
// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            if (isset($response->status) and $response->status == 401) {

                $user->setHasSyncLinkedin(false);
                $user->setLinkedInAccessTokenDate(0);

                $dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!

                throw new AccessDeniedHttpException(); // 403
            }

            if (isset($response->values))
                $connections = $response->values;
            else
                $connections = array();

            $arraySameCompany = array();
            $arrayIndustryMarketingAdvertising = array();
            $arrayOthersGoodIndustries = array();

            $allowedIndustries = array("Marketing and Advertising", "Online Media", "Internet", "Wireless", "Gambling & Casinos", "Computer Games", "Computer Software");

            foreach ($connections as $connection) {

                if ($user->getLinkedInInvites() != null and in_array($connection->id, $user->getLinkedInInvites())) {
// DO NOT ADD THIS PERSON AGAIN
                } else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries)) {
                    if (!$this->alreadyLinkedInSync($connection->id, $connection->lastName, $myCompany)) {
                        $currentCompany = false;
                        if (isset($connection->positions) and isset($connection->positions->values)) {
                            foreach ($connection->positions->values as $position) {
                                if (isset($position->company->id) and in_array($position->company->id, $myCompanyIDs)) {
                                    $currentCompany = true;
                                    $arraySameCompany[] = $connection;
                                    break;
                                }
                            }
                        }
                        if (!$currentCompany) {
                            if (isset($connection->industry) and $connection->industry == "Marketing and Advertising")
                                $arrayIndustryMarketingAdvertising[] = $connection;
                            else if (isset($connection->industry) and in_array($connection->industry, $allowedIndustries))
                                $arrayOthersGoodIndustries[] = $connection;
                        }
                    }
                }
            }


            return new JsonResponse(array("connections" => array_merge($arraySameCompany, $arrayIndustryMarketingAdvertising, $arrayOthersGoodIndustries), "linkedInAccessTokenDate" => $user->getLinkedInAccessTokenDate()));
        }

        return new JsonResponse($accessToken);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function linkedinSendMessageAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        $accessToken = null;
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $users = $request->users;
            $messageSubject = $request->messageSubject;
            $messageText = $request->messageText;

            $accessToken = $user->getLinkedInAccessToken();

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// MAILBOX

            $mailboxURL = "https://api.linkedin.com/v1/people/~/mailbox?format=json";

            /* THIS JSON WORKS!

              $json = '{"recipients": {"values": [{"person": {';
              $json .= '"_path": "/people/i6q-qGCjdE"';
              $json .= '}}]},';
              $json .= '"subject": "Mobintouch - Invitation to connect.",';
              $json .= '"body": "Say yes!"';
              $json .= '}';
             */

            $skip = 1;
            $limit = 1;
            $last = count($users);
            $currentInvites = array();

            $getch = curl_init();

            $messageText = str_replace("\n", "\\n", $messageText);

            $json = '{"subject": "' . $messageSubject . '",';
            $json .= '"body": "' . $messageText . '",';
            $json .= '"recipients": {"values": [';

            $tempjson = "";

            foreach ($users as $key => $userid) {
//$userid = 'i6q-qGCjdE';
                $currentInvites[] = $userid;

                if ($key + 1 == $last or ( $key + 1) / $skip >= $limit) {
                    $tempjson .= '{"person": {"_path": "/people/' . $userid . '"}}';
                    $tempjson .= ']}}';


                    curl_setopt($getch, CURLOPT_URL, $mailboxURL);
                    curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
                    curl_setopt($getch, CURLOPT_HTTPHEADER, array(
                        'Content-Type: application/json',
                        'Authorization: Bearer ' . $accessToken, // WORKS OK
                    ));
                    curl_setopt($getch, CURLOPT_HEADER, true);
// allow redirects
                    curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
// return a response into a variable
                    curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
// times out after 30s
                    curl_setopt($getch, CURLOPT_TIMEOUT, 30);
// set POST method
                    curl_setopt($getch, CURLOPT_POST, 1);
// add POST fields parameters
                    curl_setopt($getch, CURLOPT_POSTFIELDS, $json . $tempjson); // Set the request as a POST FIELD for curl.

                    $JSONresponse = curl_exec($getch);

//$response = json_decode($JSONresponse);

                    $findme = '1.1 201 Created';
                    $pos = strpos($JSONresponse, $findme);
                    if ($pos === false) {
//return new JsonResponse($JSONresponse);

                        throw new BadRequestHttpException(); // 400
                    }

// RESET
                    $tempjson = "";
                    $skip++;
                } else
                    $tempjson .= '{"person": {"_path": "/people/' . $userid . '"}},';
            }
            curl_close($getch);

            /*
              $json = '{"recipients": {"values": [';
              foreach($users as $key => $userid){
              return new JsonResponse(array('key'=>$key));
              //$userid = 'i6q-qGCjdE'; // TESTING - JOSEP's ID
              $currentInvites[] = $userid;

              if($key+1==$last) $json .= '{"person": {"_path": "/people/'.$userid.'"}}';
              else $json .= '{"person": {"_path": "/people/'.$userid.'"}},';

              }
              $json .= ']},';
              $json .= '"subject": "'.$messageSubject.'",';
              $json .= '"body": "'.$messageText.'"';
              $json .= '}';

              $getch = curl_init();
              curl_setopt($getch, CURLOPT_URL, $mailboxURL);
              curl_setopt($getch, CURLOPT_SSL_VERIFYPEER, false);
              curl_setopt($getch, CURLOPT_SSL_VERIFYHOST, false);
              curl_setopt($getch, CURLOPT_HTTPHEADER, array(
              'Content-Type: application/json',
              'Authorization: Bearer ' . $accessToken, // WORKS OK
              ));
              curl_setopt($getch, CURLOPT_HEADER, true);
              // allow redirects
              curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
              // return a response into a variable
              curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
              // times out after 30s
              curl_setopt($getch, CURLOPT_TIMEOUT, 30);
              // set POST method
              curl_setopt($getch, CURLOPT_POST, 1);
              // add POST fields parameters
              curl_setopt($getch, CURLOPT_POSTFIELDS, $json);// Set the request as a POST FIELD for curl.

              $JSONresponse = curl_exec($getch);

              $response = json_decode($JSONresponse);
              curl_close($getch);

              $findme   = '1.1 201 Created';
              $pos = strpos($JSONresponse, $findme);
              if ($pos === false) {
              throw new BadRequestHttpException(); // 400
              }
             */
            if (count($currentInvites) > 0) {

                if (is_array($user->getLinkedInInvites()))
                    $newInvites = array_merge($user->getLinkedInInvites(), $currentInvites);
                else
                    $newInvites = $currentInvites;

// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the User
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())

// Update found User
                        ->field('linkedInInvites')->set($newInvites)
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
            }
            return new JsonResponse();
        }

        return new JsonResponse($accessToken);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editSettingsBillingAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $billing = $request->billing;

            $newBilling = array();

            foreach ($billing as $object) {
                foreach ($object as $key => $value) {
                    $newBilling[$key] = $value;
//return new JsonResponse(array("key" => $key, "value" => $value));
                }
            }

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field('settings.billing')->set(array($newBilling))
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse(array($newBilling));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editSettingsPersonalAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
//throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $newUser = $request->user;

// Get POST parameters
            if (isset($newUser->email))
                $user->setEmail(strtolower(trim($newUser->email)));
            if (isset($newUser->companyType))
                $user->setCompanyType(trim($newUser->companyType));
            if (isset($newUser->companySubType))
                $user->setCompanySubType($newUser->companySubType);

            if (isset($newUser->gender))
                $user->setGender($newUser->gender);
            if (isset($newUser->birthdayMM))
                $user->setBirthdayMM($newUser->birthdayMM);
            if (isset($newUser->birthdayDD))
                $user->setBirthdayDD($newUser->birthdayDD);
            if (isset($newUser->birthdayYYYY))
                $user->setBirthdayYYYY($newUser->birthdayYYYY);

            if (isset($newUser->contactEmail))
                $user->setContactEmail(strtolower(trim($newUser->contactEmail)));
            if (isset($newUser->website))
                $user->setWebsite($newUser->website);
            if (isset($newUser->skype))
                $user->setSkype($newUser->skype);
            if (isset($newUser->linkedin))
                $user->setLinkedin($newUser->linkedin);
            if (isset($newUser->twitter))
                $user->setTwitter($newUser->twitter);
            if (isset($newUser->phone))
                $user->setPhone($newUser->phone);

            $user->setPrivacyHidden($newUser->privacyHidden);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }


        return new JsonResponse($user);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *      {"name"="email", "dataType"="string", "required"=true, "description"="email"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editSettingsPasswordAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();
        $validPassword = false;

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

            $currentPassword = $request->currentPassword;
            $newPassword1 = $request->newPassword1;
            $newPassword2 = $request->newPassword2;


            $defaultEncoder = new MessageDigestPasswordEncoder('sha512', true, 5000);

            $encoders = array(
                'FOS\\UserBundle\\Model\\UserInterface' => $defaultEncoder
            );

            $encoderFactory = new EncoderFactory($encoders);

            $encoder = $encoderFactory->getEncoder($user);


            $validPassword = $encoder->isPasswordValid(
                    $user->getPassword(), // the encoded password
                    $currentPassword, // the submitted password
                    $user->getSalt()
            );


            if ($newPassword1 != $newPassword2)
                $validPassword = false;

            if ($validPassword) {

// will return $weakEncoder (see above)
                $encodedPassword = $encoder->encodePassword($newPassword1, $user->getSalt());

// Set the new password
                $user->setPlainPassword($newPassword1);
                $user->setPassword($encodedPassword);

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Save all the parameters
                $dm->persist($user);
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }


        return new JsonResponse($validPassword);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editSettingsNotificationsAction(Request $request) {
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $request = json_decode($postdata);

        $notifications = $request->notifications;

        $newNotifications = array();
        foreach ($notifications as $object) {
            foreach ($object as $key => $value) {
                $newNotifications[$key] = $value;
            }
        }

        $settings = $user->getSettings();

        if (!isset($settings) || !isset($notifications) || !isset($settings['notifications'])) {
            $settings = array(
                "notifications" =>
                array(array(
                        'email_intouchrequest' => true,
                        'email_intouchvalidated' => true,
                        'email_touchmail' => true,
                        'email_whovisited' => true,
                        'email_fillprofile' => true,
                        'email_userlike' => true,
                        'email_companyfollow' => true,
                        'email_companylike' => true,
                        'email_jobs' => true,
                        'email_qa' => true
                    )),
                "privacy" =>
                array(array(
                        'share_data' => true,
                        'contact_information' => false,
                        'cookies' => true,
                    ))
            );
        } else if ($settings && isset($settings['notifications']) && isset($settings['notifications'][0])) {
            $localPath = $this->container->getParameter('local_console_path');
            $serverPath = $this->container->getParameter('server_console_path');
            $env = $this->get('kernel')->getEnvironment();

            foreach ($newNotifications as $key => $value) {
                switch ($key) {
                    case 'email_invite':
                        $group = '18883';
                        break;
                    case 'email_intouchrequest':
                        $group = '18885';
                        break;
                    case 'email_intouchvalidated':
                        $group = '18887';
                        break;
                    case 'email_recruit':
                        $group = '18891';
                        break;
                    case 'email_companyfollow':
                        $group = '18893';
                        break;
                    case 'email_touchmail':
                        $group = '18895';
                        break;
                    case 'email_whovisited':
                        $group = '18897';
                        break;
                    case 'email_contactjoined':
                        $group = '18899';
                        break;
                    case 'email_jobs':
                        $group = '18901';
                        break;
                    case 'email_qa':
                        $group = '18923';
                        break;
                    default:
                        break;
                }
                if (isset($group)) {
                    if (isset($settings['notifications'][0][$key]) && isset($newNotifications[$key]) && $settings['notifications'][0][$key] != $newNotifications[$key]) {
                        $status = $newNotifications[$key] ? 'false' : 'true';
                        if ($env == 'dev') {
                            $process = new Process("{$localPath} Job:UpdateNotificationSetting {$group} {$user->getEmail()} {$status}");
                        } else {
                            $process = new Process("{$serverPath} Job:UpdateNotificationSetting {$group} {$user->getEmail()} {$status} --env={$env}");
                        }
                        $process->disableOutput();
                        $process->start();
                    }
                }
            }

            /* if(isset($settings['notifications'][0]['email_invite']) && isset($newNotifications['email_invite']) && $settings['notifications'][0]['email_invite'] != $newNotifications['email_invite']){
              $status = $newNotifications['email_invite'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18883 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18883 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_intouchrequest']) && isset($newNotifications['email_intouchrequest']) && $settings['notifications'][0]['email_intouchrequest'] != $newNotifications['email_intouchrequest']){
              $status = $newNotifications['email_intouchrequest'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18885 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18885 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_intouchvalidated']) && isset($newNotifications['email_intouchvalidated']) && $settings['notifications'][0]['email_intouchvalidated'] != $newNotifications['email_intouchvalidated']){
              $status = $newNotifications['email_intouchvalidated'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18887 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18887 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_recruit']) && isset($newNotifications['email_recruit']) && $settings['notifications'][0]['email_recruit'] != $newNotifications['email_recruit']){
              $status = $newNotifications['email_recruit'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18891 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18891 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_companyfollow']) && isset($newNotifications['email_companyfollow']) && $settings['notifications'][0]['email_companyfollow'] != $newNotifications['email_companyfollow']){
              $status = $newNotifications['email_companyfollow'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18893 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18893 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_touchmail']) && isset($newNotifications['email_touchmail']) && $settings['notifications'][0]['email_touchmail'] != $newNotifications['email_touchmail']){
              $status = $newNotifications['email_touchmail'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18895 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18895 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_whovisited']) && isset($newNotifications['email_whovisited']) && $settings['notifications'][0]['email_whovisited'] != $newNotifications['email_whovisited']){
              $status = $newNotifications['email_whovisited'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18897 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18897 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_contactjoined']) && isset($newNotifications['email_contactjoined']) && $settings['notifications'][0]['email_contactjoined'] != $newNotifications['email_contactjoined']){
              $status = $newNotifications['email_contactjoined'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18899 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18899 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_jobs']) && isset($newNotifications['email_jobs']) && $settings['notifications'][0]['email_jobs'] != $newNotifications['email_jobs']){
              $status = $newNotifications['email_jobs'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18901 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18901 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              }
              if(isset($settings['notifications'][0]['email_qa']) && isset($newNotifications['email_qa']) && $settings['notifications'][0]['email_qa'] != $newNotifications['email_qa']){
              $status = $newNotifications['email_qa'] ? 'false' : 'true';
              if ($env == 'dev') {
              $process = new Process("{$localPath} Job:UpdateNotificationSetting 18923 {$user->getEmail()} {$status}");
              } else {
              $process = new Process("{$serverPath} Job:UpdateNotificationSetting 18923 {$user->getEmail()} {$status} --env={$env}");
              }
              $process->disableOutput();
              $process->start();
              } */
            $settings['notifications'][0] = $newNotifications;
        }

        $jobFilters = $user->getJobFilters();
        if (isset($newNotifications['email_jobs']) && !$newNotifications['email_jobs']) {
            foreach ($jobFilters as &$jobFilter) {
                $jobFilter['alerts'] = false;
            }
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('jobFilters')->set($jobFilters)
                ->field('settings')->set($settings)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        return new JsonResponse($settings['notifications']);
    }

    public function settingsNotificationsAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $suppressions = Utility::getSuppressions($user->getEmail());
        $settings = $user->getSettings();
        if ($settings && isset($settings['notifications']) && is_array($settings['notifications']) && isset($settings['notifications'][0])) {
            $notifications = $settings['notifications'][0];
        } else {
            $notifications = array(
                'email_fillprofile' => true,
                'email_userlike' => true,
                'email_companylike' => true,
            );
        }

        if ($settings && isset($settings['privacy']) && is_array($settings['privacy']) && isset($settings['privacy'][0])) {
            $privacy = $settings['privacy'][0];
        } else {
            $privacy = array(
                'share_data' => true,
                'contact_information' => false,
                'cookies' => true
            );
        }

        if (isset($suppressions->suppressions)) {
            //var_dump($suppressions->suppressions);
            foreach ($suppressions->suppressions as $s) {
                switch ($s->id) {
                    case 18883:
                        $notifications['email_invite'] = !$s->suppressed;
                        break;
                    case 18885:
                        $notifications['email_intouchrequest'] = !$s->suppressed;
                        break;
                    case 18887:
                        $notifications['email_intouchvalidated'] = !$s->suppressed;
                        break;
                    case 18891:
                        $notifications['email_recruit'] = !$s->suppressed;
                        break;
                    case 18893:
                        $notifications['email_companyfollow'] = !$s->suppressed;
                        break;
                    case 18895:
                        $notifications['email_touchmail'] = !$s->suppressed;
                        break;
                    case 18897:
                        $notifications['email_whovisited'] = !$s->suppressed;
                        break;
                    case 18899:
                        $notifications['email_contactjoined'] = !$s->suppressed;
                        break;
                    case 18901:
                        $notifications['email_jobs'] = !$s->suppressed;
                        break;
                    case 18923:
                        $notifications['email_qa'] = !$s->suppressed;
                        break;
                    default:
                        break;
                }
            }
        }

        $settings = array(
            'notifications' => array($notifications),
            'privacy' => array($privacy)
        );

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('settings')->set($settings)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();
        $dm->flush();
        $dm->clear();
        return new JsonResponse($settings);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editSettingsPrivacyAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $privacy = $request->privacy;

            $newPrivacy = array();

            foreach ($privacy as $object) {
                foreach ($object as $key => $value) {
//return new JsonResponse(array("key" => $key, "value" => $value));
                    $newPrivacy[$key] = $value;
                }
            }
            $settings = $user->getSettings();


            if ($settings && isset($settings['notifications']) && is_array($settings['notifications']) && isset($settings['notifications'][0])) {
                $notifications = $settings['notifications'][0];
            } else {
                $notifications = array(
                    'email_intouchrequest' => true,
                    'email_intouchvalidated' => true,
                    'email_touchmail' => true,
                    'email_whovisited' => true,
                    'email_fillprofile' => true,
                    'email_userlike' => true,
                    'email_companyfollow' => true,
                    'email_companylike' => true,
                    'email_jobs' => true,
                    'email_qa' => true
                );
            }

            if ($settings && isset($settings['privacy']) && is_array($settings['privacy']) && isset($settings['privacy'][0])) {
                $privacy = $settings['privacy'][0];
            } else {
                $privacy = array(
                    'share_data' => true,
                    'contact_information' => false,
                    'cookies' => true
                );
            }

            $settings = array(
                'notifications' => array($notifications),
                'privacy' => array($privacy)
            );

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
//->field('settings.privacy')->set(array($newPrivacy))
                    ->field('settings')->set($settings)
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($settings['privacy']);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    /*  public function checkAvailabilityAction(Request $request)
      {
      // Get the User
      $user = $this->getCurrentUser();

      if(!$user instanceof User){
      throw new NotFoundHttpException();     // 404
      }else{

      // Get JSON parameters
      $postdata = $request->getContent();
      $request = json_decode($postdata);

      // Get POST parameters
      $companyUsername = $request->companyUsername;

      // Set up database
      $dm = $this->get('doctrine_mongodb.odm.document_manager');

      // Get the User
      $exists = $dm->getRepository('DataBaseBundle:Company')->findOneBy( array('username'=> strtolower(trim($companyUsername))));

      if($exists)  return new JsonResponse(false);
      else  return new JsonResponse(true);

      }

      return new JsonResponse();

      }
     */

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function createNewCompanyAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $companyName = $request->companyName;

            $companyUsername = $this->newCompanyUsername($companyName);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $exists = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if ($exists)
                throw new BadRequestHttpException();

            $explodeName = explode(" ", $companyUsername);
            $explodeCompany = explode(" ", $user->getCompany());
            $search = array_merge($explodeName, $explodeCompany);

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('username')->equals($companyUsername)

// Update found Campaign
                    ->field('name')->set($companyName)
                    ->field('validDescriptionBox')->set(false)
                    ->field('search')->set($search)
                    ->field('followers')->set(array())
                    ->field("updateDate")->set(time())
//->field('companyType')->set($user->getCompanyType())
//->field('companySubType')->set($user->getCompanySubType())
                    ->field('employees')->addToSet(array(
                        'id' => $user->getId(),
                        'username' => $user->getUsername(),
                        'name' => $user->getName(),
                        'lastname' => $user->getLastname(),
                        'jobTitle' => $user->getJobTitle(),
                        'avatar' => $user->getAvatar(),
                        'cover' => $user->getCover(),
                        'miniResume' => $user->getMiniResume(),
                        'inTouchCounter' => $user->getInTouchCounter(),
                        'city' => $user->getCity(),
                        'basedCountry' => $user->getBasedCountry(),
                        'responseRate' => $user->getResponseRate(),
                        'totalReceivedEmails' => $user->getTotalReceivedEmails()
                    ))
                    ->field('administrators')->addToSet(array(
                        'id' => $user->getId(),
                        'username' => $user->getUsername(),
                        'name' => $user->getName(),
                        'lastname' => $user->getLastname(),
                        'jobTitle' => $user->getJobTitle(),
                        'avatar' => $user->getAvatar(),
                        'cover' => $user->getCover(),
                        'miniResume' => $user->getMiniResume(),
                        'inTouchCounter' => $user->getInTouchCounter(),
                        'city' => $user->getCity(),
                        'basedCountry' => $user->getBasedCountry()
                    ))

// Options
                    ->upsert(true)
                    ->getQuery()
                    ->execute();


// Save all the parameters
//$dm->persist($newCompany);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!


            /* $user->setCompanyPage(array('username' => $companyUsername));

              // Save all the parameters
              $dm->persist($user);
              $dm->flush();
             */

            $companyPage = array(
                "employee" => array('company' => $companyUsername),
                "administrator" => array('company' => $companyUsername)
            );

            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field('company')->set($companyName)
                    ->field('companyPage')->set($companyPage)
//->field('companyPage.employee')->set(array('company' => $companyUsername))
//->field('companyPage.administrator')->set(array('company' => $companyUsername))
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// SEARCH FOR EMPLOYEES
            $this->updateNewEmployees($companyName, $companyUsername);

            $timing = strtotime("-1 hour");


            $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                    ->field('username')->equals($companyUsername)
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();

            if ($company) {


                $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                                ->field('userID')->equals($user->getId())
                                ->field('companyID')->equals($company->getId())
                                ->field('action')->equals('companyPage')
                                ->field('date')->gte($timing)
                                ->getQuery()->execute()->count();

                if ($updateFeed == 0) {

                    $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->insert()
                            ->field("date")->set(time())
                            ->field("userID")->set($user->getId())
                            ->field("username")->set($user->getUsername())
                            ->field("userAvatar")->set($user->getAvatar())
                            ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                            ->field("userJobTitle")->set($user->getJobTitle())
                            ->field("type")->set(intval(2))
                            ->field("filter")->set('professional')
                            ->field("action")->set('companyPage')
                            ->field("likesCounter")->set(intval(0))
                            ->field("commentsCounter")->set(intval(0))
                            ->field("liked")->set(array())
                            ->field("isLike")->set(false)
                            ->field("companyID")->set($company->getId())
                            ->field("companyUsername")->set($company->getUsername())
                            ->field("companyAvatar")->set($company->getAvatar())
                            ->field("companyFullName")->set($company->getName())
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                }
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editCompanyDescriptionAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $description = $request->description;
            $whyUs = $request->whyUs;
            $companyType = $request->companyType;
            $companySubType = $request->companySubType;
            $city = $request->city;
            $basedCountry = $request->basedCountry;
            $country = isset($request->country) ? $request->country : null;
            $size = $request->size;
            $foundedin = $request->foundedin;
            $founders = $request->founders;

            $valid = false;
            if (isset($request->description)) {
                $company->setDescription($description);
                $valid = true;
            }
            if (isset($request->whyUs)) {
                $company->setWhyUs($description);
                $valid = true;
            }
            if (isset($request->companyType)) {
                $company->setCompanyType($companyType);
                $valid = true;
            }
            if (isset($request->companySubType)) {
                $company->setCompanySubType($companySubType);
                $valid = true;
            }
            if (isset($request->size)) {
                $company->setSize($size);
                $valid = true;
            }
            if (isset($request->city)) {
                $company->setCity($city);
                $valid = true;
            }
            if (isset($request->basedCountry)) {
                $company->setBasedCountry($basedCountry);
                $valid = true;
            }
            if (isset($request->country)) {
                $company->setCountry($country);
            }
            if (isset($request->foundedin)) {
                $company->setFoundedin($foundedin);
                $valid = true;
            }
            if (isset($request->founders)) {
                $company->setFounders($founders);
                $valid = true;
            }

            if (isset($request->city) && isset($request->basedCountry)) {
                $city = str_replace(" ", "+", $city); // replace all the white space with "+" sign to match with google search pattern
                $url = "http://maps.google.com/maps/api/geocode/json?sensor=false&address=$city+$basedCountry";
                $response = file_get_contents($url);
                $json = json_decode($response, TRUE); //generate array object from the response from the web
                if (isset($json['results'][0])) {
                    $company->setLat($json['results'][0]['geometry']['location']['lat']);
                    $company->setLng($json['results'][0]['geometry']['location']['lng']);
                    $valid = true;
                }
            }

            $company->setValidDescriptionBox($valid);
            $company->setUpdateDate(time());
            $mS = new ManageSearch($dm);
            $company->setSearch($mS->updateCompanySearch($company));
            // Save all the parameters
            $dm->persist($company);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            //$this->updateCompanySearch($dm, $company);
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateCompanySearch($company);
        }
        #$company->companyPercentage=$this->countCompanyPercentage($user);
        $updatedData = $this->countCompanyPercentage($user);
        $company->companyPercentage = $updatedData["percentage"];
        $company->companyPoints = $updatedData["points"];
        return new JsonResponse($company);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editCompanyNameAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $companyPage = $user->getCompanyPage();
            if (!$companyPage || !array_key_exists('administrator', $companyPage))
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $name = $request->name;
            $website = $request->website;
            $shortDescription = $request->shortDescription;
            $twitter = $request->twitter;
            $linkedIn = $request->linkedIn;
            $instagram = $request->instagram;


            $isNewName = false;
            if ($name != $company->getName())
                $isNewName = true;
            if (isset($request->name))
                $company->setName($name);
            if (isset($request->website)) {
                if ($request->website == '') {
                    $company->setWebsite($request->website);
                } else {
                    if (!preg_match("~^(?:f|ht)tps?://~i", $website))
                        $website = "http://" . $website;
                    $company->setWebsite($website);
                }
            }
            if (isset($request->shortDescription))
                $company->setShortDescription($shortDescription);
            if (isset($request->twitter)) {
                if ($request->twitter == '') {
                    $company->setTwitter($request->twitter);
                } else {
                    if (!preg_match("~^(?:f|ht)tps?://~i", $twitter))
                        $twitter = "http://" . $twitter;
                    $company->setTwitter($twitter);
                }
            }
            if (isset($request->linkedIn)) {
                if ($request->linkedIn == '') {
                    $company->setLinkedIn($request->linkedIn);
                } else {
                    if (!preg_match("~^(?:f|ht)tps?://~i", $linkedIn))
                        $linkedIn = "http://" . $linkedIn;
                    $company->setLinkedIn($linkedIn);
                }
            }
            if (isset($request->instagram)) {
                if ($request->instagram == '') {
                    $company->setInstagram($request->instagram);
                } else {
                    if (!preg_match("~^(?:f|ht)tps?://~i", $instagram))
                        $instagram = "http://" . $instagram;
                    if ($instagram != 'http://')
                        $company->setInstagram($instagram);
                }
            }


            /*
              $followers = $company->getFollowers();
              foreach ($followers as $index => $follow) {
              $followers[$index]['company'] = $company->getName();
              }
              $company->setFollowers($followers);
             */

            $explodeName = explode(" ", $request->name);
            $explodeUsername = explode(" ", $companyUsername);
            $search = array_merge($explodeName, $explodeUsername);
            $company->setSearch($search);
            $company->setUpdateDate(time());
            $mS = new ManageSearch($dm);
            $company->setSearch($mS->updateCompanySearch($company));
            // Save all the parameters
            $dm->persist($company);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            //$this->updateCompanySearch($dm, $company);
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateCompanySearch($company);

            $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->update()
                    ->multiple(true)
                    ->field('userID')->equals($user->getId())
                    ->field('username')->set($user->getUsername())
                    ->field('userAvatar')->set($user->getAvatar())
                    ->field('userFirstName')->set($user->getName())
                    ->field('userLastName')->set($user->getLastname())
                    ->field('userCompany')->set($company->getName())
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

// UPDATE CURRENT EMPLOYEES
            $users = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('validated')->equals(true)
                    ->field('companyPage.employee.company')->equals($companyUsername)
                    ->getQuery()
                    ->execute();

            foreach ($users as $update) {

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($update->getId())

// Update found Campaign
                        ->field('company')->set($company->getName())
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $update->setCompany($company->getName());
//$this->updateUserSearch($dm, $update);
                //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
                //$manageUserAndCompanySearch->updateUserSearch($update);

                $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('followers.username')->equals($update->getUsername())

// Update found Campaign
                        ->field('followers.$.company')->set($company->getName())
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
            }

            $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
            $user->setSearch($searches->updateUserSearch($user));

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// SEARCH FOR NEW EMPLOYEES
            $this->updateNewEmployees($company->getName(), $companyUsername);

            if ($isNewName) {

// UPDATE FEED COMPANY NAME

                $dm->createQueryBuilder('DataBaseBundle:Update')
// Find the Campaign
                        ->update()
                        ->multiple(true)
                        ->field('companyID')->equals($company->getId())

// Update found Campaign
                        ->field("companyFullName")->set($company->getName())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();


                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
#$company->companyPercentage=$this->countCompanyPercentage($user);
            $updatedData = $this->countCompanyPercentage($user);
            $company->companyPercentage = $updatedData["percentage"];
            $company->companyPoints = $updatedData["points"];
        }

        return new JsonResponse($company);
    }

    public function addTeammateCompanyAction(Request $request) {
        /*
          // Get the User
          $user = $this->getCurrentUser();

          if (!$user instanceof User) {
          throw new NotFoundHttpException();     // 404
          } else {

          // Set up database
          $dm = $this->get('doctrine_mongodb.odm.document_manager');

          // Get the User
          $companyPage = $user->getCompanyPage();
          if (!$companyPage)
          throw new BadRequestHttpException();
          $companyUsername = $companyPage['administrator']['company'];
          $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

          if (!$company)
          throw new BadRequestHttpException();

          // Get JSON parameters
          $postdata = $request->getContent();
          $request = json_decode($postdata);

          $teams = $company->getTeams();
          $employees = $company->getEmployees();

          if (isset($request->newTeammate)) {

          // Get POST parameters
          $newTeammateUsername = $request->newTeammate;

          if (count($teams) > 0) {
          foreach ($teams as $team) {
          if ($team['username'] == $newTeammateUsername) {
          return new JsonResponse($teams);
          }
          }
          }

          $ok = false;
          foreach ($employees as $employee) {
          if ($employee['username'] == $newTeammateUsername) {
          $ok = true;
          break;
          }
          }

          if (!$ok)
          throw new BadRequestHttpException();

          $newTeammate = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $newTeammateUsername));

          if ($newTeammate) {

          $newTeammateArray = array(
          'id' => $newTeammate->getId(),
          'username' => $newTeammate->getUsername(),
          'name' => $newTeammate->getName(),
          'lastname' => $newTeammate->getLastname(),
          'jobTitle' => $newTeammate->getJobTitle(),
          'totalReceivedEmails' => $newTeammate->getTotalReceivedEmails(),
          'responseRate' => $newTeammate->getResponseRate(),
          'avatar' => $newTeammate->getAvatar());

          // update DATABASE
          $dm->createQueryBuilder('DataBaseBundle:Company')
          // Find the Campaign
          ->update()
          ->multiple(false)
          ->field('_id')->equals($company->getId())

          // Update found Campaign
          ->field('teams')->addToSet($newTeammateArray)

          // Options
          ->upsert(false)
          ->getQuery()
          ->execute();

          $dm->flush();
          $dm->clear(); // Detaches all objects from Doctrine!

          $teams[] = $newTeammateArray;
          }
          }
          return new JsonResponse($teams);
          } */
        return new JsonResponse();
    }

    public function autoValidateUser($request) {
        $status = false;

// Get the User
//$currentUser = $this->getCurrentUser();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get JSON parameters
        /* $postdata = $request->getContent();
          $request = json_decode($postdata); */

// Get POST parameters
        $username = $request['username'];
        $email = $request['email'];
        $hash = $request['hash'];

// Get the User
        $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username, 'email' => $email, 'emailValidationHash' => $hash));

        if ($user) {

            $settings = array(
                "notifications" =>
                array(array(
                        'email_intouchrequest' => true,
                        'email_intouchvalidated' => true,
                        'email_touchmail' => true,
                        'email_whovisited' => true,
                        'email_fillprofile' => true,
                        'email_userlike' => true,
                        'email_companyfollow' => true,
                        'email_companylike' => true,
                        'email_jobs' => true,
                        'email_qa' => true
                    )),
                "privacy" =>
                array(array(
                        'share_data' => true,
                        'contact_information' => false,
                        'cookies' => true,
                    ))
            );

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field("validated")->set(true)
                    ->field("emailValidation")->set(false)
                    ->field("token")->set(null)
                    ->field("updateDate")->set(time())
                    ->field('settings')->set($settings)

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $status = true;
//$user->setValidated(true);
//$dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
            $user->setValidated(true);
            $user->setEmailValidation(false);
            //$this->updateUserSearch($dm, $user);
            //$manageUserAndCompanySearch = new ManageUserAndCompanySearch($dm);
            //$manageUserAndCompanySearch->updateUserSearch($user);
            $searches = new \Mobntouch\APIBundle\Classes\ManageSearch($dm);
            $user->setSearch($searches->updateUserSearch($user));


// UPDATE COMPANY PAGE
            $companyPage = $user->getCompanyPage();
            if ($companyPage) {

                $companyUsername = $companyPage['employee']['company'];
                $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                        ->field('username')->equals($companyUsername)
                        ->limit(1)
                        ->getQuery()
                        ->getSingleResult();

                if ($company) {
// Update Employees
                    $employees = $company->getEmployees();
                    $updateEmployees = false;

                    foreach ($employees as $key => $employee) {
                        if ($employee['id'] == $user->getId()) {
                            $updateEmployees = true;
                            $employees[$key]['jobTitle'] = $user->getJobTitle();
                            break;
                        }
                    }

                    if ($updateEmployees) {

// update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($company->getId())

// Update found Campaign
                                ->field("employees")->set($employees)

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    } else {

                        // update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:Company')
                                // Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($company->getId())

                                // Update found Campaign
                                ->field('employees')->addToSet(array(
                                    'id' => $user->getId(),
                                    'username' => $user->getUsername(),
                                    'name' => $user->getName(),
                                    'lastname' => $user->getLastname(),
                                    'jobTitle' => $user->getJobTitle(),
                                    'avatar' => $user->getAvatar(),
                                    'cover' => $user->getCover(),
                                    'miniResume' => $user->getMiniResume(),
                                    'inTouchCounter' => $user->getInTouchCounter(),
                                    'city' => $user->getCity(),
                                    'basedCountry' => $user->getBasedCountry(),
                                    'responseRate' => $user->getResponseRate(),
                                    'totalReceivedEmails' => $user->getTotalReceivedEmails()
                                ))

                                // Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                }
            }

#$this->updateZohoCRM($email);
        }

//$data = json_decode($client->getResponse()->getContent(), true);
//return new JsonResponse();
//return new JsonResponse(array('status'=> $status, 'token' => $token));
        return $user;
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function registerInviteContactsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $emails = $request->emails;

            switch ($this->get('kernel')->getEnvironment()) {
                case 'dev':
                    $baseURL = 'http://angular.dev/cdn';
                    $link = 'http://angular.dev';
                    break;
                case 'test':
                    $baseURL = 'http://angular.dev';
                    $link = 'http://angular.dev';
                    break;
                case 'adhoc':
                    $baseURL = 'https://cdn-dev.mobintouch.com';
                    $link = 'https://www-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseURL = 'https://cdn.mobintouch.com';
                    $link = 'https://www.mobintouch.com';
                    break;
                default:
                    $baseURL = 'https://cdn.mobintouch.com';
                    $link = 'https://www.mobintouch.com';
                    break;
            }

            $profileLink = $baseURL . '/profile/' . $user->getUsername();

            foreach ($emails as $email) {

                $message = \Swift_Message::newInstance()
                        ->setSubject("Join me on Mobintouch | Mobile Advertising Social Network")
                        ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                        ->setTo($email->text)
                        ->setContentType("text/html")
                        ->setBody(
                        $this->renderView(
                                'APIBundle:Mail:emailInvitation.html.twig', array('title' => "Mobile Advertising Social Network", 'user' => $user, 'link' => $link, 'baseURL' => $baseURL, 'profileLink' => $profileLink)
                        )
                        )
                ;
                if ($this->get('kernel')->getEnvironment() != 'dev')
                    $this->get('mailer')->send($message);
            }
        }
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function mailUsernameAutocompleteAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        $users = array();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $queryString = $request->string;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Set up database
            $q = $dm->createQueryBuilder('DataBaseBundle:User')
                            ->field('_id')->notEqual($user->getId())
                            ->field('validated')->equals(true);

// Query String
            if (isset($queryString) and $queryString != null) {

                $queryString = str_replace(',', ' ', $queryString);
                $queryString = $this->removeAccents($queryString);
                $temp = explode(" ", $queryString);

                $string = array();

                foreach ($temp as $var) {
                    if ($var) {
                        $string[] = new \MongoRegex("/{$var}/ix");
                    }
                }

                $q->addOr($q->expr()->field('search')->all($string));
            }


            $temp = $q
//->sort('lastOpen', 'DESC')
                    ->limit(10)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                    ->getQuery()
                    ->execute();

//[{"id":"54c8c7b0242ff2f13ad63af1","username":"jmarti2","name":"josep","lastname":"marti","jobTitle":"BETA TESTER","company":"MediaSwapp","avatar":null,"responseRate":null,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti"]},{"id":"54be3a3d242ff2ae36d63af1","username":"josepmarti","name":"josep","lastname":"marti","jobTitle":"Developer","company":"MediaSwapp","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","marti josep MediaSwapp","marti josep","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti","Developer"]},{"id":"54bd2d30242ff21736d63af2","username":"jmarti","name":"Jmarti","lastname":"PASCUAL","jobTitle":"UX tester","company":"MediaSwapp","avatar":null,"responseRate":0,"search":["Jmarti PASCUAL","Jmarti PASCUAL MediaSwapp","Jmarti MediaSwapp","PASCUAL MediaSwapp","PASCUAL Jmarti MediaSwapp","PASCUAL Jmarti","MediaSwapp Jmarti","MediaSwapp PASCUAL","MediaSwapp Jmarti PASCUAL","UX","tester"]},{"id":"54db1532242ff29808d63af1","username":"josepmarti","name":"josep","lastname":"marti","jobTitle":"Develope","company":"MediaSwapp","avatar":null,"responseRate":0,"totalReceivedEmails":1,"search":["josep marti","josep marti MediaSwapp","josep MediaSwapp","marti MediaSwapp","marti josep MediaSwapp","marti josep","MediaSwapp josep","MediaSwapp marti","MediaSwapp josep marti","Develope"]},{"id":"54db1974242ff29808d63af2","username":"pepemartinez","name":"pepe","lastname":"martinez","jobTitle":"Developers","company":"Google","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["pepe martinez","pepe martinez Google","pepe Google","martinez Google","martinez pepe Google","martinez pepe","Google pepe","Google martinez","Google pepe martinez","Developers"]},{"id":"54e23239242ff29d4cd63af1","username":"joseptesting","name":"josep","lastname":"testing","jobTitle":"Dev","company":"Med","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep testing","josep testing Med","josep Med","testing Med","testing josep Med","testing josep","Med josep","Med testing","Med josep testing","Dev"]},{"id":"54e2ff58242ff2a04cd63af2","username":"joseptesting","name":"josep","lastname":"testing","jobTitle":"dev","company":"media","avatar":null,"responseRate":0,"totalReceivedEmails":0,"search":["josep testing","josep testing media","josep media","testing media","testing josep media","testing josep","media josep","media testing","media josep testing","dev"]}]
            foreach ($temp as $dbuser) {
                $users[] = array('username' => $dbuser->getUsername(), 'name' => $dbuser->getName(), 'lastname' => $dbuser->getLastname(), 'jobTitle' => $dbuser->getJobTitle(), "company" => $dbuser->getCompany(), 'avatar' => $dbuser->getAvatar(), 'search' => $dbuser->getSearch());
            }
        }

        return new JsonResponse($users);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function mailListAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        $mails = array();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $folder = $request->folder; // INBOX BY DEFAULT
            $skip = intval($request->skip); // INBOX BY DEFAULT

            $limit = 10;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $count = 0;
            $exceptions = array('karimbensfia', 'andrespichuchobustamante');
            if (in_array($user->getUsername(), $exceptions)) {
                $defaultQuota = 100;
            } else {
// default quota
                $defaultQuota = 15;
            }
//$lastMonth = strtotime("-1 month");
            $lastMonth = intval(strtotime("-1 month") * 1000);

            $quota = $dm->createQueryBuilder('DataBaseBundle:Mail')
                            ->field('fromID')->equals($user->getId())
                            ->field('date')->gte($lastMonth)
                            ->getQuery()->execute()->count();

            $leftquota = $defaultQuota - $quota;
            if ($leftquota < 0)
                $leftquota = 0;

            if (isset($folder) and $folder == 'sent') {
// Sent

                $count = $dm->createQueryBuilder('DataBaseBundle:Mail')
                                ->field('mails.senderID')->equals($user->getId())->getQuery()->execute()->count();

                /* $count = $dm->createQueryBuilder('DataBaseBundle:Mail');
                  $count
                  ->addOr($count->expr()->field('fromID')->equals($user->getId()))
                  ->addOr($count->expr()->field('mails.senderID')->equals($user->getId()));
                  $count = $count->getQuery()->execute()->count(); */

                /* $q = $dm->createQueryBuilder('DataBaseBundle:Mail');

                  $q
                  ->addOr($q->expr()->field('fromID')->equals($user->getId()))
                  ->addOr($q->expr()->field('mails.senderID')->equals($user->getId()));
                  //->field('mails.senderID')->equals($user->getId())  // inbox

                  $q = $q->sort('updateDate', -1)
                  ->limit($limit)
                  ->skip($skip*$limit)
                  ->getQuery()
                  ->execute(); */


                $q = $dm->createQueryBuilder('DataBaseBundle:Mail')
                        ->field('mails.senderID')->equals($user->getId())
                        ->sort('updateDate', -1)
                        ->limit($limit)
                        ->skip($skip * $limit)
                        ->getQuery()
                        ->execute();
            } else {
// Inbox
                $count = $dm->createQueryBuilder('DataBaseBundle:Mail')
                                ->field('mails.receiverID')->equals($user->getId())->getQuery()->execute()->count();

                /* $count = $dm->createQueryBuilder('DataBaseBundle:Mail');
                  $count
                  ->addOr($count->expr()->field('toID')->equals($user->getId()))
                  ->addOr($count->expr()->field('mails.receiverID')->equals($user->getId()));
                  $count = $count->getQuery()->execute()->count(); */

                /* $q = $dm->createQueryBuilder('DataBaseBundle:Mail');
                  $q
                  ->addOr($q->expr()->field('toID')->equals($user->getId()))
                  ->addOr($q->expr()->field('mails.receiverID')->equals($user->getId()));
                  //->field('mails.receiverID')->equals($user->getId()) // inbox

                  $q = $q->sort('updateDate', -1)
                  ->limit($limit)
                  ->skip($skip*$limit)
                  ->getQuery()
                  ->execute(); */
                $q = $dm->createQueryBuilder('DataBaseBundle:Mail')
                        ->field('mails.receiverID')->equals($user->getId())
                        ->sort('updateDate', -1)
                        ->limit($limit)
                        ->skip($skip * $limit)
                        ->getQuery()
                        ->execute();
            }

            foreach ($q as $dbmail) {
                $mails[] = $dbmail;
            }
        }

        return new JsonResponse(array('count' => $count, 'mails' => $mails, 'emailsNotifications' => $user->getEmailsNotifications(), 'responseRate' => $user->getResponseRate(), 'totalReceivedEmails' => $user->getTotalReceivedEmails(), 'leftquota' => $leftquota));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function mailDetailsAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $id = $request->id; // INBOX BY DEFAULT
// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $mail = $dm->createQueryBuilder('DataBaseBundle:Mail')
                            ->field('_id')->equals($id);
            $mail->addOr($mail->expr()->field('fromID')->equals($user->getId()))
                    ->addOr($mail->expr()->field('toID')->equals($user->getId()));
            $mail = $mail->getQuery()
                    ->getSingleResult();

            if (!$mail instanceof Mail) {
                throw new BadRequestHttpException();
            }

            $sender = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($mail->getFromCurrentID())
                    ->getQuery()
                    ->getSingleResult();

            $receiver = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($mail->getToCurrentID())
                    ->getQuery()
                    ->getSingleResult();

            $emailsNotifications = $user->getEmailsNotifications();

            $exceptions = array('karimbensfia', 'andrespichuchobustamante');
            if (in_array($user->getUsername(), $exceptions)) {
                $defaultQuota = 100;
            } else {
// default quota
                $defaultQuota = 15;
            }
            $lastMonth = intval(strtotime("-1 month") * 1000);

            $quota = $dm->createQueryBuilder('DataBaseBundle:Mail')
                            ->field('fromID')->equals($user->getId())
                            ->field('date')->gte($lastMonth)
                            ->getQuery()->execute()->count();

            $leftquota = $defaultQuota - $quota;
            if ($leftquota < 0)
                $leftquota = 0;


            if ($receiver->getId() == $user->getId()) {
// READ MESSAGE

                $dm->createQueryBuilder('DataBaseBundle:Mail')
// Find the User
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($id)

// Update found User Touch Mail Counter
                        ->field("read")->set(true)

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $emailsNotifications = $user->getEmailsNotifications() > 0 ? ($user->getEmailsNotifications() - 1) : 0;


                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the User
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())

// Update found User Touch Mail Counter
                        ->field("emailsNotifications")->set($emailsNotifications)
                        ->field('updateDate')->set(time())
//->field("responseRate")->set(intval($receiver->get))
// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }


            return new JsonResponse(array('mail' => $mail, 'sender' => $sender, 'receiver' => $receiver, 'emailsNotifications' => $emailsNotifications, 'leftquota' => $leftquota));
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function mailleftquotaAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
// EXCEPTION - INFINITY TOUCH MAIL USERS
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $exceptions = array('karimbensfia', 'andrespichuchobustamante');
            if (in_array($user->getUsername(), $exceptions)) {
                $defaultQuota = 100;
            } else {
// default quota
                $defaultQuota = 15;
            }
//$lastMonth = strtotime("-1 month");
            $lastMonth = intval(strtotime("-1 month") * 1000);

            $count = $dm->createQueryBuilder('DataBaseBundle:Mail')
                            ->field('fromID')->equals($user->getId())
                            ->field('date')->gte($lastMonth)
                            ->getQuery()->execute()->count();
            return new JsonResponse(array('count' => $count, 'leftquota' => $defaultQuota - $count));
        }
        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function sendTouchMailAction(Request $request) {
        $user = $this->getCurrentUser();
        $count = 0;

        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $postdata = $request->getContent(); //Get Parameters
        $request = json_decode($postdata);

        $mail = $request->mail;

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $receiver = $dm->createQueryBuilder('DataBaseBundle:User')
                ->field('username')->equals($mail->username)
                ->getQuery()
                ->getSingleResult();

        if (!$receiver instanceof User) {
            throw new BadRequestHttpException();
        }

        //Used for monthly limit currently in comment to set it as unlimited V1.0.1
        /* $exceptions = array('karimbensfia', 'andrespichuchobustamante');
          if (in_array($user->getUsername(), $exceptions)) {
          $defaultQuota = 100;
          } else {
          $defaultQuota = 15;
          }

          $lastMonth = intval(strtotime("-1 month") * 1000);

          $count = $dm->createQueryBuilder('DataBaseBundle:Mail')
          ->field('fromID')->equals($user->getId())
          ->field('date')->gte($lastMonth)
          ->getQuery()->execute()->count();

          if ($count >= $defaultQuota) {
          return new JsonResponse(array('count' => $count, 'quotaExceeded' => true));
          } */

        $newDate = time() * 1000;

        $newTouchMail = array(
            'content' => $mail->content,
            'date' => $newDate,
            'senderID' => $user->getId(),
            'receiverID' => $receiver->getId()
        );

        $dm->createQueryBuilder('DataBaseBundle:Mail')
                ->insert()
                ->multiple(false)
                ->field("subject")->set($mail->subject)
                ->field("content")->set($mail->content)
                ->field("date")->set($newDate)
                ->field("updateDate")->set($newDate)
                ->field("read")->set(false)
                ->field("fromID")->set($user->getId())
                ->field("fromCurrentID")->set($user->getId())
                ->field("senderName")->set($user->getName() . " " . $user->getLastname())
                ->field("senderAvatar")->set($user->getAvatar() ? $user->getAvatar() : null)
                ->field("toID")->set($receiver->getId())
                ->field("toCurrentID")->set($receiver->getId())
                ->field("receiverName")->set($receiver->getName() . " " . $receiver->getLastname())
                ->field("receiverAvatar")->set($receiver->getAvatar() ? $receiver->getAvatar() : null)
                ->field("mails")->set(array($newTouchMail))
                ->field("rated")->set(false)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $responseRate = ($receiver->getTotalRepliedEmails() / ($receiver->getTotalReceivedEmails() + 1) ) * 100;

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($receiver->getId())
                ->field("emailsNotifications")->inc(1)
                ->field("totalReceivedEmails")->inc(1)
                ->field("responseRate")->set(floatval($responseRate))
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field("totalSentEmails")->inc(1)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        $this->updateResponseRate($receiver, $responseRate, $receiver->getTotalReceivedEmails() + 1);

        $settings = $receiver->getSettings();
        if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_touchmail']) and $settings['notifications'][0]['email_touchmail']) {

            $parts = parse_url($_SERVER['HTTP_REFERER']);
            $link = 'https://' . $parts["host"];
            $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
            $replyLink = 'https://' . $parts["host"] . "/touchmail/inbox/";
            switch ($this->get('kernel')->getEnvironment()) {
                case 'adhoc':
                    $baseURL = 'https://cdn-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
                default:
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
            }
            $profileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';
            $userJobTitleCompany = $user->getJobTitle() && $user->getCompany() ? $user->getJobTitle() . ' at ' . $user->getCompany() : $user->getJobTitle();

            /* $send_grid_options = array(
              'sub' =>
              array(
              ':logo_link' => array($link),
              ':logo_name_link' => array($link),
              ':sender_first_name' => array($user->getName()),
              ':sender_last_name' => array($user->getLastname()),
              ':sender_profile_link' => array($profileLink),
              ':sender_picture_link' => array($profileUrl),
              ':sender_job_title' => array($user->getJobTitle()),
              ':sender_company_name' => array($user->getCompany()),
              ':sender_truncated_200char_message' => array(substr(strip_tags($mail->content), 0, 200)),
              ':sender_message_link' => array($replyLink)
              ),
              'filters' => array(
              'templates' => array(
              'settings' => array(
              'enable' => 1,
              'template_id' => $this->container->getParameter('template_new_message_id')
              )
              )
              )
              );

              $params = array(
              'to' => $receiver->getEmail(),
              'from' => "noreply@mobintouch.com",
              'fromname' => "Mobintouch",
              'subject' => $user->getName() . ' sent you a new message',
              'html' => " ",
              'x-smtpapi' => json_encode($send_grid_options),
              );

              if ($this->get('kernel')->getEnvironment() != 'dev') {
              Utility::sendgrid_mail($params);
              } */

            //New Sendgrid v3 api
            $params = array(
                'personalizations' => array(
                    array(
                        'to' => array(
                            array(
                                'email' => $receiver->getEmail()
                            )
                        ),
                        'substitutions' => array(
                            ':logo_link' => $link,
                            ':logo_name_link' => $link,
                            ':sender_first_name' => $user->getName(),
                            ':sender_last_name' => $user->getLastname(),
                            ':sender_profile_link' => $profileLink,
                            ':sender_picture_link' => $profileUrl,
                            ':sender_job_title_at_company' => $userJobTitleCompany,
                            ':sender_truncated_200char_message' => substr(strip_tags($mail->content), 0, 200),
                            ':sender_message_link' => $replyLink
                        )
                    ),
                ),
                'from' => array(
                    'email' => "noreply@mobintouch.com",
                    'name' => "Mobintouch"
                ),
                'subject' => $user->getName() . ' sent you a new message',
                'content' => array(array(
                        'type' => 'text/html',
                        'value' => ' '
                    )
                ),
                'template_id' => $this->container->getParameter('template_new_message_id'),
                'asm' => array(
                    'group_id' => $this->container->getParameter('group_message')
                )
            );
            if ($this->get('kernel')->getEnvironment() != 'dev') {
                Utility::sendgrid_mail(json_encode($params));
            }
        }
        $this->updateProfilePercentage($user);
        return new JsonResponse(array('count' => $count, 'quotaExceeded' => false));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Send message with attachment",
     *  parameters={
     *      {"name"="message", "dataType"="string", "required"=true, "description"="message text"},
     *  },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function sendMessageAction(Request $request) {
        $user = $this->getCurrentUser();
        $count = 0;
        if (!$user instanceof User) {
            throw new NotFoundHttpException();
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $receiverId = $request->request->get('receiver');
        $message = $request->request->get('message');
        $receiver = $dm->createQueryBuilder('DataBaseBundle:User')
                ->field('id')->equals($receiverId)
                ->getQuery()
                ->getSingleResult();

        if (!$receiver instanceof User) {
            throw new BadRequestHttpException();
        }

        $exceptions = array('karimbensfia', 'andrespichuchobustamante');
        if (in_array($user->getUsername(), $exceptions)) {
            $defaultQuota = 100; // Exceptional Users
        } else {
            $defaultQuota = 15; //Default Quota for other users
        }

        $lastMonth = intval(strtotime("-1 month") * 1000);

        $count = $dm->createQueryBuilder('DataBaseBundle:Mail')
                ->field('fromID')->equals($user->getId())
                ->field('date')->gte($lastMonth)
                ->getQuery()
                ->execute()
                ->count();

        if ($count >= $defaultQuota) {
            return new JsonResponse(array('count' => $count, 'quotaExceeded' => true));
        }

        $newDate = time() * 1000;

        $newTouchMail = array(
            'content' => $request->request->get('message'),
            'date' => $newDate,
            'senderID' => $user->getId(),
            'receiverID' => $receiver->getId()
        );

        $root = getcwd();
        $attachments = array();
        $realpath = "/attachments/message/";
        $env = $this->get('kernel')->getEnvironment();
        if ($env == 'dev')
            $copypath = $root . "/../../mobntouch/src/cdn";
        else
            $copypath = $root . "/../../web/src/cdn";

        foreach ($_FILES as $file) {
            $fileDes = $realpath . $user->getUsername() . '-' . uniqid() . '-' . $file['name'];
            move_uploaded_file($file['tmp_name'], $copypath . $fileDes);
            $attachments[] = array(
                'attachment' => $fileDes,
                'type' => $file['type'],
                'size' => $file['size']
            );
        }

        $dm->createQueryBuilder('DataBaseBundle:Mail')
                ->insert()
                ->multiple(false)
                //->field("subject")->set($mail->subject)
                ->field("content")->set($message)
                ->field("attachments")->set($attachments)
                ->field("date")->set($newDate)
                ->field("updateDate")->set($newDate)
                ->field("read")->set(false)
                ->field("fromID")->set($user->getId())
                ->field("fromCurrentID")->set($user->getId())
                ->field("senderName")->set($user->getName() . " " . $user->getLastname())
                ->field("senderAvatar")->set($user->getAvatar() ? $user->getAvatar() : null)
                ->field("toID")->set($receiver->getId())
                ->field("toCurrentID")->set($receiver->getId())
                ->field("receiverName")->set($receiver->getName() . " " . $receiver->getLastname())
                ->field("receiverAvatar")->set($receiver->getAvatar() ? $receiver->getAvatar() : null)
                ->field("mails")->set(array($newTouchMail))
                ->field("rated")->set(false)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $responseRate = ($receiver->getTotalRepliedEmails() / ($receiver->getTotalReceivedEmails() + 1) ) * 100;


        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($receiver->getId())
                ->field("emailsNotifications")->inc(1)
                ->field("totalReceivedEmails")->inc(1)
                ->field("responseRate")->set(floatval($responseRate))
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field("totalSentEmails")->inc(1)
                ->field('updateDate')->set(time())
                ->upsert(false)
                ->getQuery()
                ->execute();
        $dm->flush();
        $dm->clear();

        $this->updateResponseRate($receiver, $responseRate, $receiver->getTotalReceivedEmails() + 1);

        $settings = $receiver->getSettings();
        if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_touchmail']) and $settings['notifications'][0]['email_touchmail']) {

            $parts = parse_url($_SERVER['HTTP_REFERER']);
            $link = 'https://' . $parts["host"];
            $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
            $replyLink = 'https://' . $parts["host"] . "/touchmail/inbox/";
            switch ($this->get('kernel')->getEnvironment()) {
                case 'adhoc':
                    $baseURL = 'https://cdn-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
                default:
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
            }
            $profileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';

            $send_grid_options = array(
                'sub' =>
                array(
                    ':logo_link' => array($link),
                    ':logo_name_link' => array($link),
                    ':sender_first_name' => array($user->getName()),
                    ':sender_last_name' => array($user->getLastname()),
                    ':sender_profile_link' => array($profileLink),
                    ':sender_picture_link' => array($profileUrl),
                    ':sender_job_title' => array($user->getJobTitle()),
                    ':sender_company_name' => array($user->getCompany()),
                    ':sender_truncated_200char_message' => array(substr(strip_tags($message), 0, 200)),
                    ':sender_message_link' => array($replyLink)
                ),
                'filters' => array(
                    'templates' => array(
                        'settings' => array(
                            'enable' => 1,
                            'template_id' => $this->container->getParameter('template_new_message_id')
                        )
                    )
                )
            );

            $params = array(
                'to' => $receiver->getEmail(),
                'from' => "noreply@mobintouch.com",
                'fromname' => "Mobintouch",
                'subject' => $user->getName() . ' sent you a new message',
                'html' => " ",
                'x-smtpapi' => json_encode($send_grid_options),
            );

            if ($this->get('kernel')->getEnvironment() != 'dev') {
                Utility::sendgrid_mail($params);
            }
        }

        $this->updateProfilePercentage($user);
        return new JsonResponse(array('count' => $count, 'quotaExceeded' => false));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function replyTouchMailAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        $responseRate = 0;

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $mail = $request->mail;
            $content = $request->reply;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $receiver = $dm->createQueryBuilder('DataBaseBundle:User')->field('_id')->notEqual($user->getId());
            $receiver->addOr($receiver->expr()->field('_id')->equals($mail->fromID))->addOr($receiver->expr()->field('_id')->equals($mail->toID));
            $receiver = $receiver->getQuery()->getSingleResult();

            if (!$receiver instanceof User) {
                throw new BadRequestHttpException();
            }

            /* $receiver = $dm->createQueryBuilder('DataBaseBundle:User')
              ->field('_id')->notEqual($user->getId())
              ->field('_id')->equals($mail->fromID)
              ->getQuery()
              ->getSingleResult();

              if(!$receiver instanceof User){

              $receiver = $dm->createQueryBuilder('DataBaseBundle:User')
              ->field('_id')->notEqual($user->getId())
              ->field('_id')->equals($mail->toID)
              ->getQuery()
              ->getSingleResult();

              if(!$receiver instanceof User){
              throw new BadRequestHttpException();
              }

              } */

            $mail = $dm->createQueryBuilder('DataBaseBundle:Mail')
                    ->field("_id")->equals($mail->id)
                    ->limit(1)
                    ->getQuery()
                    ->getSingleResult();

            $rated = $mail->getRated();

            if (!$rated) {
                $mails = $mail->getMails();
                foreach ($mails as $m) {
                    if ($m['senderID'] != $user->getId()) {
                        $rated = true;
                        $responseRate = 0;
                        if ($user->getTotalReceivedEmails() && is_numeric($user->getTotalReceivedEmails()) && $user->getTotalReceivedEmails() > 0) {
                            $responseRate = (($user->getTotalRepliedEmails() + 1) / $user->getTotalReceivedEmails() ) * 100;
                        }

                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the User
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId())

// Update found User Touch Mail Counter
//->field("totalSentEmails")->inc(1)
                                ->field("responseRate")->set(floatval($responseRate))
                                ->field("totalRepliedEmails")->set(intval($user->getTotalRepliedEmails() + 1))
                                ->field('updateDate')->set(time())

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        $dm->flush();
                        $dm->clear(); // Detaches all objects from Doctrine!

                        $this->updateResponseRate($user, $responseRate, $receiver->getTotalReceivedEmails());


                        break;
                    }
                }
            }

            $newDate = time() * 1000;

            $reply = array(
                'content' => $content,
                'date' => $newDate,
                'senderID' => $user->getId(),
                'receiverID' => $receiver->getId()
            );

/// Insert DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Mail')
// Insert
                    ->update()
                    ->multiple(false)
                    ->field("_id")->equals($mail->id)

// UPDATE
                    ->field("content")->set($content)
                    ->field("updateDate")->set($newDate)
                    ->field("read")->set(false)
                    ->field("fromCurrentID")->set($user->getId())
//->field("senderName")->set($user->getName()." ".$user->getLastname())
//->field("senderAvatar")->set($user->getAvatar()?$user->getAvatar():null)
                    ->field("toCurrentID")->set($receiver->getId())
//->field("receiverName")->set($receiver->getName()." ".$receiver->getLastname())
//->field("receiverAvatar")->set($receiver->getAvatar()?$receiver->getAvatar():null)
                    ->field("mails")->addToSet($reply)
                    ->field("rated")->set($rated)

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!


            if ($mail->getRead() == true) {
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the User
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($receiver->getId())

// Update found User Touch Mail Counter
                        ->field("emailsNotifications")->inc(1)
                        ->field('updateDate')->set(time())
//->field("totalReceivedEmails")->inc(1)
//->field("responseRate")->set(intval($receiver->get))
// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }

            $settings = $receiver->getSettings();
            if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_touchmail']) and $settings['notifications'][0]['email_touchmail']) {

                $parts = parse_url($_SERVER['HTTP_REFERER']);
                $link = 'https://' . $parts["host"];
                $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                $replyLink = 'https://' . $parts["host"] . "/touchmail/inbox/";
                switch ($this->get('kernel')->getEnvironment()) {
                    case 'adhoc':
                        $baseURL = 'https://cdn-dev.mobintouch.com';
                        break;
                    case 'prod':
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                    default:
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                }
                $profileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';

                $send_grid_options = array(
                    'sub' =>
                    array(
                        ':logo_link' => array($link),
                        ':logo_name_link' => array($link),
                        ':sender_first_name' => array($user->getName()),
                        ':sender_last_name' => array($user->getLastname()),
                        ':sender_profile_link' => array($profileLink),
                        ':sender_picture_link' => array($profileUrl),
                        ':sender_job_title' => array($user->getJobTitle()),
                        ':sender_company_name' => array($user->getCompany()),
                        ':sender_truncated_200char_message' => array(substr(strip_tags($content), 0, 200)),
                        ':sender_message_link' => array($replyLink)
                    ),
                    'filters' => array(
                        'templates' => array(
                            'settings' => array(
                                'enable' => 1,
                                'template_id' => $this->container->getParameter('template_new_message_id')
                            )
                        )
                    )
                );

                $params = array(
                    'to' => $receiver->getEmail(),
                    'from' => "noreply@mobintouch.com",
                    'fromname' => "Mobintouch",
                    'subject' => $user->getName() . ' sent you a new message',
                    'html' => " ",
                    'x-smtpapi' => json_encode($send_grid_options),
                );

                if ($this->get('kernel')->getEnvironment() != 'dev') {
                    Utility::sendgrid_mail($params);
                }
            }
            /*
              $dm->createQueryBuilder('DataBaseBundle:User')
              // Find the User
              ->update()
              ->multiple(false)
              ->field('_id')->equals($user->getId())

              // Update found User Touch Mail Counter
              //->field("totalSentEmails")->inc(1)
              //->field("responseRate")->set(intval($receiver->get))

              // Options
              ->upsert(false)
              ->getQuery()
              ->execute(); */
        }

        return new JsonResponse($responseRate);
    }

##### SOCIAL FUNCTIONS #####

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialFeedAction(Request $request) {
// THIS FUNCTION MUST BE REFACTORIZED !!!!
// Get the User
        $user = $this->getCurrentUser();
        $feed = array();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $limit = 30;
            $filter = $request->filter;
            $type = $request->type;
            $skip = intval($request->skip);
            if (!isset($skip) or ! $skip)
                $skip = 0;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $lastMonth = strtotime("-1 month");

            $myInTouch = array();
            $myFollowing = array();
            $inTouch = $user->getInTouch();
            $following = $user->getFollowing();
            if ($inTouch) {
                foreach ($inTouch as $p) {
                    if (intval($p['status']) == 3) {
// ONLY VALIDATED INTOUCH
                        $myInTouch[] = $p['id'];
                    }
                }
            }
            if ($following) {
                foreach ($following as $f) {
                    $myFollowing[] = $f['id'];
                }
            }

//INTOUCH UPDATES 
            $group = $dm->createQueryBuilder('DataBaseBundle:Update')
                            //->distinct('updateID')
                            ->field('updateID')->exists(true)
                            ->field('date')->gte($lastMonth)
                            ->field('userID')->in($myInTouch)
                            ->field('inTouchID')->notEqual($user->getId());

            if ($filter != 'all')
                $group->field('filter')->equals($filter);

            $group = $group
                    ->sort('date', 1) // Reverse!! In order to get the last in the array $grouped
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();


            $all = array();
            $groupedIDs = array();
            foreach ($group as $f) {
                $all[$f['updateID']] = $f;
                $groupedIDs[] = $f['updateID'];
            }


// NORMAL UPDATES
            $normal = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('date')->gte($lastMonth)
                            ->field('_id')->notIn($groupedIDs)
                            ->field('updateID')->exists(false);

            if ($filter != 'all')
                $normal->field('filter')->equals($filter);

            $normal->addOr($normal->expr()
                            ->field('userID')->in($myInTouch)
                            ->field('inTouchID')->notEqual($user->getId())
            );

            $normal->addOr($normal->expr()
                            ->field('userID')->equals($user->getId())
                            ->field('type')->equals(7)
            );

            if ($type != 'all') {
                $normal->addOr($normal->expr()
                                ->field('companyID')->in($myFollowing)
                                ->field('action')->notEqual('follow')
                );
            } else {
                $normal->addOr($normal->expr()
                                ->field('companyID')->exists(true)
                );
            }

            if ($type == 'all') {
                $normal->addOr($normal->expr()->field('newsID')->exists(true));
            }

            $normal = $normal->sort('date', -1)
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();


            foreach ($normal as $f) {
                $all[] = $f;
            }

            usort($all, function($a, $b) {
                return $a['date'] < $b['date'];
            });

            $q2 = array_slice($all, $skip * $limit, $limit);

            $counter = count($all);

            foreach ($q2 as $f) {
                if (($f['isLike'] == true or ( isset($f['isComment']) and $f['isComment'] == true)) and isset($f['updateID'])) {
// LIKE FEED
                    $l = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('id')->equals($f['updateID'])
                            ->limit(1)
                            ->getQuery()
                            ->getSingleResult();

                    if ($l) {

// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!

                        $f['likeUserID'] = $f['userID'];
                        $f['likeUsername'] = $f['username'];
                        $f['likeUserFullName'] = $f['userFullName'];
                        $f['likeUserAvatar'] = $f['userAvatar'];

                        $f['date'] = $l->getDate();
                        $f['userID'] = $l->getUserID();
                        $f['username'] = $l->getUsername();
                        $f['userFullName'] = $l->getUserFullName();
                        $f['userAvatar'] = $l->getUserAvatar();

                        $f['type'] = $l->getType();
                        $f['action'] = $l->getAction();
                        $f['filter'] = $l->getFilter();
                        $f['likesCounter'] = $l->getLikesCounter();
                        $f['liked'] = $l->getLiked();
                        $f['comments'] = $l->getComments();

                        if ($l->getType() == 2) {
                            $f['companyID'] = $l->getCompanyID();
                            $f['companyUsername'] = $l->getCompanyUsername();
                            $f['companyAvatar'] = $l->getCompanyAvatar();
                            $f['companyFullName'] = $l->getCompanyFullName();
//$f['companyFollowers'] = $l->getCompanyFollowers();
                        }
                        if ($l->getType() == 3) {
                            $f['inTouchID'] = $l->getInTouchID();
                            $f['inTouchUsername'] = $l->getInTouchUsername();
                            $f['inTouchAvatar'] = $l->getInTouchAvatar();
                            $f['inTouchFullName'] = $l->getInTouchFullName();
                            $f['inTouchJobTitle'] = $l->getInTouchJobTitle();
                            $f['inTouchCompany'] = $l->getInTouchCompany();
                        }
                        if ($l->getType() == 5 || $l->getType() == 7) {
                            $f['companyID'] = $l->getCompanyID();
                            $f['companyUsername'] = $l->getCompanyUsername();
                            $f['companyAvatar'] = $l->getCompanyAvatar();
                            $f['companyFullName'] = $l->getCompanyFullName();
                            $f['postText'] = $l->getPostText();
                            $f['postImage'] = $l->getPostImage();
                            $extension_pos = strrpos($l->getPostImage(), '.');
                            $f['postImageOriginal'] = substr($l->getPostImage(), 0, $extension_pos) . '-original' . substr($l->getPostImage(), $extension_pos);
                            $f['postYoutube'] = $l->getPostYoutube();
                            $f['postVimeo'] = $l->getPostVimeo();
                            $f['companyFollowers'] = intval($l->getCompanyFollowers());

                            if ($l->getNewsDate()) {
                                $f['newsTitle'] = $l->getNewsTitle();
                                $f['newsSummary'] = $l->getNewsSummary();
                                $f['newsImage'] = $l->getNewsImage();
                                $extension_pos = strrpos($l->getNewsImage(), '.');
                                $f['newsImageOriginal'] = substr($l->getNewsImage(), 0, $extension_pos) . '-original' . substr($l->getNewsImage(), $extension_pos);
                                $f['newsSource'] = $l->getNewsSource();
                                $f['sourceID'] = $l->getSourceID();
                                $f['newsSourceURL'] = $l->getNewsSourceURL();
                                $f['newsURL'] = $l->getNewsURL();
                                $f['newsDate'] = $l->getNewsDate();
                            }

                            $f['sharedUserAvatar'] = $l->getSharedUserAvatar();
                            $f['sharedUserFullName'] = $l->getSharedUserFullName();
                            $f['sharedUserJobTitle'] = $l->getSharedUserJobTitle();
                            $f['sharedUserCompany'] = $l->getSharedUserCompany();
                            $f['sharedUsername'] = $l->getSharedUsername();

                            $f['sharedCompanyUsername'] = $l->getSharedCompanyUsername();
                            $f['sharedCompanyAvatar'] = $l->getSharedCompanyAvatar();
                            $f['sharedCompanyName'] = $l->getSharedCompanyName();
                            $f['sharedCompanyFollowers'] = intval($l->getSharedCompanyFollowers());
                            $f['sharedCompanyType'] = $l->getSharedCompanyType();
                        }
                        if ($l->getType() == 6) {
                            $f['eventID'] = $l->getEventID();
                            $f['eventUsername'] = $l->getEventUsername();
                            $f['eventFullName'] = $l->getEventFullName();
                            $f['eventText'] = $l->getEventText();
                            $f['eventImg'] = $l->getEventImg();
                            $f['eventLink'] = $l->getEventLink();
                            $f['eventLinkRegister'] = $l->getEventLinkRegister();
                            $f['eventCity'] = $l->getEventCity();
                            $f['eventDate'] = $l->getEventDate();
                        }

                        if ($l->getNewsID()) {
                            $f['newsID'] = $l->getNewsID();
                            $f['newsTitle'] = $l->getNewsTitle();
                            $f['newsSummary'] = $l->getNewsSummary();
                            $f['newsImage'] = $l->getNewsImage();
                            $extension_pos = strrpos($l->getNewsImage(), '.');
                            $f['newsImageOriginal'] = substr($l->getNewsImage(), 0, $extension_pos) . '-original' . substr($l->getNewsImage(), $extension_pos);
                            $f['newsSource'] = $l->getNewsSource();
                            $f['sourceID'] = $l->getSourceID();
                            $f['newsSourceURL'] = $l->getNewsSourceURL();
                            $f['newsURL'] = $l->getNewsURL();
                            $f['newsDate'] = $l->getNewsDate();
                        }

                        $feed[] = $f;
                    }
                } else {
                    if (array_key_exists('postImage', $f) && !empty($f['postImage'])) {
                        $extension_pos = strrpos($f['postImage'], '.');
                        $f['postImageOriginal'] = substr($f['postImage'], 0, $extension_pos) . '-original' . substr($f['postImage'], $extension_pos);
                    }
                    $feed[] = $f;
                }
            }

            $user->setFeedAccessTime(time());
            $dm->persist($user);
            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse(array('counter' => $counter, 'feed' => $feed));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getCompanyPostAction(Request $request, $companyUsername, $skip) {
        $limit = 30;

        $feed = array();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET FEED
        $q1 = $dm->createQueryBuilder('DataBaseBundle:Update')
                ->field('companyUsername')->equals($companyUsername)
                ->field('type')->equals(5)
                ->field('isLike')->equals(false)
                ->sort('_id', -1)
                ->limit($limit)
                ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                ->hydrate(false)
                ->getQuery()
                ->execute();

        foreach ($q1 as $f) {
            if (array_key_exists('postImage', $f) && !empty($f['postImage'])) {
                $extension_pos = strrpos($f['postImage'], '.');
                $f['postImageOriginal'] = substr($f['postImage'], 0, $extension_pos) . '-original' . substr($f['postImage'], $extension_pos);
            }
            $feed[] = $f;
        }


        return new JsonResponse($feed);
    }

    public function storeStasticsAction(Request $request, $postid, $type) {
        $user = $this->getCurrentUser();

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

//$postid = $request->request->get('postid');
//$type = $request->request->get('type');
//$from = $request->request->get('from');

        /*
          $data = array();
          $data['from'] = $from;
          $data['datetime'] = time();

          if ($type == 'click')
          $data['on'] = $request->request->get('on');

          if ($type == 'interaction')
          $data['action'] = $request->request->get('action');

          if (!$user instanceof User) {
          return new JsonResponse(array('data' => 'calleee..'));
          } else {
          $data['userID'] = $user->getId();
          $data['username'] = $user->getUsername();
          $data['name'] = $user->getName();
          $data['lastname'] = $user->getLastname();
          $data['avatar'] = $user->getAvatar();
          }
         */


        /* array(
          'userID' => $user->getId(),
          'username' => $user->getUsername(),
          'name' => $user->getName(),
          'lastname' => $user->getLastname(),
          'avatar' => $user->getAvatar(),
          'datetime' => time(),
          'action' => 'like'
          ) */
        /*
          $dm->createQueryBuilder('DataBaseBundle:Update')
          // Find the Campaign
          ->update()
          ->multiple(false)
          ->field('id')->equals($postid)
          ->field($type . "s")->addToSet($data)
          // Options
          ->upsert(false)
          ->getQuery()
          ->execute();
         */
        $dm->createQueryBuilder('DataBaseBundle:Update')
// Find the Campaign
                ->update()
                ->multiple(false)
                ->field('id')->equals(base64_decode($postid))
                ->field(base64_decode($type) . 's')->inc(1)
// Options
                ->upsert(false)
                ->getQuery()
                ->execute();
        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        return new JsonResponse(array(), 204);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialFeedCounterAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        $count = 0;

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $limit = 30;
            $filter = $request->filter;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $lastMonth = strtotime("-1 month");


//if ($type == 'touchfeed') {

            $myInTouch = array();
            $myFollowing = array();
            $inTouch = $user->getInTouch();
            $following = $user->getFollowing();
            if ($inTouch) {
                foreach ($inTouch as $p) {
                    if (intval($p['status']) == 3) {
// ONLY VALIDATED INTOUCH
                        $myInTouch[] = $p['id'];
                    }
                }
            }
            if ($following) {
                foreach ($following as $f) {
                    $myFollowing[] = $f['id'];
                }
            }

//INTOUCH UPDATES 
            $group = $dm->createQueryBuilder('DataBaseBundle:Update')
//->distinct('updateID')
                            ->field('date')->gte(intval($user->getFeedAccessTime()))
                            ->field('updateID')->exists(true)
                            ->field('userID')->notEqual($user->getId())
                            ->field('userID')->in($myInTouch)
                            ->field('inTouchID')->notEqual($user->getId());

            if ($filter != 'all')
                $group->field('filter')->equals($filter);

            $group = $group
                    ->sort('date', 1) // Reverse!! In order to get the last in the array $grouped
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();


            $all = array();
            $groupedIDs = array();
            foreach ($group as $f) {
                $all[$f['updateID']] = $f;
                $groupedIDs[] = $f['updateID'];
            }

// NORMAL UPDATES
            $normal = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('date')->gte(intval($user->getFeedAccessTime()))
                            ->field('userID')->notEqual($user->getId())
                            ->field('_id')->notIn($groupedIDs)
                            ->field('updateID')->exists(false);

            if ($filter != 'all')
                $normal->field('filter')->equals($filter);

            $normal->addOr($normal->expr()
                            ->field('userID')->in($myInTouch)
                            ->field('inTouchID')->notEqual($user->getId())
            );

            $normal->addOr($normal->expr()
                            ->field('companyID')->in($myFollowing)
                            ->field('action')->notEqual('follow')
            );

            $normal = $normal->sort('date', -1)
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();

            foreach ($normal as $f) {
                $all[] = $f;
            }

            $count = count($all);
        }

        return new JsonResponse($count);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialLikeAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $updateID = $request->updateID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $update = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('id')->equals($updateID)
                    ->getQuery()
                    ->getSingleResult();

            /* $dm->createQueryBuilder('DataBaseBundle:Update')
              ->update()
              ->multiple(false)
              ->field('updateID')->equals($updateID)
              ->field('interactions')->inc(1)
              ->getQuery()
              ->execute(); */

            if ($update) {

// LIKE THE UPDATE
                $q = $dm->createQueryBuilder('DataBaseBundle:Update')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('id')->equals($updateID)
                                ->field('liked.userID')->notEqual($user->getId());

//if ($update->getType() == 5)
//$q->field('interactions')->inc(1);
                $userIsAdministrator = false;
                if (is_array($user->getCompanyPage())) {
                    $userIsAdministrator = array_key_exists('administrator', $user->getCompanyPage());
                }
                if ($userIsAdministrator) {
                    $userCompany = $user->getCompanyPage()['administrator']['company'];
                    if ($update->getType() == 5 && $update->getAction() == 'companyPost' && $userCompany != $update->getCompanyUsername())
                        $q->field('interactions')->inc(1);
                } else {
                    if ($update->getType() == 5 && $update->getAction() == 'companyPost')
                        $q->field('interactions')->inc(1);
                }



// Update found Campaign
                $q->field("likesCounter")->set(intval(count($update->getLiked())) + 1)
                        ->field("liked")->addToSet(array(
                            'userID' => $user->getId(),
                            'username' => $user->getUsername(),
                            'name' => $user->getName(),
                            'lastname' => $user->getLastname(),
                            'avatar' => $user->getAvatar(),
                            'jobTitle' => $user->getJobTitle(),
                            'company' => $user->getCompany(),
                        ))

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!


                $timing = strtotime("-1 hour");

                $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                                ->field('userID')->equals($user->getId())
                                ->field('updateID')->equals($updateID)
//->field('action')->equals('like')
                                ->field('date')->gte($timing)
                                ->getQuery()->execute()->count();


                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->update()
                        ->multiple(false)
                        ->field('userID')->equals($user->getId())
                        ->field('updateID')->equals($updateID)
                        ->field('isLike')->equals(true)
                        ->field('isComment')->equals(false)
                        ->field("date")->set(time())
                        ->field("isLike")->set(true)
                        ->field("isComment")->set(false)
                        ->field("updateID")->set($updateID)
                        ->field("userID")->set($user->getId())
                        ->field("username")->set($user->getUsername())
                        ->field("userAvatar")->set($user->getAvatar())
                        ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                        ->field("userJobTitle")->set($user->getJobTitle())
                        ->field("type")->set($update->getType())
                        ->field("filter")->set($update->getFilter())

// Options
                        ->upsert(true)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!

                if ($updateFeed == 0) {

                    /* $dm->createQueryBuilder('DataBaseBundle:Update')
                      ->insert()
                      ->field("date")->set(time())
                      ->field("isLike")->set(true)
                      ->field("updateID")->set($updateID)
                      ->field("userID")->set($user->getId())
                      ->field("username")->set($user->getUsername())
                      ->field("userAvatar")->set($user->getAvatar())
                      ->field("userFullName")->set($user->getName()." ".$user->getLastname())
                      ->field("userJobTitle")->set($user->getJobTitle())
                      ->field("type")->set($update->getType())
                      ->field("filter")->set($update->getFilter())
                      ->getQuery()
                      ->execute();

                      $dm->flush();
                      $dm->clear(); // Detaches all objects from Doctrine!
                     */

                    if ($update->getAction() == 'companyPost') {  // if company post
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
//$triggeringLikesNumber = 2;
//if($update->getLikesCounter()==$triggeringLikesNumber){
                        $company = $dm->createQueryBuilder('DataBaseBundle:Company')
                                ->field('_id')->equals($update->getCompanyID())
                                ->getQuery()
                                ->getSingleResult();

                        if ($company) {

                            $admins = $company->getAdministrators();
                            if ($admins) {
                                foreach ($admins as $admin) {

                                    if ($admin['id'] != $user->getId()) {

                                        $tempAdmin = $dm->createQueryBuilder('DataBaseBundle:User')
                                                ->field('_id')->equals($admin['id'])
                                                ->getQuery()
                                                ->getSingleResult();

                                        if ($tempAdmin) {

                                            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                                    ->update()
                                                    ->multiple(false)
                                                    ->field('_id')->equals($tempAdmin->getId())

// Update found Campaign
                                                    ->field('alertsNotifications')->inc(1)
                                                    ->field('alerts')->push(array('$each' => array(array(
                                                                'id' => $user->getId() . time(),
                                                                'type' => 4,
                                                                'read' => false,
                                                                'action' => 'likes ' . $company->getName() . ' post',
                                                                'username' => $user->getUsername(),
                                                                'name' => $user->getName(),
                                                                'lastname' => $user->getLastname(),
                                                                'avatar' => $user->getAvatar(),
                                                                'date' => time() * 1000
                                                            )), '$slice' => -90))
                                                    ->field('updateDate')->set(time())

// Options
                                                    ->upsert(false)
                                                    ->getQuery()
                                                    ->execute();

                                            $settings = $tempAdmin->getSettings();
                                            if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_companylike']) and $settings['notifications'][0]['email_companylike']) {

                                                $parts = parse_url($_SERVER['HTTP_REFERER']);
                                                $profileLink = 'https://' . $parts["host"] . "/profile/" . $user->getUsername();
                                                $postLink = 'https://' . $parts["host"] . "/mycompany";

                                                switch ($this->get('kernel')->getEnvironment()) {
                                                    case 'adhoc':
                                                        $baseURL = 'https://cdn-dev.mobintouch.com';
                                                        break;
                                                    case 'prod':
                                                        $baseURL = 'https://cdn.mobintouch.com';
                                                        break;
                                                    default:
                                                        $baseURL = 'https://cdn.mobintouch.com';
                                                        break;
                                                }

                                                $message = \Swift_Message::newInstance()
                                                        ->setSubject($user->getName() . " " . $user->getLastname() . ' liked your company post')
                                                        ->setFrom(array('noreply@mobintouch.com' => $user->getName() . " " . $user->getLastname()))
                                                        ->setTo($tempAdmin->getEmail())
                                                        ->setContentType("text/html")
                                                        ->setBody(
                                                        $this->renderView(
                                                                'APIBundle:Mail:likeCompanyPost.html.twig', array('title' => 'New like', 'baseURL' => $baseURL, 'user' => $user, 'profileLink' => $profileLink, 'postLink' => $postLink, 'post' => $update, 'unsubcribe' => 1)
                                                        )
                                                );
                                                if ($this->get('kernel')->getEnvironment() != 'dev')
                                                    $this->get('mailer')->send($message);

                                                $players = array();
                                                if ($tempAdmin->getPlayerId()) {
                                                    $players[] = $tempAdmin->getPlayerId();
                                                    switch ($this->get('kernel')->getEnvironment()) {
                                                        case 'adhoc':
                                                            $baseURL = 'https://www-dev.mobintouch.com';
                                                            break;
                                                        case 'prod':
                                                            $baseURL = 'https://www.mobintouch.com';
                                                            break;
                                                        default:
                                                            $baseURL = 'https://www.mobintouch.com';
                                                            break;
                                                    }
                                                    $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' likes ' . $company->getName() . ' post', $players, $baseURL . '/mycompany');
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
//}
                    } else { // else = user action
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!

                        /*
                          if($update->getUserID()!=$user->getId()){


                          $actionText =  "likes your new app";
                          switch($update->getAction()){
                          case "profile" :
                          $actionText =  "likes your profile card update";
                          break;
                          case "buyTraffic" :
                          $actionText =  "likes your box buying update";
                          break;
                          case "sellTraffic" :
                          $actionText =  "likes your box selling update";
                          break;
                          case "competences" :
                          $actionText =  "likes your competences update";
                          break;
                          case "experiences" :
                          $actionText =  "likes your experiences update";
                          break;
                          case "summary" :
                          $actionText =  "likes your summary update";
                          break;
                          case "payment" :
                          $actionText =  "likes your payment options update";
                          break;
                          case "tracking" :
                          $actionText =  "likes your tracking solutions update";
                          break;
                          case "apps" :
                          $actionText =  "likes your new app";
                          break;
                          case "intouch" :
                          $actionText =  "likes your new inTouch relation with ".$update->getInTouchFullName();
                          break;
                          case "companyPage" :
                          $actionText =  "likes your company page creation";
                          break;
                          case "event" :
                          $actionText =  "likes that you attend to ".$update->getEventFullName();
                          break;
                          case "userPost" :
                          $actionText =  "likes your post";
                          break;
                          default:
                          $actionText =  "likes your profile update";
                          break;
                          }


                          $dm->createQueryBuilder('DataBaseBundle:User')
                          // Find the Campaign
                          ->update()
                          ->multiple(false)
                          ->field('_id')->equals($update->getUserID())

                          // Update found Campaign
                          ->field('alertsNotifications')->inc(1)
                          ->field('alerts')->push(array('$each' => array(array(
                          'id' => $user->getId().time(),
                          'type' => 7,
                          'read' => false,
                          'action' => $actionText,
                          'username' => $user->getUsername(),
                          'name' => $user->getName(),
                          'lastname' => $user->getLastname(),
                          'avatar' => $user->getAvatar(),
                          'date' => time()*1000
                          )), '$slice'=> -90))
                          ->field('updateDate')->set(time())


                          // Options
                          ->upsert(false)
                          ->getQuery()
                          ->execute();

                          } */
                    }
                }
            } else {
                throw new BadRequestHttpException();
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialUnlikeAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $updateID = $request->updateID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $update = $dm->createQueryBuilder('DataBaseBundle:Update')->field('id')->equals($updateID)->getQuery()->getSingleResult();

            if ($update) {


                $likeds = $update->getLiked();

                $liked = array();
                foreach ($likeds as $lks) {
                    if ($lks['userID'] == $user->getId()) {
                        $liked = $lks;
                        break;
                    }
                }

                $dm->createQueryBuilder('DataBaseBundle:Update')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($updateID)

// Update found Campaign
                        ->field("likesCounter")->set(intval($update->getLikesCounter()) - 1)
                        ->field("liked")->pull($liked)
                        /* ->field("liked")->pull(array(
                          'userID' => $user->getId(),
                          'username' => $user->getUsername(),
                          'name' => $user->getName(),
                          'lastname' => $user->getLastname(),
                          'avatar' => $user->getAvatar(),
                          'jobTitle' => $user->getJobTitle(),
                          'company' => $user->getCompany(),
                          )) */


// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

// Delete Like action
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->limit(1)
                        ->field("isLike")->equals(true)
                        ->field("updateID")->equals($updateID)
                        ->field("userID")->equals($user->getId())
                        ->field("username")->equals($user->getUsername())
                        ->field("type")->equals($update->getType())
                        ->field("filter")->equals($update->getFilter())
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            } else {
                throw new BadRequestHttpException();
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialDeleteCompanyPostAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $deleteID = $request->deleteID;

            $update = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('id')->equals($deleteID)
                    ->getQuery()
                    ->getSingleResult();

            if ($update) {

// Delete POST action
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isLike")->notEqual(true)
                        ->field("isComment")->notEqual(true)
                        ->field("id")->equals($deleteID)
                        ->field("companyUsername")->equals($companyUsername)
                        ->field('type')->equals(5)
                        ->field('action')->equals('companyPost')
                        ->getQuery()
                        ->execute();

// Delete POST action
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isLike")->equals(true)
                        ->field("updateID")->equals($deleteID)
//->field("companyUsername")->equals($companyUsername)
                        ->field('type')->equals(5)
                        ->getQuery()
                        ->execute();

// Delete POST action
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isComment")->equals(true)
                        ->field("updateID")->equals($deleteID)
//->field("companyUsername")->equals($companyUsername)
                        ->field('type')->equals(5)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            } else {
                throw new BadRequestHttpException();
            }
        }
#$company->companyPercentage=$this->countCompanyPercentage($user);
        $updatedData = $this->countCompanyPercentage($user);
        $company->companyPercentage = $updatedData["percentage"];
        $company->companyPoints = $updatedData["points"];
        return new JsonResponse($company);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialDeleteUserPostAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $deleteID = $request->deleteID;

            $update = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field("isLike")->equals(false)
                    ->field("id")->equals($deleteID)
                    ->field("userID")->equals($user->getId())
                    ->field('type')->equals(7)
                    ->field('action')->equals('userPost')
                    ->getQuery()
                    ->getSingleResult();

            if ($update) {

// Delete POST action
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isLike")->notEqual(true)
                        ->field("isComment")->notEqual(true)
                        ->field("id")->equals($deleteID)
                        ->field("userID")->equals($user->getId())
                        ->field('type')->equals(7)
                        ->field('action')->equals('userPost')
                        ->getQuery()
                        ->execute();

// Delete POST likes updates
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isLike")->equals(true)
                        ->field("updateID")->equals($deleteID)
                        ->field('type')->equals(7)
//->field('action')->equals('userPost')
                        ->getQuery()
                        ->execute();

// Delete POST comments updates
                $dm->createQueryBuilder('DataBaseBundle:Update')
                        ->remove()
                        ->field("isComment")->equals(true)
                        ->field("updateID")->equals($deleteID)
                        ->field('type')->equals(7)
//->field('action')->equals('userPost')
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            } else {
                throw new BadRequestHttpException();
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialNewsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        $news = array();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $skip = intval($request->skip);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $limit = 30; // MUST BE CHANGED ON CLIENT SIDE ALSO
// GET NEWS FEED
            $temp = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('newsID')->exists(true)
                    ->limit($limit)
                    ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                    ->sort('date', -1)
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();

// GET NEWS FEED
            $counter = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('newsID')->exists(true)
                    ->getQuery()
                    ->execute()
                    ->count();

            foreach ($temp as $dbnews) {
                $news[] = $dbnews;
            }
        }

        return new JsonResponse(array('counter' => $counter, 'news' => $news));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialMyPostsAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        $posts = array();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $skip = intval($request->skip);

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $limit = 30; // MUST BE CHANGED ON CLIENT SIDE ALSO
// GET NEWS FEED
            $temp = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('userID')->equals($user->getId())
                    ->field('type')->equals(intval(7))
                    ->field('isLike')->notEqual(true)
                    ->field('isComment')->notEqual(true)
                    ->limit($limit)
                    ->skip($skip * $limit) // 0x30000, 1x30000, 2x30000, 3x30000
                    ->sort('id', -1)
                    ->hydrate(false)
                    ->getQuery()
                    ->execute();

// GET NEWS FEED
            $counter = $dm->createQueryBuilder('DataBaseBundle:Update')
                    ->field('userID')->equals($user->getId())
                    ->field('type')->equals(intval(7))
                    ->field('isLike')->notEqual(true)
                    ->field('isComment')->notEqual(true)
                    ->getQuery()
                    ->execute()
                    ->count();


            foreach ($temp as $dbnews) {
                $posts[] = $dbnews;
            }
        }

        return new JsonResponse(array('counter' => $counter, 'posts' => $posts));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialCompanyPostAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        $availableExtensions = array("png", "jpg", "jpeg", "gif");

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $companyPage = $user->getCompanyPage();
            if (!$companyPage)
                throw new BadRequestHttpException();
            $companyUsername = $companyPage['administrator']['company'];
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if (!$company)
                throw new BadRequestHttpException();

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $newPost = $request->newPost;
            if (!isset($newPost->newsDate)) {
                $newPost->newsDate = time();
            }

            $time = time();
            $image = null;
            if (isset($newPost->image)) {
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
// INPUT FILE IMAGE
                $isImage = false;
                $dataURI = $newPost->image;
                $isFile = strpos($dataURI, "data");
                if ($isFile === 0) {
                    $isImage = strpos($dataURI, "image");
                    if ($isImage) {
                        $pos1 = strpos($dataURI, "/");
                        $pos2 = strpos($dataURI, ";");
                        $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                        $extension = strtok($extension, '?');
                        $dataURI = 'data://' . substr($dataURI, 5);
                    }
                } else {
                    $extension = pathinfo($dataURI, PATHINFO_EXTENSION); //$extension will be gif, png,...
                    if (!$extension) {
                        foreach ($availableExtensions as $ext) {
                            if (strpos($dataURI, "." . $ext))
                                $extension = $ext;
                        }
                    }
                    $extension = strtok($extension, '?');

                    if (in_array($extension, $availableExtensions))
                        $isImage = true;
                }
                if (!$isImage) {
                    $temp = $this->isImage($dataURI);
                    $isImage = $temp[0];
                    $extension = $temp[1];
                }
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400


                $env = $this->get('kernel')->getEnvironment();
                $realpath = "/img/company/post/";
                if ($env == 'dev')
                    $copypath = "/../../angular/src/cdn" . $realpath;
                else
                    $copypath = "/../../web/src/cdn" . $realpath;

                $root = getcwd();
                $originalFilename = $company->getUsername() . '-' . $time . '-original.' . $extension;
                $imageFilename = $company->getUsername() . '-' . $time . '.' . $extension;
                $fp = fopen($root . $copypath . $originalFilename, "w");
                fwrite($fp, file_get_contents($dataURI));
                fclose($fp);

//exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 500x -quality 100 '.getcwd().$copypath.$imageFilename);
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1200x>' -quality 40 " . getcwd() . $copypath . $imageFilename);

                $image = $realpath . $imageFilename;
//$user->setAvatar($avatar);
            }

            $newsImage = null;
            if (isset($newPost->link) && isset($newPost->newsImage)) {
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
// LINK IMAGE
                $isImage = false;
                $dataURI = $newPost->newsImage;
                $extension = pathinfo($dataURI, PATHINFO_EXTENSION); //$extension will be gif, png,...
                if (!$extension) {
                    foreach ($availableExtensions as $ext) {
                        if (strpos($dataURI, "." . $ext))
                            $extension = $ext;
                    }
                }
                $extension = strtok($extension, '?');

                if (in_array($extension, $availableExtensions))
                    $isImage = true;
                if (!$isImage) {
                    $temp = $this->isImage($dataURI);
                    $isImage = $temp[0];
                    $extension = $temp[1];
                }
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400

                $env = $this->get('kernel')->getEnvironment();
                $realpath = "/img/company/post/";
                if ($env == 'dev')
                    $copypath = "/../../angular/src/cdn" . $realpath;
                else
                    $copypath = "/../../web/src/cdn" . $realpath;

                $root = getcwd();
                $originalFilename = $company->getUsername() . '-' . $time . '-original.' . $extension;
                $imageFilename = $company->getUsername() . '-' . $time . '.' . $extension;
                $fp = fopen($root . $copypath . $originalFilename, "w");
                fwrite($fp, file_get_contents($dataURI));
                fclose($fp);

//exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 500x -quality 100 '.getcwd().$copypath.$imageFilename);
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1200x>' -quality 40 " . getcwd() . $copypath . $imageFilename);

                $newsImage = $realpath . $imageFilename;
//$user->setAvatar($avatar);
            }

            $query = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->insert()
                            ->field("date")->set(time())
//->field("userID")->set($user->getId())
//->field("username")->set($user->getUsername())
//->field("userAvatar")->set($user->getAvatar())
//->field("userFullName")->set($user->getName()." ".$user->getLastname())
//->field("userJobTitle")->set($user->getJobTitle())
                            ->field("type")->set(intval(5))
                            ->field("filter")->set('professional')
                            ->field("action")->set('companyPost')
                            ->field("likesCounter")->set(intval(0))
                            ->field("commentsCounter")->set(intval(0))
                            ->field("liked")->set(array())
                            ->field("isLike")->set(false)
                            ->field("companyID")->set($company->getId())
                            ->field("companyUsername")->set($company->getUsername())
                            ->field("companyAvatar")->set($company->getAvatar())
                            ->field("companyFullName")->set($company->getName())
                            ->field("companyFollowers")->set(intval(count($company->getFollowers())));


            if (isset($newPost->text))
                $query->field("postText")->set($newPost->text);
            if (isset($newPost->image))
                $query->field("postImage")->set($image);
            if (isset($newPost->youtube))
                $query->field("postYoutube")->set($newPost->youtube);
            if (isset($newPost->vimeo))
                $query->field("postVimeo")->set($newPost->vimeo);

            if (isset($newPost->link))
                $query->field("newsTitle")->set($newPost->newsTitle);
            if (isset($newPost->link))
                $query->field("newsImage")->set($newsImage);
            if (isset($newPost->link))
                $query->field("newsSource")->set($newPost->newsSource);
            if (isset($newPost->link))
                $query->field("newsSourceURL")->set($newPost->newsSourceURL);
            if (isset($newPost->link))
                $query->field("newsURL")->set($newPost->newsURL);
            if (isset($newPost->link))
                $query->field("newsDate")->set($newPost->newsDate);

// Share User Profile
            if (isset($newPost->userProfile))
                $query->field("sharedUserAvatar")->set($newPost->sharedUserAvatar);
            if (isset($newPost->userProfile))
                $query->field("sharedUserFullName")->set($newPost->sharedUserFullName);
            if (isset($newPost->userProfile))
                $query->field("sharedUserJobTitle")->set($newPost->sharedUserJobTitle);
            if (isset($newPost->userProfile))
                $query->field("sharedUserCompany")->set($newPost->sharedUserCompany);
            if (isset($newPost->userProfile))
                $query->field("sharedUsername")->set($newPost->sharedUsername);

// Share Company Page
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyUsername")->set($newPost->sharedCompanyUsername);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyAvatar")->set($newPost->sharedCompanyAvatar);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyName")->set($newPost->sharedCompanyName);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyFollowers")->set($newPost->sharedCompanyFollowers);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyType")->set($newPost->sharedCompanyType);

//->field("post")->set($newPost->text)
//->field("postText")->set($newPost->text)

            $query->getQuery()->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }
        $updatedData = $this->countCompanyPercentage($user);
        $company->companyPercentage = $updatedData["percentage"];
        $company->companyPoints = $updatedData["points"];
        return new JsonResponse($company);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialUserPostAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        $availableExtensions = array("png", "jpg", "jpeg", "gif");

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $newPost = $request->newPost;
            if (!isset($newPost->newsDate)) {
                $newPost->newsDate = time();
            }
            $time = time();
            $image = null;
            if (isset($newPost->image)) {
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
// INPUT FILE IMAGE
                $isImage = false;
                $dataURI = $newPost->image;
                $isFile = strpos($dataURI, "data");
                if ($isFile === 0) {
                    $isImage = strpos($dataURI, "image");
                    if ($isImage) {
                        $pos1 = strpos($dataURI, "/");
                        $pos2 = strpos($dataURI, ";");
                        $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
                        $extension = strtok($extension, '?');
                        $dataURI = 'data://' . substr($dataURI, 5);
                    }
                } else {
                    $extension = pathinfo($dataURI, PATHINFO_EXTENSION); //$extension will be gif, png,...
                    if (!$extension) {
                        foreach ($availableExtensions as $ext) {
                            if (strpos($dataURI, "." . $ext))
                                $extension = $ext;
                        }
                    }
                    $extension = strtok($extension, '?');

                    if (in_array($extension, $availableExtensions))
                        $isImage = true;
                }
                if (!$isImage) {
                    $temp = $this->isImage($dataURI);
                    $isImage = $temp[0];
                    $extension = $temp[1];
                }
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400


                $env = $this->get('kernel')->getEnvironment();
                $realpath = "/img/user/post/";
                if ($env == 'dev')
                    $copypath = "/../../angular/src/cdn" . $realpath;
                else
                    $copypath = "/../../web/src/cdn" . $realpath;

                $root = getcwd();
                $originalFilename = $user->getUsername() . '-' . $time . '-original.' . $extension;
                $imageFilename = $user->getUsername() . '-' . $time . '.' . $extension;
                $fp = fopen($root . $copypath . $originalFilename, "w");
                fwrite($fp, file_get_contents($dataURI));
                fclose($fp);

//exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 500x -quality 100 '.getcwd().$copypath.$imageFilename);
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1200x>' -quality 40 " . getcwd() . $copypath . $imageFilename);

                $image = $realpath . $imageFilename;
            }

            $newsImage = null;
            if (isset($newPost->link) && isset($newPost->newsImage)) {
// WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
// LINK IMAGE
                $isImage = false;
                $dataURI = $newPost->newsImage;
                $extension = pathinfo($dataURI, PATHINFO_EXTENSION); //$extension will be gif, png,...
                if (!$extension) {
                    foreach ($availableExtensions as $ext) {
                        if (strpos($dataURI, "." . $ext))
                            $extension = $ext;
                    }
                }
                $extension = strtok($extension, '?');
//return new JsonResponse(array('test1' => image_type_to_mime_type(exif_imagetype($dataURI)), 'test2'=> exif_imagetype($dataURI), 'extension' => $extension, 'dataURI'=> $dataURI, 'available' => $availableExtensions));

                if (in_array($extension, $availableExtensions))
                    $isImage = true;
                if (!$isImage) {
                    $temp = $this->isImage($dataURI);
                    $isImage = $temp[0];
                    $extension = $temp[1];
                }
                if (!$isImage)
                    throw new BadRequestHttpException(); // 400

                $env = $this->get('kernel')->getEnvironment();
                $realpath = "/img/user/post/";
                if ($env == 'dev')
                    $copypath = "/../../mob/mobntouch/src/cdn" . $realpath;
                else
                    $copypath = "/../../web/src/cdn" . $realpath;

                $root = getcwd();
                $originalFilename = $user->getUsername() . '-' . $time . '-original.' . $extension;
                $imageFilename = $user->getUsername() . '-' . $time . '.' . $extension;
                $fp = fopen($root . $copypath . $originalFilename, "w");
                fwrite($fp, file_get_contents($dataURI));
                fclose($fp);

//exec('/usr/bin/convert '.getcwd().$copypath.$originalFilename.' -resize 500x -quality 100 '.getcwd().$copypath.$imageFilename);
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1200x>' -quality 40 " . getcwd() . $copypath . $imageFilename);

                $newsImage = $realpath . $imageFilename;
//$user->setAvatar($avatar);
            }

            $query = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->insert()
                            ->field("date")->set(time())
                            ->field("userID")->set($user->getId())
                            ->field("username")->set($user->getUsername())
                            ->field("userAvatar")->set($user->getAvatar())
                            ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                            ->field("userJobTitle")->set($user->getJobTitle())
                            ->field("type")->set(intval(7))
                            ->field("filter")->set('professional')
                            ->field("action")->set('userPost')
                            ->field("likesCounter")->set(intval(0))
                            ->field("commentsCounter")->set(intval(0))
                            ->field("liked")->set(array())
                            ->field("isLike")->set(false);
//->field("companyID")->set($company->getId())
//->field("companyUsername")->set($company->getUsername())
//->field("companyAvatar")->set($company->getAvatar())
//->field("companyFullName")->set($company->getName());

            if (isset($newPost->text))
                $query->field("postText")->set($newPost->text);
            if (isset($newPost->image))
                $query->field("postImage")->set($image);
            if (isset($newPost->youtube))
                $query->field("postYoutube")->set($newPost->youtube);
            if (isset($newPost->vimeo))
                $query->field("postVimeo")->set($newPost->vimeo);

            if (isset($newPost->link) && $newPost->link)
                $query->field("newsTitle")->set($newPost->newsTitle);
            if (isset($newPost->link) && $newPost->link)
                $query->field("newsImage")->set($newsImage);
            if (isset($newPost->link) && $newPost->link)
                $query->field("newsSource")->set($newPost->newsSource);
            if (isset($newPost->link) && $newPost->link)
                $query->field("newsSourceURL")->set($newPost->newsSourceURL);
            if (isset($newPost->link) && $newPost->link)
                $query->field("newsURL")->set($newPost->newsURL);
            if (isset($newPost->link) && $newPost->link)
                $query->field("newsDate")->set($newPost->newsDate);

// Share User Profile
            if (isset($newPost->userProfile))
                $query->field("sharedUserAvatar")->set($newPost->sharedUserAvatar);
            if (isset($newPost->userProfile))
                $query->field("sharedUserFullName")->set($newPost->sharedUserFullName);
            if (isset($newPost->userProfile))
                $query->field("sharedUserJobTitle")->set($newPost->sharedUserJobTitle);
            if (isset($newPost->userProfile))
                $query->field("sharedUserCompany")->set($newPost->sharedUserCompany);
            if (isset($newPost->userProfile))
                $query->field("sharedUsername")->set($newPost->sharedUsername);

// Share Company Page
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyUsername")->set($newPost->sharedCompanyUsername);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyAvatar")->set($newPost->sharedCompanyAvatar);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyName")->set($newPost->sharedCompanyName);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyFollowers")->set($newPost->sharedCompanyFollowers);
            if (isset($newPost->companyPage))
                $query->field("sharedCompanyType")->set($newPost->sharedCompanyType);

//->field("post")->set($newPost->text)
//->field("postText")->set($newPost->text)

            $query->getQuery()->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse();
    }

    private function file_get_contents_curl($url) {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_ENCODING, 'UTF-8');

        $data = curl_exec($ch);
        curl_close($ch);

        return $data;
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialCrawlLinkAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $newsURL = $request->link;

            $parse_url = parse_url($newsURL);
            $newsSource = $parse_url['host'];
            $newsSourceURL = $parse_url['scheme'] . "://" . $parse_url['host'];

//$html = file_get_contents($newsURL);
            $html = $this->file_get_contents_curl($newsURL);
//$html = preg_replace('/,\s*([\]}])/m', '$1', utf8_encode($html));
//return new JsonResponse($json);
            $crawler = new Crawler($html);

            $doc = new \DOMDocument();
            @$doc->loadHTML($html);
            $nodes = $doc->getElementsByTagName('title');

            $newsTitle = null;
            $newsImage = null;
            if ($nodes->length > 0) {
                $newsTitle = $nodes->item(0)->nodeValue;
            }

            $metas = $doc->getElementsByTagName('meta');

// TITLE
            $title = array();
            $title['property'] = array("og:title", "twitter:title");
            $title['name'] = array("og:title", "twitter:title");
            $title['itemprop'] = array("name");
            for ($i = 0; $i < $metas->length; $i++) {
                $meta = $metas->item($i);
                foreach ($title as $key => $prop) {
                    foreach ($prop as $val) {
                        if (strtolower($meta->getAttribute($key)) == $val) {
                            $newsTitle = $meta->getAttribute('content');
                            break 3;
                        }
                    }
                }
            }


// IMAGES
            $image = array();
            $image['property'] = array("og:image", "twitter:image:src");
            $image['name'] = array("og:image", "twitter:image:src");
            $image['itemprop'] = array("image");
            for ($i = 0; $i < $metas->length; $i++) {
                $meta = $metas->item($i);
                foreach ($image as $key => $prop) {
                    foreach ($prop as $val) {
                        if (strtolower($meta->getAttribute($key)) == $val) {
                            $newsImage = $meta->getAttribute('content');
                            break 3;
                        }
                    }
                }
            }


// GET TITLE
            /* $newsTitle = null;
              // META TITLE
              // WE MUST INVEST TIME TO REFACTOR THIS!!!!!!
              $imageMeta = array('meta[property="og:title"]', 'meta[name="og:title"]', 'meta[property="twitter:title"]', 'meta[name="twitter:title"]', 'meta[itemprop="name"]');
              //$imageMeta = array("og:title");
              foreach($imageMeta as $meta){
              $ogCrawler = $crawler->filter($meta);
              if ($ogCrawler->count() > 0) {
              //$newsTitle = $ogCrawler->attr('content');
              $newsTitle = $ogCrawler->first()->attr('content');
              break;
              }
              } */

            /* if(!$newsTitle){
              $res = preg_match("/<title>(.*)<\/title>/siU", $html, $title_matches);
              if ($res){
              // Clean up title: remove EOL's and excessive whitespace.
              $newsTitle = preg_replace('/\s+/', ' ', $title_matches[1]);
              $newsTitle = trim($newsTitle);
              //$newsTitle = htmlspecialchars_decode($newsTitle);
              /*$newsTitle = str_replace("&#147;", '"', $newsTitle);
              $newsTitle = str_replace("&#148;", '"', $newsTitle);
              $newsTitle = str_replace("&#39;", "'", $newsTitle);
              $newsTitle = str_replace("&#8217;", "'", $newsTitle);
              }
              } */
            /*
              // GET IMAGES
              $newsImage = null;
              // META IMAGE
              $imageMeta = array('meta[property="og:image"]', 'meta[name="og:image"]', 'meta[property="twitter:image:src"]', 'meta[name="twitter:image:src"]', 'meta[itemprop="image"]');
              foreach($imageMeta as $meta){
              $ogCrawler = $crawler->filter($meta);
              if ($ogCrawler->count() > 0) {
              $newsImage = $ogCrawler->first()->attr('content');
              break;
              }
              } */
            /*
              // OPEN GRAPH IMAGE
              $ogCrawler = $crawler->filter('meta[property="og:image"]');
              if ($ogCrawler->count() == 0) {
              $ogCrawler = $crawler->filter('meta[name="og:image"]');
              }
              if ($ogCrawler->count() == 0) {
              $ogCrawler = $crawler->filter('meta[property="twitter:image:src"]');
              }
              if ($ogCrawler->count() == 0) {
              $ogCrawler = $crawler->filter('meta[name="twitter:image:src"]');
              }
              if ($ogCrawler->count() > 0) {
              $newsImage = $ogCrawler->first()->attr('content');
              } */
            if ($newsImage) {
                if (strpos($newsImage, '/') == 0) {
                    $newsImage = $newsSourceURL . $newsImage;
                }
            } else {

// GET ARRAY OF IMAGES
                $pcrawler = $crawler->filter('p');

                $result = $pcrawler
                        ->filterXpath('//img')
                        ->extract(array('src'));

                if ($result) {

                    foreach ($result as $source) {

                        try {
                            if (strpos($source, '/') == 0) {
                                $source = $newsSourceURL . $source;
                            }
                            $size = getimagesize($source);
                            if ($size[0] > 50 && $size[1] > 40) {
// avoids getting very small images

                                $newsImage = $source;
                                break;
                            }
                        } catch (\Exception $e) {
//print_r("Exception");
                        }
                    }
                } else {
// GET ARRAY OF IMAGES
                    $bodycrawler = $crawler->filter('body');

                    $result = $bodycrawler
                            ->filterXpath('//img')
                            ->extract(array('src'));

                    if ($result) {

                        foreach ($result as $source) {

                            try {
                                if (strpos($source, '/') == 0) {
                                    $source = $newsSourceURL . $source;
                                }
                                $size = getimagesize($source);
                                if ($size[0] > 50 && $size[1] > 40) {
// avoids getting very small images

                                    $newsImage = $source;
                                    break;
                                }
                            } catch (\Exception $e) {
//print_r("Exception");
                            }
                        }
                    }
                }
            }
        }

        return new JsonResponse(array('newsTitle' => $newsTitle, 'newsImage' => $newsImage, 'newsSource' => $newsSource, 'newsSourceURL' => $newsSourceURL, 'newsURL' => $newsURL, 'newsDate' => time()));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function socialCommentAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $updateID = $request->updateID;
        $newcomment = $request->newcomment;


// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET EVENT
        $update = $dm->createQueryBuilder('DataBaseBundle:Update')
                ->field('_id')->equals($updateID)
                ->getQuery()
                ->getSingleResult();

        if (!$update instanceof Update) {
            throw new NotFoundHttpException();     // 404
        }

        /* $dm->createQueryBuilder('DataBaseBundle:Update')
          ->update()
          ->multiple(false)
          ->field('updateID')->equals($updateID)
          ->field('interactions')->inc(1)
          ->getQuery()
          ->execute(); */

// LIKE THE UPDATE
        $q = $dm->createQueryBuilder('DataBaseBundle:Update')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('id')->equals($updateID)

// Update found Campaign
                        ->field("commentsCounter")->set(intval(count($update->getComments())) + 1)
                        ->field("comments")->addToSet(array(
            'userID' => $user->getId(),
            'username' => $user->getUsername(),
            'name' => $user->getName(),
            'lastname' => $user->getLastname(),
            'avatar' => $user->getAvatar(),
            'text' => $newcomment,
            'date' => time(),
            'jobTitle' => $user->getJobTitle(),
            'company' => $user->getCompany(),
        ));

        $userIsAdministrator = false;
        if (is_array($user->getCompanyPage())) {
            $userIsAdministrator = array_key_exists('administrator', $user->getCompanyPage());
        }
        if ($userIsAdministrator) {
            $userCompany = $user->getCompanyPage()['administrator']['company'];
            if ($update->getType() == 5 && $update->getAction() == 'companyPost' && $userCompany != $update->getCompanyUsername())
                $q->field('interactions')->inc(1);
        } else {
            if ($update->getType() == 5 && $update->getAction() == 'companyPost')
                $q->field('interactions')->inc(1);
        }

        /* if ($update->getType() == 5 && $update->getAction() == 'companyPost')
          $q->field('interactions')->inc(1); */

// Options
        $q->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
        /*
          $timing = strtotime("-1 hour");
          //$timing = strtotime("-1 minute");

          $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
          ->field('userID')->equals($user->getId())
          ->field('updateID')->equals($updateID)
          ->field('action')->equals('comment')
          ->field('date')->gte($timing)
          ->getQuery()->execute()->count();

          if($updateFeed==0) {

          $dm->createQueryBuilder('DataBaseBundle:Update')
          ->insert()
          ->field("date")->set(time())
          ->field("isLike")->set(false)
          ->field("isComment")->set(true)
          ->field("action")->set('comment')
          ->field("updateID")->set($updateID)
          ->field("userID")->set($user->getId())
          ->field("username")->set($user->getUsername())
          ->field("userAvatar")->set($user->getAvatar())
          ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
          ->field("userJobTitle")->set($user->getJobTitle())
          ->field("type")->set($update->getType())
          ->field("filter")->set($update->getFilter())
          ->getQuery()
          ->execute();

          $dm->flush();
          $dm->clear(); // Detaches all objects from Doctrine!
          }
         */
// new version

        $dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(false)
                ->field('userID')->equals($user->getId())
                ->field('updateID')->equals($updateID)
                ->field('action')->equals('comment')
                ->field("date")->set(time())
                ->field("isLike")->set(false)
                ->field("isComment")->set(true)
                ->field("action")->set('comment')
                ->field("updateID")->set($updateID)
                ->field("userID")->set($user->getId())
                ->field("username")->set($user->getUsername())
                ->field("userAvatar")->set($user->getAvatar())
                ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                ->field("userJobTitle")->set($user->getJobTitle())
                ->field("type")->set($update->getType())
                ->field("filter")->set($update->getFilter())

// Options
                ->upsert(true)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!


        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Email validation",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getPublicEventAction(Request $request, $eventname) {

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET EVENT
        $event = $dm->createQueryBuilder('DataBaseBundle:Event')
                ->field('username')->equals($eventname)
                ->getQuery()
                ->getSingleResult();


        if (!$event instanceof Event) {
            throw new NotFoundHttpException();     // 404
        }

        return new JsonResponse($event);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function eventAttendYesAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $eventname = $request->eventname;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $event = $dm->getRepository('DataBaseBundle:Event')->findOneBy(array('username' => $eventname));

            if ($event) {

                $update = true;
                $attendees = $event->getAttendees();

                foreach ($attendees as $a) {
                    if ($a['id'] == $user->getId()) {
//throw new BadRequestHttpException();     // 404
                        $update = false;
                        $attendingEvent = null;
                        $newAttendant = null;
                        break;
                    }
                }

                if ($update) {

                    $attendingEvent = array('id' => $event->getId(), 'date' => time(), 'name' => $event->getName(), 'username' => $event->getUsername());
                    $newAttendant = array('id' => $user->getId(), 'date' => time(), 'name' => $user->getName(), 'lastname' => $user->getLastname(), 'username' => $user->getUsername(), 'avatar' => $user->getAvatar(), 'jobTitle' => $user->getJobTitle(), 'company' => $user->getCompany());

// update DATABASE
                    $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($user->getId())

// Update found Campaign
                            ->field('attending')->addToSet($attendingEvent)
                            ->field('updateDate')->set(time())

// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

// update DATABASE
                    $q = $dm->createQueryBuilder('DataBaseBundle:Event');
// Find the Campaign
                    $q->update()
                            ->multiple(false)
                            ->field('_id')->equals($event->getId())

// Update found Campaign
                            ->field('attendees')->addToSet($newAttendant)

// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!

                    $timing = strtotime("-1 hour");

                    $updateFeed = $dm->createQueryBuilder('DataBaseBundle:Update')
                                    ->field('userID')->equals($user->getId())
                                    ->field('eventID')->equals($event->getId())
                                    ->field('action')->equals('event')
                                    ->field('date')->gte($timing)
                                    ->getQuery()->execute()->count();

                    if ($updateFeed == 0) {

                        $dm->createQueryBuilder('DataBaseBundle:Update')
                                ->insert()
                                ->field("date")->set(time())
                                ->field("userID")->set($user->getId())
                                ->field("username")->set($user->getUsername())
                                ->field("userAvatar")->set($user->getAvatar())
                                ->field("userFullName")->set($user->getName() . " " . $user->getLastname())
                                ->field("userJobTitle")->set($user->getJobTitle())
                                ->field("type")->set(intval(6))
                                ->field("filter")->set('business')
                                ->field("action")->set('event')
                                ->field("likesCounter")->set(intval(0))
                                ->field("commentsCounter")->set(intval(0))
                                ->field("liked")->set(array())
                                ->field("isLike")->set(false)
                                ->field("eventID")->set($event->getId())
                                ->field("eventUsername")->set($event->getUsername())
                                ->field("eventFullName")->set($event->getName())
                                ->field("eventText")->set($event->getText())
                                ->field("eventImg")->set($event->getImg())
                                ->field("eventLink")->set($event->getLink())
                                ->field("eventLinkRegister")->set($event->getLinkRegister())
                                ->field("eventDate")->set($event->getDate())
                                ->field("eventCity")->set($event->getCity())
                                ->getQuery()
                                ->execute();

                        $dm->flush();
                        $dm->clear(); // Detaches all objects from Doctrine!
                    }
                }
            } else {
                throw new NotFoundHttpException();     // 404
            }
        }

        return new JsonResponse(array('attendingEvent' => $attendingEvent, 'newAttendant' => $newAttendant));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function eventAttendNoAction(Request $request) {
        $oldAttendee = null;

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $eventname = $request->eventname;

            $oldFollower = null;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $event = $dm->getRepository('DataBaseBundle:Event')->findOneBy(array('username' => $eventname));

            if ($event) {

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

                $attendings = $user->getAttending();
                foreach ($attendings as $key => $attendance) {
                    if ($attendance['id'] == $event->getId()) {

                        unset($attendings[$key]);

// update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId())

// Update found Campaign
                                ->field('attending')->pull($attendance)
                                ->field('updateDate')->set(time())

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                }
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!

                $user->setAttending($attendings);

                $attendees = $event->getAttendees();
                foreach ($attendees as $key => $attendance) {
                    if ($attendance['id'] == $user->getId()) {

                        $oldAttendee = $attendance;

// update DATABASE
                        $q = $dm->createQueryBuilder('DataBaseBundle:Event');
// Find the Campaign
                        $q->update()
                                ->multiple(false)
                                ->field('_id')->equals($event->getId())

// Update found Campaign
                                ->field('attendees')->pull($attendance)

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        break;
                    }
                }
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            }
        }

        return new JsonResponse(array('user' => $user, 'oldAttendee' => $oldAttendee));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getOffersAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();     // 404
            /* $this->updateLog($user); */

// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $skip = intval(isset($request->skip) ? $request->skip : 0);

        $limit = 30;

        $offers = array();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFERS
        $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                        ->field("status")->equals('LIVE');

// MY OWN OFFERS
        $q->addOr($q->expr()
                        ->field("userID")->equals($user->getId())
        );
// PUBLIC OFFERS
        $q->addOr($q->expr()
                        ->field("visibility")->equals('Everyone')
        );
// MEDIA SELLERS OFFERS
        if ($user->getCompanyType() == 'TrafficSupplier')
            $q->addOr($q->expr()->field("visibility")->equals('MediaSellers'));

// INTOUCH OFFERS
        $myInTouch = array();
        $inTouch = $user->getInTouch();
        if ($inTouch) {
            foreach ($inTouch as $p) {
                if (intval($p['status']) == 3) {
// ONLY VALIDATED INTOUCH
                    $myInTouch[] = $p['id'];
                }
            }
        }
        if (count($myInTouch) > 0) {
            $q->addOr($q->expr()
                            ->field("visibility")->equals('inTouch')
                            ->field('userID')->in($myInTouch)
            );
        }


        $q = $q->sort('_id', -1)
//->limit($limit)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                ->hydrate(false)
                ->getQuery()
                ->execute(); //->toArray();

        foreach ($q as $o) {
            $offers[] = $o;
        }

        return new JsonResponse($offers);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function offersCounterAction() {
// Get the User 
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFERS
        $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                        ->field("status")->equals('LIVE')
                        ->field("userID")->notEqual($user->getId());
        if ($user->getLastOffersCounter() != null)
            $q->field("date")->gte(intval($user->getLastOffersCounter()));

// MY OWN OFFERS
        $q->addOr($q->expr()
                        ->field("userID")->equals($user->getId())
        );
// PUBLIC OFFERS
        $q->addOr($q->expr()
                        ->field("visibility")->equals('Everyone')
        );
// MEDIA SELLERS publicview
        if ($user->getCompanyType() == 'TrafficSupplier')
            $q->addOr($q->expr()->field("visibility")->equals('MediaSellers'));

//INTOUCH OFFERS
        $myInTouch = array();
        $inTouch = $user->getInTouch();
        if ($inTouch) {
            foreach ($inTouch as $p) {
                if (intval($p['status']) == 3) {
// ONLY VALIDATED INTOUCH
                    $myInTouch[] = $p['id'];
                }
            }
        }
        if (count($myInTouch) > 0) {
            $q->addOr($q->expr()
                            ->field("visibility")->equals('inTouch')
                            ->field('userID')->in($myInTouch)
            );
        }

        $count = $q->sort('_id', -1)
//->limit($limit)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                        ->hydrate(false)
                        ->getQuery()
                        ->execute()->count(); //->toArray();

        if ($user->getOffersNotifications() != $count) {
// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
// Update found Campaign
                    ->field("offersNotifications")->set($count)
                    ->field('updateDate')->set(time())
// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }
        return new JsonResponse(array('offersNotifications' => $count, 'alerts' => $user->getAlerts(), 'alertsNotifications' => $user->getAlertsNotifications(), 'emailsNotifications' => $user->getEmailsNotifications(), 'repliedOffers' => $user->getRepliedOffers()));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getMyOffersAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();     // 404


        $offers = array();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFERS
        $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                ->field('status', 'LIVE')
                ->field("userID")->equals($user->getId())
                ->sort('_id', -1)
//->limit($limit)
//->skip($skip*$limit) // 0x30000, 1x30000, 2x30000, 3x30000
                ->hydrate(false)
                ->getQuery()
                ->execute(); //->toArray();

        foreach ($q as $o) {
            $offers[] = $o;
        }

        return new JsonResponse($offers);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getMyRepliesAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();     // 404


        $offers = array();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $myreplies = array();
// GET REPLIES
        $qr = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
//->field('status', 'LIVE')
                ->field("userID")->equals($user->getId())
                ->getQuery()
                ->execute();
        if ($qr) {
            foreach ($qr as $o) {
                $myreplies[] = $o->getOfferID();
            }

            if (count($myreplies) > 0) {
// GET OFFERS
                $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
//->field('status', 'LIVE')
                        ->field("_id")->in($myreplies)
                        ->sort('_id', -1)
                        ->hydrate(false)
                        ->getQuery()
                        ->execute(); //->toArray();

                foreach ($q as $o) {
                    $offers[] = $o;
                }
            }
        }

        return new JsonResponse($offers);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getOfferDetailsAction($offerID) {
// Get the User
        $owner = null;
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFER
        $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                ->field('_id')->equals($offerID)
                ->getQuery()
                ->getSingleResult();

        if (!$offer instanceof Offer)
            throw new NotFoundHttpException();     // 404

        $q = null;
        $replies = array();
        if ($offer->getUserID() == $user->getId()) {
// OWNER OF THE OFFER
            $owner = true;

            $q = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                    ->field('offerID')->equals($offerID)
                    ->getQuery()
                    ->execute();
            if ($q) {
                foreach ($q as $o) {
                    $replies[] = $o;
                }
            }
        } else {
// 'VISITING' THE OFFER

            $owner = false;

//PERMISSION
            switch ($offer->getVisibility()) {
                case 'MediaSellers':
                    if ($user->getCompanyType() != 'TrafficSupplier')
                        throw new AccessDeniedHttpException(); // 403
                    break;
                case 'inTouch':
                    $isInTouch = false;
                    $myInTouchs = $user->getInTouch();
                    if ($myInTouchs) {
                        foreach ($myInTouchs as $person) {
                            if ($person['username'] == $offer->getUsername()) {
                                if ($person['status'] == 3) {
                                    $isInTouch = true;
                                }
                                break;
                            }
                        }
                    }
                    if (!$isInTouch)
                        throw new AccessDeniedHttpException(); // 403
                    break;
                case 'Everyone':
                default: break;
            }

// OBTAINING OWN REPLY
            $myReply = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                    ->field('offerID')->equals($offerID)
                    ->field('userID')->equals($user->getId())
                    ->getQuery()
                    ->getSingleResult();

            if (!$myReply instanceof OfferReply)
                throw new AccessDeniedHttpException();     // 404

            $replies[] = $myReply;
            if (count($myReply->getConversation()) <= 0)
                throw new AccessDeniedHttpException(); // 403
        }


        return new JsonResponse(array('offer' => $offer, 'replies' => $replies, 'owner' => $owner));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function createOfferAction(Request $request) {
        $offer = null;
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $offer = $request->offer;

            $date = isset($offer->dateRangeModalFormat) ? $offer->dateRangeModalFormat : null;
            if ($date) {
                $pos = strpos($date, " - ");

                $start = trim(substr($date, 0, $pos));
                $end = trim(substr($date, $pos + 2, strlen($date)));
            }

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            if (!isset($offer->expiryDate) or $offer->expiryDate == null)
                throw new BadRequestHttpException();

            $expiry = strtotime($offer->expiryDate);
            $hours = date('H', time());
            $newExpiryTimestamp = strtotime("$hours hours", $expiry);
//return new JsonResponse(array('expiry' => $expiry, 'hours' => $hours, 'newExpiryTimestamp' => $newExpiryTimestamp ));
// Genereate a new identifier
            $newIndetifier = $this->createNewOfferIdentifier();

            $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->insert()
                    ->field("identifier")->set($newIndetifier)
                    ->field("date")->set(time())
                    ->field("userID")->set($user->getId())
                    ->field("username")->set($user->getUsername())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFirstName")->set($user->getName())
                    ->field("userLastName")->set($user->getLastname())
                    ->field("userCompany")->set($user->getCompany())
                    ->field("visibility")->set($offer->visibility)
                    ->field("countries")->set(array_unique($offer->countries))
                    ->field("pricingModels")->set($offer->pricingModels)
                    ->field("platforms")->set($offer->platforms)
                    ->field("quality")->set($offer->quality)
                    ->field("dateRangeModalFormat")->set($date ? $offer->dateRangeModalFormat : null)
                    ->field("startingTimestamp")->set($date ? strtotime($start) : null)
                    ->field("expiryDate")->set($offer->expiryDate)
                    ->field("expiryTimestamp")->set($newExpiryTimestamp)
                    ->field("endingTimestamp")->set($date ? strtotime($end) : null)
                    ->field("description")->set(isset($offer->description) ? $offer->description : null)
                    ->field("questions")->set(isset($offer->questions) ? $offer->questions : array())
                    ->field("replies")->set(0)
                    ->field("pageViews")->set(0)
                    ->field("uniquePageViews")->set(array())
                    ->field("conversation")->set(array())
                    ->field("status")->set('LIVE')
                    ->field("lastReply")->set(null)
                    ->field("updateDate")->set(time())
                    ->field("closeOfferEmailNotification")->set(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($offer);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function offerViewAction(Request $request) {
        $offer = null;
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $offerID = $request->offerID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFER
            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($offerID)
                    ->getQuery()
                    ->getSingleResult();

            if (!$offer instanceof Offer)
                throw new NotFoundHttpException();     // 404

            $day = date("m-d-y H:i:s");
            $time = "history.$day.time";
            $views = "history.$day.views";
            $uniqueViews = "history.$day.uniqueViews";

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)

// Update found Campaign
                    ->field($time)->set(time())
                    ->field($views)->inc(intval(1))
                    ->field($uniqueViews)->addToSet(array($user->getId()))
                    ->field("pageViews")->inc(intval(1))
                    ->field("uniquePageViews")->addToSet(array($user->getId()))
                    ->field("dailyUniquePageViews")->addToSet(array('date' => $day))
                    ->field("updateDate")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();


            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($offer);
    }

// view public offers
    public function publicOfferViewAction(Request $request) {
        $offer = null;

// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $offerID = $request->offerID;
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        /* Get rendom offer for widget */
        if ($request->offerID == "random") {

            if (isset($request->userId)) {

                $myreplies = array();
// GET REPLIES
                $qr = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                        ->field('status', 'LIVE')
                        ->field("userID")->equals($request->userId)
                        ->getQuery()
                        ->execute();

                if ($qr) {
                    foreach ($qr as $o) {
                        $myreplies[] = $o->getOfferID();
                    }

                    $offers = array();
                    $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                            ->field("status")->equals('LIVE')
                            ->field("visibility")->equals('Everyone')
                            ->field('userID')->notEqual($request->userId)
                            ->field('_id')->notIn($myreplies)
                            ->sort('_id', -1)
                            ->getQuery()
                            ->execute();

                    foreach ($q as $o) {
                        array_push($offers, $o);
                    }
                    if (!empty($offers)) {
                        $offer = $offers[array_rand($offers)];
                    }
                }
            } else {
                $offers = array();
                $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                                ->field("status")->equals('LIVE');

// PUBLIC OFFERS
                $q->addOr($q->expr()
                                ->field("visibility")->equals('Everyone')
                );
                $q = $q->sort('_id', -1)
                        ->getQuery()
                        ->execute();
                foreach ($q as $o) {
                    array_push($offers, $o);
                }
                if (!empty($offers)) {
                    $offer = $offers[array_rand($offers)];
                }
            }
        } else {
            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($offerID)
                    ->getQuery()
                    ->getSingleResult();

            if (!$offer instanceof Offer)
                throw new NotFoundHttpException();     // 404
            $day = date("m-d-y H:i:s");
            $time = "history.$day.time";
            $views = "history.$day.views";
            $uniqueViews = "history.$day.uniqueViews";

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)

// Update found Campaign
                    ->field($time)->set(time())
                    ->field($views)->inc(intval(1))
                    ->field("pageViews")->inc(intval(1))
                    ->field("dailyUniquePageViews")->addToSet(array('date' => $day))
                    ->field("updateDate")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();
        }

        if (!$offer instanceof Offer)
            throw new NotFoundHttpException();     // 404
        return new JsonResponse($offer);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function replyOfferAction(Request $request) {
        $offer = null;
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $reply = $request->reply;

            if (!isset($reply->offerID)) {
                throw new BadRequestHttpException(); // 400
            }
// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFER
            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($reply->offerID)
                    ->getQuery()
                    ->getSingleResult();

            if (!$offer instanceof Offer) {
                throw new NotFoundHttpException();     // 404
            }

//      // GET OFFER
            $exists = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('offerID')->equals($reply->offerID)
                    ->field('userID')->equals($user->getId())
                    ->getQuery()
                    ->getSingleResult();

            if ($exists) {
                throw new BadRequestHttpException();     // 404
            }


            $isFirstReply = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                    ->field('offerID')->equals($reply->offerID)
                    ->field('userID')->equals($user->getId())
                    ->getQuery()
                    ->getSingleResult();

            if ($isFirstReply && count($isFirstReply->getConversation()) == 0) {
                return new JsonResponse(array('offer' => $offer, 'user' => $user, 'alreadyReplied' => true));
            }

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:OfferReply')
// Find the Campaign
                    ->insert()
                    ->field('offerID')->set($reply->offerID)
                    ->field('userID')->set($user->getId())
                    ->field('username')->set($user->getUsername())
                    ->field('userFirstName')->set($user->getName())
                    ->field('userLastName')->set($user->getLastname())
                    ->field('userAvatar')->set($user->getAvatar())
                    ->field('userCompany')->set($user->getCompany())
                    ->field('countries')->set(isset($reply->countries) ? $reply->countries : array())
                    ->field('pricing')->set(isset($reply->pricingModels) ? $reply->pricingModels : array())
                    ->field('platforms')->set(isset($reply->platforms) ? $reply->platforms : array())
                    ->field('quality')->set(isset($reply->quality) ? $reply->quality : array())
                    ->field('questions')->set(isset($reply->questions) ? $reply->questions : array())
                    ->field('conversation')->set(array())
                    ->field('date')->set(time())
                    ->field("lastUpdate")->set(time())
                    ->field('status')->set('ok')
                    ->getQuery()
                    ->execute();


            $day = date("m-d-y");
            $time = "history.$day.time";
            $replies = "history.$day.replies";

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($reply->offerID)

// Update found Campaign
                    ->field("lastReply")->set(time())
                    ->field("replies")->inc(intval(1))
                    ->field("updateDate")->set(time())
                    ->field($time)->set(time())
                    ->field($replies)->inc(intval(1))

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field("updateDate")->set(time())
                    ->field("repliedOffers")->addToSet(array("offerID" => $reply->offerID, "counter" => 0))

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offer->getUserID())

// Update found Campaign
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $offer->getId() . "-" . time(),
                                'type' => 9, //offer details
                                'read' => false,
                                'action' => 'replied to your offer: ' . $offer->getIdentifier(),
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'lastname' => $user->getLastname(),
                                'avatar' => $user->getAvatar(),
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();

            $offerOwner = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('username')->equals($offer->getUsername())
                    ->getQuery()
                    ->getSingleResult();

            $dm->flush();
            $dm->clear();




            switch ($this->get('kernel')->getEnvironment()) {
                case 'adhoc':
                    $baseLink = 'https://www-dev.mobintouch.com/offers/details/';
                    $baseURL = 'https://cdn-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseLink = 'https://www.mobintouch.com/offers/details/';
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
                default:
                    $baseLink = 'https://www.mobintouch.com/offers/details/';
                    $baseURL = 'https://cdn.mobintouch.com';
                    break;
            }

            $userProfileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';

            if ($this->get('kernel')->getEnvironment() != 'dev') {

                $send_grid_options = array(
                    'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':url' => array($baseLink . $offer->getId()), ':sender_img' => array($userProfileUrl)),
                    'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_stackoffer_reply_template_id'))))
                );
                $params = array(
                    'to' => $offerOwner->getEmail(),
                    'from' => "noreply@mobintouch.com",
                    'fromname' => $user->name . " " . $user->lastname,
                    'subject' => "You got a new reply to your StackOffer",
                    'html' => " ",
                    'x-smtpapi' => json_encode($send_grid_options),
                );
                //$this->sendgrid_mail($params);
            }

            $players = array();
            if ($offerOwner->getPlayerId()) {
                $players[] = $offerOwner->getPlayerId();
            }
            $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' replied to your offer: ' . $offer->getIdentifier(), $players, $baseLink . $offer->getId());
        }

        return new JsonResponse(array('offer' => $offer, 'user' => $user));
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function converseReplyAction(Request $request) {
        $offer = null;
        $players = array();
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $replyID = $request->replyID;
            $offerID = $request->offerID;
            $conversation = $request->conversation;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFER
            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($offerID)
                    ->getQuery()
                    ->getSingleResult();

            if (!$offer instanceof Offer) {
                throw new NotFoundHttpException();     // 404
            }
// GET OFFER
            $offerReply = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                    ->field('_id')->equals($replyID)
                    ->getQuery()
                    ->getSingleResult();

            $userID = null;
            $action = null;
            if ($user->getId() != $offer->getUserID()) {
                $action = 'offer';
                $userID = $offer->getUserID();
                $username = $offer->getUsername();
            } else {
                $action = 'reply';
                $userID = $offerReply->getUserID();
                $username = $offerReply->getUsername();
            }


            $newConversation = array(
                'username' => $user->getUsername(),
                'userFirstName' => $user->getName(),
                'userLastName' => $user->getLastname(),
                'userAvatar' => $user->getAvatar(),
                'userCompany' => $user->getCompany(),
                'text' => $conversation,
                'date' => time(),
            );

            $isNew = true;
            $offerConversation = $user->getRepliedOffers();
            if ($offerConversation) {
                foreach ($offerConversation as $k => $conv) {
                    if ($conv['offerID'] == $offerID) {
                        if ($conv['counter'] != 0) {
                            $isNew = false;
                        }
                        break;
                    }
                }
            }
            if ($isNew) {
                $offerConversation[] = array("offerID" => $offerID, "counter" => 1);
            }

            switch ($this->get('kernel')->getEnvironment()) {
                case 'dev':
                    $baseLink = 'http://angular.dev/offers/';
                    break;
                case 'test':
                    $baseLink = 'http://angular.dev/offers/';
                    break;
                case 'adhoc':
                    $baseLink = 'https://www-dev.mobintouch.com/offers/';
                    break;
                case 'prod':
                default:
                    $baseLink = 'https://www.mobintouch.com/offers/';
                    break;
            }

            $link = $baseLink . 'details/' . $offer->getId();

            $replyConversation = $offerReply->getConversation();
            if (!$replyConversation) {
// THIS IS THE FIRST CONVERSATION

                $tempUser = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('_id')->equals($userID)
                        ->getQuery()
                        ->getSingleResult();

                if ($tempUser) {
// NOTIFY THE OWNER BY EMAIL
                    $settings = $tempUser->getSettings();
                    if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_offerengagedconversation']) and $settings['notifications'][0]['email_offerengagedconversation']) {

                        $message = \Swift_Message::newInstance()
                                ->setSubject('Offer: New Conversation Engaged')
                                ->setFrom(array('noreply@mobintouch.com' => $user->getName() . ' ' . $user->getLastname() . ' via Mobintouch Offers'))
                                ->setTo($tempUser->getEmail())
                                ->setContentType("text/html")
                                ->setBody(
                                $this->renderView(
                                        'APIBundle:Mail:offerConversation.html.twig', array('title' => 'Mobintouch offers report', 'receiver' => $tempUser, 'user' => $user, 'link' => $link, 'offer' => $offer, 'unsubcribe' => 0)
                                )
                        );
                        if ($tempUser->getPlayerId()) {
                            $players[] = $tempUser->getPlayerId();
                        }
                        if ($this->get('kernel')->getEnvironment() != 'dev')
                            $this->get('mailer')->send($message);
                    }
                }
            }


// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:OfferReply')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($replyID)
                    ->field('offerID')->equals($offerID)

// Update found Campaign
                    ->field("lastUpdate")->set(time())
                    ->field("conversation")->addToSet($newConversation)
                    ->field("conversationDate")->set(time())
                    ->field("read")->set(array($username => false, $user->getUsername() => true))

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerReply->getUserID())
                    ->field("repliedOffers.offerID")->equals($offerID)

// Update found Campaign
//->field("repliedOffers")->set($offerConversation)
                    ->field("repliedOffers.$.counter")->inc(intval(1))
                    ->field("updateDate")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();


// ALERT TIME LIMITATIONS
            $otherUser = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('_id')->equals($userID)
                    ->getQuery()
                    ->getSingleResult();

            $update = true;
            $limitedTime = intval(strtotime("-30 minutes")) * 1000;
            $alerts = $otherUser->getAlerts();

            if ($alerts != null) {
                foreach ($alerts as $alert) {
                    if (isset($alert['id']) && $alert['type'] == 10) {
                        $pos = strpos($alert['id'], "-");
                        $alertOfferID = substr($alert['id'], 0, $pos);
                        if ($alertOfferID == $offerID && $alert['date'] >= $limitedTime) {
                            $update = false;
                        }
                    }
                }
            }

            if ($update) {

// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($userID)
// Update found Campaign
                        ->field('alertsNotifications')->inc(1)
                        ->field('alerts')->push(array('$each' => array(array(
                                    'id' => $offer->getId() . "-" . time(),
                                    'type' => 10, //offer details
                                    'read' => false,
                                    'action' => "commented on your $action: '" . substr($conversation, 0, 40) . "'",
                                    'username' => $user->getUsername(),
                                    'name' => $user->getName(),
                                    'lastname' => $user->getLastname(),
                                    'avatar' => $user->getAvatar(),
                                    'date' => time() * 1000
                                )), '$slice' => -90))
                        ->field('updateDate')->set(time())
// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $this->send_push_notification(null, $user->getName() . " " . $user->getLastname() . " commented on your $action: '" . substr($conversation, 0, 40) . "'", $players, $link);
//$this->send_push_notification('New Conversation Engaged', $user->getName() . ' ' . $user->getLastName() . ' from ' . $user->getCompany() . ', engaged in the conversation about your reply on the offer: ' . $offer->getIdentifier(), $players, $link);
            }

            $day = date("m-d-y");
            $time = "history.$day.time";
            $conversations = "history.$day.conversations";

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)

// Update found Campaign
                    ->field($time)->set(time())
                    ->field($conversations)->addToSet(array('replyID' => $replyID))
                    ->field("updateDate")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();


            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($offer);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function readConversationAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $replyID = $request->replyID;

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFER
        /* $offerReply = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
          ->field('_id')->equals($replyID)
          ->getQuery()
          ->getSingleResult();
         */
//if($user->getId()!=$offer->getUserID()){ $username = $offer->getUsername(); } else { $username = $offerReply->getUsername(); }
        $username = $user->getUsername();


// update DATABASE
        $dm->createQueryBuilder('DataBaseBundle:OfferReply')
// Find the Campaign
                ->update()
                ->multiple(false)
                ->field('_id')->equals($replyID)

// Update found Campaign
                ->field("lastUpdate")->set(time())
                ->field("read.$username")->set(true)

// Options
                ->upsert(false)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function editOfferAction(Request $request) {
        $oldAttendee = null;

// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();     // 404


        $offer = null;
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $offer = $request->offer;
        $offerID = $request->offerID;

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $dboffer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                ->field('_id')->equals($offerID)
                ->field("userID")->equals($user->getId())
                ->field("username")->equals($user->getUsername())
                ->field("status")->equals('LIVE')
                ->getQuery()
                ->getSingleResult();

        if (!$dboffer)
            throw new NotFoundHttpException();  // 404

        if (!isset($offer->expiryDate) or $offer->expiryDate == null)
            throw new BadRequestHttpException();

        $expiry = strtotime($offer->expiryDate);
        $hours = date('H', $expiry);
        $newExpiryTimestamp = strtotime("$hours hours", $expiry);


        if ($dboffer->getReplies() != 0) {

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Offer
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)
                    ->field("userID")->equals($user->getId())
                    ->field("username")->equals($user->getUsername())
                    ->field("updateDate")->set(time())
                    ->field("expiryDate")->set($offer->expiryDate)
                    ->field("expiryTimestamp")->set($newExpiryTimestamp)

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();
        } else {

            $date = isset($offer->dateRangeModalFormat) ? $offer->dateRangeModalFormat : null;
            if ($date) {
                $pos = strpos($date, " - ");

                $start = trim(substr($date, 0, $pos));
                $end = trim(substr($date, $pos + 2, strlen($date)));
            }

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Offer
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)
                    ->field("userID")->equals($user->getId())
                    ->field("username")->equals($user->getUsername())
                    ->field("date")->set(time())
                    ->field("userAvatar")->set($user->getAvatar())
                    ->field("userFirstName")->set($user->getName())
                    ->field("userLastName")->set($user->getLastname())
                    ->field("userCompany")->set($user->getCompany())
                    ->field("visibility")->set($offer->visibility)
                    ->field("countries")->set(array_unique($offer->countries))
                    ->field("pricingModels")->set($offer->pricingModels)
                    ->field("platforms")->set($offer->platforms)
                    ->field("quality")->set($offer->quality)
                    ->field("dateRangeModalFormat")->set($date ? $offer->dateRangeModalFormat : null)
                    ->field("startingTimestamp")->set($date ? strtotime($start) : null)
                    ->field("endingTimestamp")->set($date ? strtotime($end) : null)
                    ->field("expiryDate")->set($offer->expiryDate)
                    ->field("expiryTimestamp")->set($newExpiryTimestamp)
                    ->field("description")->set(isset($offer->description) ? $offer->description : null)
                    ->field("questions")->set(isset($offer->questions) ? $offer->questions : array())
                    ->field("replies")->set(0)
                    ->field("pageViews")->set(0)
                    ->field("conversation")->set(array())
                    ->field("status")->set('LIVE')
                    ->field("lastReply")->set(null)
                    ->field("updateDate")->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($offer);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function closeOfferAction(Request $request) {
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();     // 404

        $offer = null;
// Get the User
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $offerID = $request->offerID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($offerID)
                    ->field("userID")->equals($user->getId())
                    ->field("username")->equals($user->getUsername())
                    ->getQuery()
                    ->getSingleResult();

            if (!$offer) {
                throw new NotFoundHttpException();  // 404
            }
// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Offer')
// Find the Offer
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($offerID)
                    ->field("userID")->equals($user->getId())
                    ->field("username")->equals($user->getUsername())
                    ->field("updateDate")->set(time())
                    ->field("status")->set('CLOSED')

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
// Update found Campaign
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $offerID . "-" . time(),
                                'type' => 9, // 9 = offer details, 10 = myreplies
                                'read' => false,
                                'action' => 'your offer: ' . $offer->getIdentifier() . ' is now closed',
                                'username' => $user->getUsername(),
                                'name' => $user->getName(),
                                'lastname' => $user->getLastname(),
                                'avatar' => $user->getAvatar(),
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())
// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();


            switch ($this->get('kernel')->getEnvironment()) {
                case 'dev':
                    $baseLink = 'http://angular.dev/offers/';
                    break;
                case 'adhoc':
                    $baseLink = 'https://www-dev.mobintouch.com/offers/';
                    break;
                case 'prod':
                default:
                    $baseLink = 'https://www.mobintouch.com/offers/';
                    break;
            }
            $link = $baseLink . 'details/' . $offer->getId();
            $players = array();
            if ($user->getPlayerId()) {
                $players[] = $user->getPlayerId();
                $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' your offer: ' . $offer->getIdentifier() . ' is now closed', $players, $link);
            }

            $myreplies = array();
// GET REPLIES
            $qr = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
//->field('status', 'LIVE')
                    ->field("offerID")->equals($offerID)
                    ->getQuery()
                    ->execute();
            if ($qr) {
                foreach ($qr as $o) {
                    $myreplies[] = $o->getUserID();
                }

// GET OFFERS
                $q = $dm->createQueryBuilder('DataBaseBundle:User')
                        ->field("_id")->in($myreplies)
                        ->hydrate(false)
                        ->getQuery()
                        ->execute();
                if ($q) {

                    $players = array();
                    foreach ($q as $replyUser) {

                        $userID = $replyUser['_id']->{'$id'};

                        $isEngaged = false;
                        $repliedOffers = $replyUser['repliedOffers'];
                        foreach ($repliedOffers as $of) {
                            if ($of['offerID'] == $offerID) {
                                if ($of['counter'] > 0)
                                    $isEngaged = true;
                                break;
                            }
                        }

// update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($userID)
// Update found Campaign
                                ->field('alertsNotifications')->inc(1)
                                ->field('alerts')->push(array('$each' => array(array(
                                            'id' => $offerID . "-" . time(),
                                            'type' => $isEngaged ? 9 : 11, // 9 = offer details, 10 = myreplies
                                            'read' => false,
                                            'action' => 'closed the offer: ' . $offer->getIdentifier(),
                                            'username' => $user->getUsername(),
                                            'name' => $user->getName(),
                                            'lastname' => $user->getLastname(),
                                            'avatar' => $user->getAvatar(),
                                            'date' => time() * 1000
                                        )), '$slice' => -90))
                                ->field('updateDate')->set(time())
// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        $settings = $replyUser['settings'];
                        if (isset($settings['notifications']) and isset($settings['notifications'][0]) and isset($settings['notifications'][0]['email_replyclosed']) and $settings['notifications'][0]['email_replyclosed']) {

                            if (!$isEngaged)
                                $link = $baseLink . 'myreplies';

                            $message = \Swift_Message::newInstance()
                                    ->setSubject('Offer: Has Been Closed')
                                    ->setFrom(array('noreply@mobintouch.com' => 'Mobintouch Offers'))
                                    ->setTo($replyUser['email'])
                                    ->setContentType("text/html")
                                    ->setBody(
                                    $this->renderView(
                                            'APIBundle:Mail:offerClosedReply.html.twig', array('title' => 'Mobintouch offers report', 'user' => $replyUser, 'owner' => $user, 'link' => $link, 'unsubcribe' => 1, 'offer' => $offer)
                                    )
                            );

                            if (array_key_exists('playerId', $replyUser) && $replyUser['playerId']) {
                                $players[] = $replyUser['playerId'];
                            }

                            if ($this->get('kernel')->getEnvironment() != 'dev')
                                $this->get('mailer')->send($message);
                        }
                    }
                    $this->send_push_notification(null, $user->getName() . ' ' . $user->getLastname() . ' closed the offer: ' . $offer->getIdentifier(), $players, $link);
//$this->send_push_notification('Offer: ' . $offerID . ' has been closed.', 'The offer: ' . $offerID . ', by ' . $user->getName() . ' ' . $user->getLastname() . ' from ' . $user->getCompany() . ' is now closed, and has been removed from "Live offers".', $players, $link);
                }
            }

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse($offer);
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function favoriteOfferAction(Request $request) {

// Get the User
        $newfavorite = null;

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $offerID = $request->offerID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('_id')->equals($offerID)
                    ->getQuery()
                    ->getSingleResult();

            if ($offer) {

                $newfavorite = array('id' => $offer->getId());

// update DATABASE
                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())

// Update found Campaign
                        ->field('favoriteOffers')->addToSet($newfavorite)
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
            } else {
                throw new NotFoundHttpException();     // 404
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function unfavoriteOfferAction(Request $request) {

// Get the User
        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $offerID = $request->offerID;

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $offer = $dm->createQueryBuilder('DataBaseBundle:Offer')
                    ->field('id')->equals($offerID)
                    ->getQuery()
                    ->getSingleResult();

            if ($offer) {

// Set up database
                $dm = $this->get('doctrine_mongodb.odm.document_manager');

                $favoriteOffers = $user->getFavoriteOffers();
                foreach ($favoriteOffers as $key => $favorite) {
                    if ($favorite['id'] == $offer->getId()) {

                        unset($favoriteOffers[$key]);

// update DATABASE
                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId())

// Update found Campaign
                                ->field('favoriteOffers')->pull($favorite)
                                ->field('updateDate')->set(time())

// Options
                                ->upsert(false)
                                ->getQuery()
                                ->execute();
                    }
                }
                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!

                $user->setFavoriteOffers($favoriteOffers);
            }
        }

        return new JsonResponse();
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="Search API",
     *  requirements={
     *      {
     *          "name"="limit",
     *          "dataType"="integer",
     *          "requirement"="\d+",
     *          "description"="how many objects to return"
     *      }
     *  },
     *  parameters={
     *      {"name"="username", "dataType"="string", "required"=true, "description"="username"},
     *  },
     *  filters={
     *      {"name"="a-filter", "dataType"="integer"},
     *      {"name"="another-filter", "dataType"="string", "pattern"="(foo|bar) ASC|DESC"}
     * },
     * output={
     * "class"   = "Mobntouch\DataBaseBundle\Document\User",
     * "parsers" = {
     * "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
     * "Nelmio\ApiDocBundle\Parser\ValidationParser"
     * }
     * },
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function statusOfferReplyAction(Request $request) {

// Get the User
        $newfavorite = null;

        $user = $this->getCurrentUser();

        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

// Get JSON parameters
            $postdata = $request->getContent();
            $request = json_decode($postdata);

// Get POST parameters
            $replyID = $request->replyID;
            $status = $request->status;

// CHECK FOR A VALID NEW STATUS
            switch ($status) {
                case 'favorite':
                case 'ignore':
                case 'ok':
                    break;
                default:
                    throw new BadRequestHttpException();
                    break;
            }

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

            $reply = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                    ->field('_id')->equals($replyID)
                    ->getQuery()
                    ->getSingleResult();

            if (!$reply) {
                throw new NotFoundHttpException();     // 404
            }
// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:OfferReply')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($replyID)

// Update found Campaign
                    ->field("lastUpdate")->set(time())
                    ->field('status')->set($status)


// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }

        return new JsonResponse();
    }

##### PRIVATE FUNCTIONS #####

    private function newUsername($name, $lastname) {

        $name = str_replace("'", '', $name);
        $name = str_replace(' ', '', $name);
        $name = str_replace('.', '', $name);
        $name = str_replace(',', '', $name);
        $name = str_replace('-', '', $name);
        $name = str_replace('/', '', $name);
        $name = str_replace('|', '', $name);
        $name = str_replace('&', '', $name);
        $name = $this->removeAccents($name);

        $lastname = str_replace("'", '', $lastname);
        $lastname = str_replace(' ', '', $lastname);
        $lastname = str_replace('.', '', $lastname);
        $lastname = str_replace(',', '', $lastname);
        $lastname = str_replace('-', '', $lastname);
        $lastname = str_replace('/', '', $lastname);
        $lastname = str_replace('|', '', $lastname);
        $lastname = str_replace('&', '', $lastname);
        $lastname = $this->removeAccents($lastname);

        $username = strtolower($name . '-' . $lastname);

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        for ($i = 1;;) {

// Get the User
            $exists = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username));

            if (!$exists)
                return $username;

            $username = strtolower($name . $lastname) . $i;
            $i++;
        }
        return null;
    }

    private function newCompanyUsername($name) {

// '.,-/\&

        $name = str_replace(' ', '-', $name);
        $name = str_replace("'", '', $name);
        $name = str_replace('.', '', $name);
        $name = str_replace(',', '', $name);
//$name = str_replace('-', '-', $name);
        $name = str_replace('/', '-', $name);
        $name = str_replace('|', '-', $name);
        $name = str_replace('&', '-', $name);
        $name = str_replace('---', '-', $name);
        $name = $this->removeAccents($name);

        $username = strtolower($name);

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        for ($i = 1;;) {

// Get the User
            $exists = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $username));

            if (!$exists)
                return $username;

            $username = strtolower($name) . $i;
            $i++;
        }
        return null;
    }

    private function sendValidationEmail($user, $token) {
        if ($user->getEmail()) {
            $username = $user->getUsername();
            $email = $user->getEmail();
            $hash = $user->getEmailValidationHash();

            switch ($this->get('kernel')->getEnvironment()) {
                case 'adhoc':
                    $baseLink = 'https://www-dev.mobintouch.com';
                    break;
                case 'prod':
                    $baseLink = 'https://www.mobintouch.com';
                    break;
                default:
                    $baseLink = 'https://www.mobintouch.com';
                    break;
            }

//$link = 'https://'.$parts[ "host" ]."/automatic/email/validation/$hash/$email/$username/$token";
            $link = $baseLink . "/automatic/email/validation/$hash/$email/$username/$token";

            $params = array(
                'personalizations' => array(
                    array(
                        'to' => array(
                            array('email' => $email)
                        ),
                        'substitutions' => array(
                            ':logo_link' => $baseLink,
                            ':logo_name_link' => $baseLink,
                            ':first_name' => $user->getName(),
                            ':verify_email_link' => $link
                        )
                    ),
                ),
                'from' => array(
                    'email' => "noreply@mobintouch.com",
                    'name' => "Mobintouch"
                ),
                'subject' => "Please verify your email address",
                'content' => array(array(
                        'type' => 'text/html',
                        'value' => ' '
                    )
                ),
                'template_id' => $this->container->getParameter('template_email_validation_id')
            );

            Utility::sendgrid_mail(json_encode($params));

            /* $send_grid_options = array(
              'sub' => array(':first_name' => array($user->getName()), ':verify_email_link' => array($link)),
              'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('template_email_validation_id'))))
              );
              $params = array(
              'to' => $email,
              'from' => "noreply@mobintouch.com",
              'fromname' => "Mobintouch",
              'subject' => 'Please verify your email address',
              'html' => " ",
              'x-smtpapi' => json_encode($send_grid_options),
              );
              $this->sendgrid_mail($params); */



            /*
              $message = \Swift_Message::newInstance()
              ->setSubject($user->getName() . ', please confirm your email address')
              ->setFrom(array('noreply@mobintouch.com' => 'Mobintouch'))
              ->setTo($email)
              ->setContentType("text/html")
              ->setBody(
              $this->renderView(
              'APIBundle:Mail:emailValidation.html.twig', array('title' => 'Welcome to Mobintouch!', 'user' => $user, 'link' => $link, 'unsubcribe' => 0)
              )
              )
              ;
              $this->get('mailer')->send($message);
             * 
             */
            return $hash;
        }

        return false;
    }

    /* private function get_fcontent($url,  $javascript_loop = 0, $timeout = 5 ) {

      $url = str_replace( "&amp;", "&", urldecode(trim($url)) );

      $cookie = tempnam ("/tmp", "CURLCOOKIE");
      $ch = curl_init();
      curl_setopt( $ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1" );
      curl_setopt( $ch, CURLOPT_URL, $url );
      curl_setopt( $ch, CURLOPT_COOKIEJAR, $cookie );
      curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true );
      curl_setopt( $ch, CURLOPT_ENCODING, "" );
      curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
      curl_setopt( $ch, CURLOPT_AUTOREFERER, true );
      curl_setopt( $ch, CURLOPT_SSL_VERIFYPEER, false );    # required for https urls
      curl_setopt( $ch, CURLOPT_CONNECTTIMEOUT, $timeout );
      curl_setopt( $ch, CURLOPT_TIMEOUT, $timeout );
      curl_setopt( $ch, CURLOPT_MAXREDIRS, 10 );
      $content = curl_exec( $ch );
      $response = curl_getinfo( $ch );
      curl_close ( $ch );

      if ($response['http_code'] == 301 || $response['http_code'] == 302) {
      ini_set("user_agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1");

      if ( $headers = get_headers($response['url']) ) {
      foreach( $headers as $value ) {
      if ( substr( strtolower($value), 0, 9 ) == "location:" )
      return get_url( trim( substr( $value, 9, strlen($value) ) ) );
      }
      }
      }

      if (( preg_match("/>[[:space:]]+window\.location\.replace\('(.*)'\)/i", $content, $value) || preg_match("/>[[:space:]]+window\.location\=\"(.*)\"/i", $content, $value) ) && $javascript_loop < 5) {
      return get_url( $value[1], $javascript_loop+1 );
      } else {
      return array( $content, $response );
      }

      } */

    private function removeAccents($str) {

        $a = array('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή');
        $b = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Υ', 'υ', 'υ', 'υ', 'Η', 'η');

        return str_replace($a, $b, $str);
    }

    private function updateUserSearch($dm, $user) {
        $name = $this->removeAccents($user->getName());
        $lastname = $this->removeAccents($user->getLastname());
        $company = $this->removeAccents($user->getCompany());
        $jobTitle = $this->removeAccents($user->getJobTitle());

        $tempname = explode(" ", $name);
        $templastname = explode(" ", $lastname);
        $tempcompany = explode(" ", $company);
        $tempjobTitle = explode(" ", $jobTitle);
        if (empty($company) || $company == "") {
            $search = array_merge($tempname, $templastname, $tempjobTitle);
        } else {
            $search = array_merge($tempname, $templastname, $tempcompany, $tempjobTitle);
        }

        /* $temp = array(
          $name." ".$lastname,
          $name." ".$lastname." ".$company,
          $name." ".$company,
          $lastname." ".$company,
          $lastname." ".$name." ".$company,
          $lastname." ".$name,
          $company." ".$name,
          $company." ".$lastname,
          $company." ".$name." ".$lastname,
          );

          $explodeJobTitle = explode(" ", $jobTitle);
          $search = array_merge($temp, $explodeJobTitle); */
        $user->setSearch($search);
        $dm->createQueryBuilder('DataBaseBundle:UserSearch')
                // Find the Campaign
                ->update()
                ->multiple(false)
                ->field('userID')->equals($user->getId())

                // Update found Campaign
                ->field('username')->set($user->getUsername())
                ->field('name')->set($name)
                ->field('lastname')->set($lastname)
                ->field('jobTitle')->set($jobTitle)
                ->field('company')->set(empty($company) || $company == "" ? null : $company)
                ->field('avatar')->set($user->getAvatar())
                ->field('responseRate')->set($user->getResponseRate())
                ->field('totalReceivedEmails')->set($user->getTotalReceivedEmails())
                ->field('validated')->set($user->getValidated())
                ->field('search')->set($search)
                // Options
                ->upsert(true)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
    }

    private function updateCompanySearch($dm, $company) {

        $name = $this->removeAccents($company->getName());
        $username = $this->removeAccents($company->getUsername());

        $search = array_merge(explode(" ", $name), explode(" ", $username));

        $dm->createQueryBuilder('DataBaseBundle:CompanySearch')
                ->update()
                ->multiple(false)
                ->field('companyID')->equals($company->getId())
                ->field('username')->set($company->getUsername())
                ->field('name')->set($name)
                ->field('size')->set($company->getSize())
                ->field('companyType')->set($company->getCompanyType())
                ->field('companySubType')->set($company->getCompanySubType())
                ->field('avatar')->set($company->getAvatar())
                ->field('search')->set($search)
                ->upsert(true)
                ->getQuery()
                ->execute();

        $dm->flush();
        $dm->clear(); // Detaches all objects from Doctrine!
    }

    private function updateResponseRate($user, $responseRate, $totalReceivedEmails) {
        $companyPage = $user->getCompanyPage();
        if ($companyPage) {

            $companyUsername = $companyPage['employee']['company'];

// Set up database
            $dm = $this->get('doctrine_mongodb.odm.document_manager');

// Get the User
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('username' => $companyUsername));

            if ($company) {
// Update Employees
                $employees = $company->getEmployees();
                $updateEmployees = false;

                foreach ($employees as $key => $employee) {
                    if ($employee['id'] == $user->getId()) {
                        $updateEmployees = true;
                        $employees[$key]['responseRate'] = $responseRate;
                        $employees[$key]['totalReceivedEmails'] = $totalReceivedEmails;
                        break;
                    }
                }

                if ($updateEmployees) {
// UPDATE
                    $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                            ->update()
                            ->multiple(false)
                            ->field('_id')->equals($company->getId())

// Update found Campaign
                            ->field("employees")->set($employees)

// Options
                            ->upsert(false)
                            ->getQuery()
                            ->execute();

                    $dm->flush();
                    $dm->clear(); // Detaches all objects from Doctrine!
                }
            }
        }
    }

    private function updateNewEmployees($companyName, $companyUsername) {

// SEARCH FOR EMPLOYEES
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        /*
          $users = $dm->createQueryBuilder('DataBaseBundle:User')
          ->field('validated')->equals(true)
          ->field('companyPage.employee')->exists(false);
          $users->expr()->field('company')->equals(new \MongoRegex("/^{$companyName}$/i"));
          $users = $users->getQuery()
          ->execute();
         */

        $users = $dm->createQueryBuilder('DataBaseBundle:User')
                ->field('validated')->equals(true)
                ->field('companyPage.employee')->exists(false)
                ->field('company')->equals(new \MongoRegex("/^{$companyName}$/i"))
                ->getQuery()
                ->execute();

        foreach ($users as $update) {

            $companyPage = array(
                "employee" => array('company' => $companyUsername)
            );

            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($update->getId())

// Update found Campaign
                    ->field('company')->set($companyName)
//->field('companyPage.employee')->set(array('company' => $companyUsername))
                    ->field('companyPage')->set($companyPage)
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $update->getId() . time(),
                                'type' => 6,
                                'read' => false,
                                'action' => 'Your company page "' . $companyName . '" has been created!',
                                'username' => $companyUsername,
                                'name' => $update->getName(),
                                'lastname' => $update->getLastname(),
                                'avatar' => $update->getAvatar(),
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $players = array();
            if ($update->getPlayerId()) {
                $players[] = $update->getPlayerId();
                switch ($this->get('kernel')->getEnvironment()) {
                    case 'adhoc':
                        $baseURL = 'https://www-dev.mobintouch.com';
                        break;
                    case 'prod':
                        $baseURL = 'https://www.mobintouch.com';
                        break;
                    default:
                        $baseURL = 'https://www.mobintouch.com';
                        break;
                }
                $this->send_push_notification(null, 'Your company page "' . $companyName . '" has been created!', $players, $baseURL . '/company/' . $companyUsername);
            }


// update DATABASE
            $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('username')->equals($companyUsername)

// Update found Campaign
                    ->field('employees')->addToSet(array(
                        'id' => $update->getId(),
                        'username' => $update->getUsername(),
                        'name' => $update->getName(),
                        'lastname' => $update->getLastname(),
                        'jobTitle' => $update->getJobTitle(),
                        'avatar' => $update->getAvatar(),
                        'cover' => $update->getCover(),
                        'miniResume' => $update->getMiniResume(),
                        'inTouchCounter' => $update->getInTouchCounter(),
                        'city' => $update->getCity(),
                        'basedCountry' => $update->getBasedCountry(),
                        'responseRate' => $update->getResponseRate(),
                        'totalReceivedEmails' => $update->getTotalReceivedEmails()
                    ))

// Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!
        }
    }

    private function getIp() {

        $ip = $_SERVER['REMOTE_ADDR'];

        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
//check for ip from share internet
            $ip = $_SERVER['HTTP_CLIENT_IP'];
        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
// Check for the Proxy User
            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
        }
// This will print user's real IP Address
// does't matter if user using proxy or not.

        $ip = explode(",", $ip);

        $ip = $ip[0];

        return $ip;
    }

    private function alreadyLinkedInSync($linkedinID, $lastname, $company) {

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $q = $dm->createQueryBuilder('DataBaseBundle:User');

        $q->addOr($q->expr()->field("linkedinID")->equals($linkedinID));

        if ($company) {
            $q->addOr($q->expr()
                            ->field("lastname")->equals($lastname)
                            ->field("company")->in($company)
            );
        }

        $count = $q->getQuery()->execute()->count();

        return $count > 0;
    }

    private function updateZohoCRM($email) {

        $getURL = "https://crm.zoho.com/crm/private/json/Contacts/getSearchRecordsByPDC";
        $getQuery = "authtoken=3a4e265995c597d3910679950d884a43&scope=crmapi&selectColumns=accountid&searchColumn=email&searchValue=" . $email;

        $getch = curl_init();
        /* set url to send post request */
        curl_setopt($getch, CURLOPT_URL, $getURL);
        /* allow redirects */
        curl_setopt($getch, CURLOPT_FOLLOWLOCATION, 1);
        /* return a response into a variable */
        curl_setopt($getch, CURLOPT_RETURNTRANSFER, 1);
        /* times out after 30s */
        curl_setopt($getch, CURLOPT_TIMEOUT, 30);
        /* set POST method */
        curl_setopt($getch, CURLOPT_POST, 1);
        /* add POST fields parameters */
        curl_setopt($getch, CURLOPT_POSTFIELDS, $getQuery); // Set the request as a POST FIELD for curl.
//Execute cUrl session
        $JSONresponse = curl_exec($getch);
        try {
            $response = json_decode($JSONresponse);
            curl_close($getch);
            $id = $response->response->result->Contacts->row->FL->content;
//print_r($id);

            $xml = '<?xml version="1.0" encoding="UTF-8"?>
                <Contacts>
                <row no="1">
                <FL val="Mobintouch">IN</FL>
                </row>
                </Contacts>';
            $auth = "3a4e265995c597d3910679950d884a43";
            $url = "https://crm.zoho.com/crm/private/xml/Contacts/updateRecords";
            $query = "authtoken=" . $auth . "&scope=crmapi&newFormat=1&id=$id&xmlData=" . $xml;
            $ch = curl_init();
// set url to send post request
            curl_setopt($ch, CURLOPT_URL, $url);
// allow redirects
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
// return a response into a variable
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
// times out after 30s
            curl_setopt($ch, CURLOPT_TIMEOUT, 30);
// set POST method
            curl_setopt($ch, CURLOPT_POST, 1);
// add POST fields parameters
            curl_setopt($ch, CURLOPT_POSTFIELDS, $query); // Set the request as a POST FIELD for curl.
//Execute cUrl session
            $response = curl_exec($ch);
            curl_close($ch);
//echo $response;
        } catch (\Exception $e) {
//print_r("Exception");
        }
    }

    private function arrayRecursiveDiff($aArray1, $aArray2) {
        $aReturn = array();
        if (is_object($aArray1))
            $aArray1 = get_object_vars($aArray1);
        if (is_object($aArray2))
            $aArray2 = get_object_vars($aArray2);
        foreach ($aArray1 as $mKey => $mValue) {
            if (array_key_exists($mKey, $aArray2)) {
                if (is_array($mValue)) {
                    $aRecursiveDiff = $this->arrayRecursiveDiff($mValue, $aArray2[$mKey]);
                    if (count($aRecursiveDiff)) {
                        $aReturn[$mKey] = $aRecursiveDiff;
                    }
                } else {
                    if ($mValue != $aArray2[$mKey]) {
                        $aReturn[$mKey] = $mValue;
                    }
                }
            } else {
                $aReturn[$mKey] = $mValue;
            }
        }
        return $aReturn;
    }

    private function createNewOfferIdentifier() {
        $newIdentifier = null;

        $length = 4;
        $characters = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $newIdentifier = '';
        for ($i = 0; $i < $length; $i++) {
            $newIdentifier .= $characters[rand(0, $charactersLength - 1)];
        }

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        $exists = $dm->createQueryBuilder('DataBaseBundle:Offer')
                ->field('identifier')->equals($newIdentifier)
                ->getQuery()
                ->getSingleResult();

        if (!$exists)
            return $newIdentifier;
        return $this->createNewOfferIdentifier();
    }

    private function isImage($dataURI) {
// $availableExtensions = array("png", "jpg", "jpeg", "gif");

        $ext = false;
        $isImage = false;
        try {
            switch (intval(exif_imagetype($dataURI))) {
                case 1;
// 1	IMAGETYPE_GIF
                    $ext = 'gif';
                    $isImage = true;
                    break;
                case 2;
// 2	IMAGETYPE_JPEG
                    $ext = 'jpg';
                    $isImage = true;
                    break;
                case 3;
// 3	IMAGETYPE_PNG
                    $ext = 'png';
                    $isImage = true;
                    break;
                default:
                    break;
            }
            return array($isImage, $ext);
        } catch (\Exception $e) {
            return array(false, false);
        }
    }

    public function getPublicOffersAction(Request $request) {
        /* $users=(object)["username"=>""];

          $data=$this->updateLog($users);
          return new JsonResponse($data); */
#echo $this->container->getParameter('user_profile_buy_raffic');exit;
// Get JSON parameters
        $postdata = $request->getContent();
        $request = json_decode($postdata);

// Get POST parameters
        $skip = intval(isset($request->skip) ? $request->skip : 0);

        $limit = 30;

        $offers = array();
// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');

// GET OFFERS
        $q = $dm->createQueryBuilder('DataBaseBundle:Offer')
                        ->field("status")->equals('LIVE');

// PUBLIC OFFERS
        $q->addOr($q->expr()
                        ->field("visibility")->equals('Everyone')
        );
        $q = $q->sort('_id', -1)
                ->getQuery()
                ->execute();

        foreach ($q as $o) {
            array_push($offers, $o);
        }
        return new JsonResponse($offers);
    }

    public function linkedinTokenAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();
        $postdata = $request->getContent();
        $request = json_decode($postdata);
        $redirectBase = $request->redirectBase;

        /* for server */
        $client_id = "77qs31x0xkh7tz";
        $client_secret = "fzruvzqCLHPUrWE0";
        $redirect_uri = $redirectBase . '/offers/all';

        /* for local */
        /* $client_id="75hu5mydytl4vt";
          $client_secret="OB84oCLrjQKR9C3e";
          //$redirect_uri = $redirectBase.'/mobntouch_git/src/offers/all';
          $redirect_uri = $redirectBase.'/mobntouch/src/offers/all'; */

        $code = $request->code;
        $access_token = '';
        $getURL = "https://www.linkedin.com/uas/oauth2/accessToken";
        $params = array(
            'grant_type' => 'authorization_code',
            'client_id' => $client_id,
            'client_secret' => $client_secret,
            'code' => $code,
            'redirect_uri' => $redirect_uri,
        );

        $url = 'https://www.linkedin.com/uas/oauth2/accessToken?' . http_build_query($params);
        $context = stream_context_create(
                array('http' =>
                    array('method' => 'POST',
                    )
                )
        );

        $response = file_get_contents($url, true, $context);
        $token = json_decode($response);
        $access_token = $token->access_token;

        $data = [
            "comment" => "Mobintouch StackOffer - Showcase Mobile Traffic Offer from all over the world ",
            "content" => [
                "title" => "Mobintouch",
                "description" => "Join me on Mobintouch, the world’s 1st Social Network for mobile advertising",
                "submitted-url" => "www.mobintouch.com/offers/public/all",
            ],
            "visibility" => [
                "code" => "anyone"
            ]
        ];
        $url = "https://api.linkedin.com/v1/people/~/shares?oauth2_access_token=$access_token&format=json";
// Tell streams to make a POST request
        $context = stream_context_create(
                array('http' =>
                    array(
                        'method' => 'POST',
                        'header' => 'Content-type: application/json',
                        'content' => json_encode($data)
                    )
                )
        );

// Retrieve access token information
        $response = file_get_contents($url, true, $context);
        if ($response) {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
                    ->field('hasLinkdinshare')->set(true)
                    ->upsert(true)
                    ->getQuery()
                    ->execute();
            $dm->flush();
            $dm->clear();
        }
        return new JsonResponse(["hasLinkdinshare" => true]);
//return new JsonResponse(["access_token"=>$access_token]);
    }

    public function publicHasShareAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User)
            throw new NotFoundHttpException();
        $postdata = $request->getContent();
        $request = json_decode($postdata);
        $accessToken = $request->accessToken;
        $accessToken = $request->accessToken;
        $data = [
            "comment" => "Mobintouch - The World’s 1st Social Network for Mobile Advertising",
            "content" => [
                "title" => "Mobintouch",
                "description" => "Join me on Mobintouch, the world’s 1st Social Network for mobile advertising",
                "submitted-url" => "www.mobintouch.com",
            ],
            "visibility" => [
                "code" => "anyone"
            ]
        ];
        $url = "https://api.linkedin.com/v1/people/~/shares?oauth2_access_token=$accessToken&format=json";
// Tell streams to make a POST request
        $context = stream_context_create(
                array('http' =>
                    array(
                        'method' => 'POST',
                        'header' => 'Content-type: application/json',
                        'content' => json_encode($data)
                    )
                )
        );

// Retrieve access token information
        $response = file_get_contents($url, true, $context);
        if ($response) {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
                    ->field('hasLinkdinshare')->set(true)
                    ->upsert(true)
                    ->getQuery()
                    ->execute();
            $dm->flush();
            $dm->clear();
        }
        return new JsonResponse(["hasLinkdinshare" => true]);
    }

    public function updatePercentageAction(Request $request) {

        $users = array();
        $percentage = array();

// Set up database
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $q = $dm->createQueryBuilder('DataBaseBundle:User');
        /* $temp = $q
          ->select('username', 'profilePoints','id')
          ->sort('profilePoints','DESC')
          ->limit(1000)
          ->getQuery()
          ->execute();

          foreach ($temp as $dbuser) {
          // $userIds[] = $dbuser->id;
          // $users[] = $dbuser;
          echo "|".$dbuser->profilePoints."|";
          echo "<br/>";
          }
          exit;
          echo "<pre>";print_r($users);exit;
          // GET OFFERS
          $q = $dm->createQueryBuilder('DataBaseBundle:User'); */

        $q = $q->sort('_id', -1)
//->limit(30)
                ->getQuery()
                ->execute();
//$count=1;
        $companyPage = [];
        foreach ($q as $o) {

            /* if($o->email=="mitali@gmail.com"){
              $p = $this->updateProfilePercentage($o);
              echo "<pre>";print_r($p);
              echo "tsstrst";exit;
              exit;
              } */
//array_push($users,$o);
            if (isset($_GET) && $_GET['type'] == "1") {
                if ($o->companyType == "") {
                    $p = $this->updateProfilePercentage($o);
                    $users[] = ["user" => $p];
                }
            }
            if (isset($_GET) && $_GET['type'] == "2") {
                if ($o->companyType != "") {
                    $p = $this->updateProfilePercentage($o);
                    $users[] = ["user_comp" => $p];
                }
            }
            if (isset($_GET) && $_GET['type'] == "3") {
                if ($o->companyType == "") {
                    $p1 = $this->countCompanyPercentage($o);
                    $users[] = ["comp" => $p1];
                }
            }
            if (isset($_GET) && $_GET['type'] == "4") {
                if ($o->companyType != "") {
                    $p1 = $this->countCompanyPercentage($o);
                    $users[] = ["comp-user" => $p1];
                }
            }
            if (isset($_GET) && $_GET['type'] == "5") {
                if (isset($o->companyPage)) {
                    if (isset($o->companyPage[0])) {
                        $demo = [];
                        $demo["email"] = $o->email;
                        $demo["username"] = $o->username;
                        $demo["name"] = $o->name;
                        $demo["lastname"] = $o->lastname;
                        $demo["companyPage"] = $o->companyPage;
                        $companyPage['employee']["company"] = $o->companyPage[0]["company"];
                        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($o->getId())
                                ->field('companyPage')->set($companyPage)
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        $dm->flush();
                        $dm->clear();
                        echo "-----------------------------------------";
                        echo "<br/>";
                        echo "<pre>";
                        print_r($demo);
                        echo "<br/>";
                    }
                }
            }
            /*  if ($o->companyType == "") {
              $p = $this->updateProfilePercentage($o);
              $p1 = $this->countCompanyPercentage($o);
              $users[] = ["user" => $p1];
              } */


            /*  if($o->trackingServices){
              echo "tracking"."<br/>";


              foreach($o->trackingServices as $key=>$val){

              if(is_numeric($key)){
              $trackingServices=["flurry"=>false,"othertrackingSolutions"=>[]];
              $dm->createQueryBuilder('DataBaseBundle:User')
              ->update()
              ->multiple(false)
              ->field('_id')->equals($o->getId())
              ->field('trackingServices')->set($trackingServices)
              ->field('updateDate')->set(time())
              ->upsert(false)
              ->getQuery()
              ->execute();
              $dm->flush();
              $dm->clear(); // Detaches all objects from Do
              echo $key."<br/>";

              }

              }
              $users[] = ["user" => $o];
              echo "---------------------------------"."<br/>";
              } */
        }
//   exit;

        return new JsonResponse($users);
    }

    public function integrateCompanyAction(Request $request) {
        $user = $this->getCurrentUser();
        $postdata = $request->getContent();
        $request = json_decode($postdata);
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $companyid = $request->companyid;
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $company = $dm->getRepository('DataBaseBundle:Company')->findOneBy(array('_id' => $companyid));
            if ($company) {
                $employees = $company->getEmployees();
                $emp = array(
                    'id' => $user->getId(),
                    'username' => $user->getUsername(),
                    'name' => $user->getName(),
                    'lastname' => $user->getLastname(),
                    'jobTitle' => $user->getJobTitle(),
                    'avatar' => $user->getAvatar(),
                    'cover' => $user->getCover(),
                    'miniResume' => $user->getMiniResume(),
                    'inTouchCounter' => $user->getInTouchCounter(),
                    'city' => $user->getCity(),
                    'basedCountry' => $user->getBasedCountry(),
                    'responseRate' => $user->getResponseRate(),
                    'totalReceivedEmails' => $user->getTotalReceivedEmails()
                );

                $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($companyid)

// Update found Campaign
                        ->field('employees')->addToSet($emp)
// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $companyPage = array(
                    "employee" => array('company' => $company->username),
                );

                $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                        ->update()
                        ->multiple(false)
                        ->field('_id')->equals($user->getId())
// Update found Campaign
                        ->field('company')->set($company->name)
                        ->field('companyPage')->set($companyPage)
//->field('companyPage.employee')->set(array('company' => $companyUsername))
//->field('companyPage.administrator')->set(array('company' => $companyUsername))
                        ->field('updateDate')->set(time())

// Options
                        ->upsert(false)
                        ->getQuery()
                        ->execute();

                $dm->flush();
                $dm->clear(); // Detaches all objects from Doctrine!
                return new JsonResponse($company);
            } else {
                return new JsonResponse();
            }
            return new JsonResponse();
        }
    }

    /**
     * @ApiDoc(
     *  tags={
     *         "test",
     *     },
     *  description="To be done...",
     *  output="array('code' => $code, 'user' => $user)",
     *  statusCodes={
     *         200="Returned when successful",
     *         403="Returned when the user is not authorized to say hello",
     *         404={
     *           "Returned when the user is not found",
     *           "Returned when something else is not found"
     *         }
     *     }
     * )
     */
    public function getCompaniesAction(Request $request) {
        $data = (object) $request->request->all();
        $user = $this->getCurrentUser(); //Get current loggedin user
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $limit = 20;
        $skip = 0;
        if (isset($data->skip)) {
            $skip = $data->skip;
        }

        $arrQueryBasedCountries = array();
        $arrQueryCities = array();
        $arrQueryInterests = array();
        $arrQueryTeams = array();
        $arrQueryTechs = array();
        $arrQueries = array();

        if (isset($data->query) && is_array($data->query)) {

            $stopKeywords = array("able", "about", "above", "abroad", "according", "accordingly", "across", "actually", "adj", "after", "afterwards", "again", "against", "ago", "ahead", "ain\'t", "all", "allow", "allows", "almost", "alone", "along", "alongside", "already", "also", "although", "always", "am", "amid", "amidst", "among", "amongst", "an", "and", "another", "any", "anybody", "anyhow", "anyone", "aything", "anyway", "anyways", "anywhere", "apart", "appear", "appreciate", "appropriate", "are", "aren\'t", "around", "as", "a\'s", "aside", "ask", "asking", "associated", "at", "available", "away", "awfully", "back", "backward", "backwards", "be", "became", "because", "become", "becomes", "becoming", "been", "before", "beforehand", "begin", "behind", "being", "believe", "belw", "beside", "besides", "best", "better", "between", "beyond", "both", "brief", "but", "by", "came", "can", "cannot", "cant", "can\'t", "caption", "cause", "causes", "certain", "certainly", "changes", "clearly", "c\'mon", "co", "co.", "com", "come", "comes", "concerning", "consequently", "consider", "considering", "contain", "containing", "contains", "corresponding", "could", "couldn\'t", "course", "c\'s", "currently", "dare", "daren\'t", "definitely", "described", "despite", "did", "didn\'t", "different", "directly", "do", "does", "doesn\'t", "doing", "done", "do\'t", "down", "downwards", "during", "each", "edu", "eg", "eight", "eighty", "either", "else", "elsewhere", "end", "ending", "enough", "entirely", "especially", "et", "etc", "even", "ever", "evermore", "every", "everybody", "everyone", "everything", "everywhere", "ex", "exactly", "example", "except", "fairly", "far", "farther", "few", "fewer", "fifth", "first", "five", "folloed", "following", "follows", "for", "forever", "former", "formerly", "forth", "forward", "found", "four", "from", "further", "furthermore", "get", "gets", "getting", "given", "gives", "go", "goes", "going", "gone", "got", "gotten", "greetings", "had", "hadn\'t", "half", "happens", "hardly", "has", "hasn\'t", "have", "haven\'t", "having", "he", "he\'d", "he\'ll", "hello", "help", "hece", "her", "here", "hereafter", "hereby", "herein", "here\'s", "hereupon", "hers", "herself", "he\'s", "hi", "him", "himself", "his", "hither", "hopefully", "how", "howbeit", "however", "hunred", "i\'d", "ie", "if", "ignored", "i\'ll", "i\'m", "immediate", "in", "inasmuch", "inc", "inc.", "indeed", "indicate", "indicated", "indicates", "inner", "inside", "insofar", "instead", "ino", "inward", "is", "isn\'t", "it", "it\'d", "it\'ll", "its", "it\'s", "itself", "i\'ve", "just", "k", "keep", "keeps", "kept", "know", "known", "knows", "last", "lately", "later", "latter", "lattely", "least", "less", "lest", "let", "let\'s", "like", "liked", "likely", "likewise", "little", "look", "looking", "looks", "low", "lower", "ltd", "made", "mainly", "make", "makes", "many", "my", "maybe", "mayn\'t", "me", "mean", "meantime", "meanwhile", "merely", "might", "mightn\'t", "mine", "minus", "miss", "more", "moreover", "most", "mostly", "mr", "mrs", "much", "must", "must\'t", "my", "myself", "name", "namely", "nd", "near", "nearly", "necessary", "need", "needn\'t", "needs", "neither", "never", "neverf", "neverless", "nevertheless", "new", "next", "nine", "niety", "no", "nobody", "non", "none", "nonetheless", "noone", "no-one", "nor", "normally", "not", "nothing", "notwithstanding", "novel", "now", "nowhere", "obviously", "of", "off", "often", "oh", "ok", "okay", "old", "on", "once", "one", "ones", "one\'s", "only", "onto", "opposite", "or", "other", "others", "otherwise", "ought", "oughtn\'t", "our", "ours", "ourselves", "out", "outide", "over", "overall", "own", "particular", "particularly", "past", "per", "perhaps", "placed", "please", "plus", "possible", "presumably", "probably", "provided", "provides", "que", "qite", "qv", "rather", "rd", "re", "really", "reasonably", "recent", "recently", "regarding", "regardless", "regards", "relatively", "respectively", "right", "round", "said", "same", "saw", "say", "saying", "says", "second", "secondly", "see", "seeing", "seem", "seemed", "seeming", "seems", "seen", "self", "selves", "sensible", "sent", "serious", "seriously", "seven", "severa", "shall", "shan\'t", "she", "she\'d", "she\'ll", "she\'s", "should", "shouldn\'t", "since", "six", "so", "some", "somebody", "someday", "somehow", "someone", "something", "sometime", "sometims", "somewhat", "somewhere", "soon", "sorry", "specified", "specify", "specifying", "still", "sub", "such", "sup", "sure", "take", "taken", "taking", "tell", "tends", "th", "than", "thank", "thanks", "thanx", "that", "that\'ll", "thats", "that\'s", "that\'ve", "the", "their", "theirs", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "there\'d", "therefoe", "therein", "there\'ll", "there\'re", "theres", "there\'s", "thereupon", "there\'ve", "these", "they", "they\'d", "they\'ll", "they\'re", "they\'ve", "thing", "things", "think", "third", "thiry", "this", "thorough", "thoroughly", "those", "though", "three", "through", "throughout", "thru", "thus", "till", "to", "together", "too", "took", "toward", "towards", "tried", "tries", "tuly", "try", "trying", "t\'s", "twice", "two", "un", "under", "underneath", "undoing", "unfortunately", "unless", "unlike", "unlikely", "until", "unto", "up", "upon", "upwards", "us", "use", "used", "useful", "uses", "using", "usually", "v", "value", "various", "versus", "very", "via", "viz", "vs", "want", "wants", "was", "wasn\'t", "way", "we", "we\'d", "welcome", "well", "we\'ll", "went", "were", "we\'re", "weren\'t", "we\'ve", "what", "whatever", "what\'ll", "what\'s", "what\'ve", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whee\'s", "whereupon", "wherever", "whether", "which", "whichever", "while", "whilst", "whither", "who", "who\'d", "whoever", "whole", "who\'ll", "whom", "whomever", "who\'s", "whose", "why", "wil", "willing", "wish", "with", "within", "without", "wonder", "won\'t", "would", "wouldn\'t", "yes", "yet", "you", "you\'d", "you\'ll", "your", "you\'re", "yours", "yourself", "yourselves", "you\'ve", "zero");

            foreach ($data->query as $query) {
                if (isset($query['type'])) {
                    switch ($query['type']) {
                        case 'country':
                            $arrQueryBasedCountries[] = new \MongoRegex("/{$query['basedCountry']}/i");
                            break;
                        case 'city':
                            $arrQueryCities[] = new \MongoRegex("/{$query['city']}/i");
                            break;
                        case 'interest':
                            $arrQueryInterests[] = new \MongoRegex("/{$query['text']}/i");
                            break;
                        case 'team':
                            $arrQueryTeams[] = $query['username'];
                            break;
                        case 'tech':
                            $arrQueryTechs[] = new \MongoRegex("/{$query['text']}/i");
                            break;
                        default:
                            $texts = explode(' ', $query['text']);
                            $textsCount = count($texts);
                            if ($textsCount > 1) {
                                foreach ($texts as $text)
                                    if ($text && !in_array($text, $stopKeywords))
                                        $arrQueries[] = new \MongoRegex("/{$text}/ix");
                            }else {
                                $arrQueries[] = new \MongoRegex("/{$texts[0]}/ix");
                            }
                            break;
                    }
                } else {
                    $texts = explode(' ', $query['text']);
                    $textsCount = count($texts);
                    if ($textsCount > 1) {
                        foreach ($texts as $text)
                            if ($text && !in_array($text, $stopKeywords))
                                $arrQueries[] = new \MongoRegex("/{$text}/ix");
                    }else {
                        $arrQueries[] = new \MongoRegex("/{$texts[0]}/ix");
                    }
                }
            }
        }

        $query = $dm->createQueryBuilder('DataBaseBundle:Company')
                ->hydrate(false);

        if ($data->companies === 'hiring') {
            $query->field('isHiring')->equals(true);
        }

        if ($data->companies === 'following') {
            $query->field('followers.id')->equals($user->getId());
        }

        if ($arrQueryCities) {
            $query->field('city')->in($arrQueryCities);
        }

        if ($arrQueryBasedCountries) {
            $query->field('basedCountry')->in($arrQueryBasedCountries);
        }

        if ($arrQueryInterests) {
            $query->field('markets')->in($arrQueryInterests);
        }

        if ($arrQueryTeams) {
            $query->field('employees.username')->in($arrQueryTeams);
        }

        if ($arrQueryTechs) {
            $query->field('tech')->in($arrQueryTechs);
        }

        if ($arrQueries) {
            $query->field('search')->all($arrQueries);
        }

        $count = $query->getQuery()->execute()->count();
        $companies = $query
                ->select('id', 'username', 'name', 'avatar', 'cover', 'city', 'basedCountry', 'description', 'followers')
                ->sort('companyPoints', -1)
                ->limit($limit)
                ->skip($skip * $limit)
                ->getQuery()
                ->execute();

        $arrCompanies = array();
        foreach ($companies as $id => $company) {
            $company['id'] = $id;
            unset($company["_id"]);

            $company['noOfFollowers'] = 0;
            $company['isFollowing'] = false;

            if (array_key_exists('followers', $company)) {
                $followers = $this->array_column($company['followers'], 'id');
                if (isset($company['description']))
                    $company['description'] = substr($company['description'], 0, 160);
                $company['noOfFollowers'] = count($followers);
                $company['isFollowing'] = in_array($user->getId(), $followers);
            }
            unset($company['followers']);
            $arrCompanies[] = $company;
        }

        return new JsonResponse(array('count' => $count, 'companies' => $arrCompanies));
    }

    public function getStackOffersMetricsAction(Request $request) {
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $offers = $dm->createQueryBuilder('DataBaseBundle:Offer')
                ->field('status')->equals('LIVE')
                ->field('closeOfferEmailNotification')->equals(false)
                ->getQuery()
                ->execute();
        $i = 0;
        foreach ($offers as $offer) {
            $i++;
            print_r("ALERTING OWNER:\n");
        }
        echo $i;
        exit;
        echo "<pre>";
        print_r($offers);
        exit;
        $currentTime = time();
        $last7d = strtotime("-7 day");

        $response = array();
//$response['last7day'] = $last7d;

        $numberOfLiveOffers = $dm->createQueryBuilder('DataBaseBundle:Offer')
                        ->field('status')->equals('LIVE')
                        ->getQuery()
                        ->execute()->count();
        $response['live_offers'] = $numberOfLiveOffers;

        /*
          $numberOfLiveOffersInWeek = $dm->createQueryBuilder('DataBaseBundle:Offer')
          ->field('status')->equals('LIVE')
          ->field('startingTimestamp')->gt($last7d)
          ->field('endingTimestamp')->lt($currentTime)
          ->getQuery()
          ->execute()->count();
          $response['week_live_offers'] = $numberOfLiveOffersInWeek;
         */

        $numberOfClosedOffers = $dm->createQueryBuilder('DataBaseBundle:Offer')
                        ->field('status')->equals('CLOSED')
                        ->getQuery()
                        ->execute()->count();
        $response['closed_offers'] = $numberOfClosedOffers;

        /*
          $numberOfClosedOffersInWeek = $dm->createQueryBuilder('DataBaseBundle:Offer')
          ->field('status')->equals('CLOSED')
          ->field('startingTimestamp')->gt($last7d)
          ->field('endingTimestamp')->lt($currentTime)
          ->getQuery()
          ->execute()->count();
          $response['week_closed_offers'] = $numberOfClosedOffersInWeek;
         */

        $numberOdReplies = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
                        ->getQuery()
                        ->execute()->count();
        $response['offer_replies'] = $numberOdReplies;

        /*
          $numberOdRepliesInWeek = $dm->createQueryBuilder('DataBaseBundle:OfferReply')
          ->field('lastUpdate')->gt($last7d)
          ->getQuery()
          ->execute()->count();
          $response['week_offer_replies'] = $numberOdRepliesInWeek;
         */

        $message = \Swift_Message::newInstance()
                ->setSubject("Stack Offers Metrics")
                ->setFrom(array('noreply@mobintouch.com' => 'Mobintouch Stack Offers Metrics'))
                ->setTo('andres@mobintouch.com')
                ->setContentType("text/html")
                ->setBody('<div><strong>Number Of Live Offers : </strong>' . $numberOfLiveOffers . '</div><div><strong>Number Of Closed Offers : </strong>' . $numberOfClosedOffers . '</div><div><strong>Number Of Replies : </strong>' . $numberOdReplies . '</div>');
        if ($this->get('kernel')->getEnvironment() != 'dev')
            $this->get('mailer')->send($message);

        return new JsonResponse($response);
    }

    public function storeContactsAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $contacts = $request->get('contacts');
            $provider = $request->get('provider');
            $existingUsers = array();
            $notifiedUsers = array();
//Working code on dev and prod to store inviter store contact
//            $arrEmails = array();
//            $emails = $dm->createQueryBuilder('DataBaseBundle:User')
//                    ->hydrate(false)
//                    ->select('email')
//                    ->getQuery()
//                    ->execute()
//                    ->toArray();
//
//            foreach ($emails as $email) {
//                if (isset($email['email'])) {
//                    $arrEmails[] = $email['email'];
//                }
//            }

            $users = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'email', 'avatar', 'inTouchCounter', 'inBusinessRelationCounter', 'jobTitle', 'company')
                    ->getQuery()
                    ->execute();

            foreach ($users as $u) {
                $u['id'] = (string) $u['_id'];
                unset($u['_id']);
                if (is_array($u) && array_key_exists('email', $u)) {
                    $arrUsers[$u['email']] = $u;
                }
            }
            $arrEmails = array_keys($arrUsers);

            $token = array();
            foreach ($contacts as $email => $name) {
                $email = trim($email);
                $isAlreadyExists = in_array($email, $arrEmails);

                $isAlreadyInvited = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                ->field("userID")->equals($user->getId())
                                ->field("email")->equals($email)
                                ->field("isInvited")->equals(true)
                                ->getQuery()
                                ->execute()
                                ->count() > 0 ? true : false;

                $time = time();
                $dm->createQueryBuilder('DataBaseBundle:Invitation')
                        ->update()
                        ->field("userID")->equals($user->getId())
                        ->field("email")->equals($email)
                        ->field("createdDate")->set($time)
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
                if (!in_array($time, $token))
                    $token[] = $time;

                $isAlreadyStored = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                                ->field("userID")->equals($user->getId())
                                ->field("email")->equals($email)
                                ->getQuery()
                                ->execute()
                                ->count() > 0 ? true : false;
                $firstname = $lastname = '';
                if (isset($name['name'])) {
                    $nameArray = explode(' ', utf8_encode($name['name']));
                    $firstname = isset($nameArray[0]) ? $nameArray[0] : '';
                    $lastname = isset($nameArray[1]) ? $nameArray[1] : '';
                }

                if (!$isAlreadyExists && !$isAlreadyInvited && !$isAlreadyStored) {
                    $dm->createQueryBuilder('DataBaseBundle:Invitation')
                            ->insert()
                            ->field("userID")->set($user->getId())
                            ->field("firstname")->set($firstname)
                            ->field("lastname")->set($lastname)
                            ->field("company")->set(isset($name['company']) && !empty($name['company']) ? $name['company'] : 'null')
                            ->field("email")->set($email)
                            ->field("isInvited")->set(false)
                            ->field("isAlreadyExists")->set(false)
                            ->field("provider")->set($provider)
                            ->field("createdDate")->set($time)
                            ->getQuery()
                            ->execute();
                } else if ($isAlreadyExists && !$isAlreadyInvited) {
                    //New Modified code to retrive user other informatiosn
                    $u = $arrUsers[$email];
                    unset($u['email']);
                    if (!array_key_exists('inTouchCounter', $u)) {
                        $u['inTouchCounter'] = 0;
                    }
                    //End of modified script
                    //Old Working Script
//                    $dm->createQueryBuilder('DataBaseBundle:Invitation')
//                            ->insert()
//                            ->field("userID")->set($user->getId())
//                            ->field("firstname")->set($firstname)
//                            ->field("lastname")->set($lastname)
//                            ->field("company")->set(isset($name['company']) && !empty($name['company']) ? $name['company'] : 'null')
//                            ->field("email")->set($email)
//                            ->field("isInvited")->set(true)
//                            ->field("isAlreadyExists")->set(true)
//                            ->field("provider")->set($provider)
//                            ->field("createdDate")->set($time)
//                            ->getQuery()
//                            ->execute();
                    $dm->createQueryBuilder('DataBaseBundle:Invitation')
                            ->insert()
                            ->field("userID")->set($user->getId())
                            ->field("firstname")->set($firstname)
                            ->field("lastname")->set($lastname)
                            ->field("company")->set(isset($name['company']) && !empty($name['company']) ? $name['company'] : 'null')
                            ->field("email")->set($email)
                            ->field("isInvited")->set(false)
                            ->field("isAlreadyExists")->set(true)
                            ->field("provider")->set($provider)
                            ->field("createdDate")->set($time)
                            ->field("existingUser")->set($u)
                            ->getQuery()
                            ->execute();
                    $existingUsers[] = $email;
                } else if ($isAlreadyExists && $isAlreadyInvited) {
                    $notifiedUsers[] = $email;
                    $existingUsers[] = $email;
                } else if (!$isAlreadyExists && $isAlreadyInvited) {
                    $notifiedUsers[] = $email;
                }

                $dm->flush();
                $dm->clear();

                switch ($this->get('kernel')->getEnvironment()) {
                    case 'adhoc':
                        $baseURL = 'https://cdn-dev.mobintouch.com';
                        break;
                    case 'prod':
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                    default:
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                }
                $userProfileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';

                $users_to_notify = array_diff($existingUsers, $notifiedUsers);
                if (count($users_to_notify)) {
                    foreach ($users_to_notify as $id) {
                        if ($this->get('kernel')->getEnvironment() == 'prod') {
//Mail to the existing users as notification
                            $send_grid_options = array(
                                'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':url' => array("https://www.mobintouch.com/profile/" . $user->username), ':sender_img' => array($userProfileUrl)),
                                'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_already_exists_contact_template_id'))))
                            );

                            $params = array(
                                'to' => $id,
                                'from' => "noreply@mobintouch.com",
                                'fromname' => $user->name . " " . $user->lastname,
                                'subject' => $user->name . " " . $user->lastname . " is now on mobintouch",
                                'html' => " ",
                                'x-smtpapi' => json_encode($send_grid_options),
                            );

                            $this->sendgrid_mail($params);
                        }
                        /* $dm->createQueryBuilder('DataBaseBundle:Invitation')
                          ->update()
                          ->multiple(true)
                          ->field('isInvited')->set(true)
                          ->field('userID')->equals($user->getId())
                          ->field('email')->in($users_to_notify)
                          ->upsert(false)
                          ->getQuery()
                          ->execute();
                          $dm->flush();
                          $dm->clear(); */

                        if (!in_array($id, $notifiedUsers)) {
                            $notifiedUsers[] = $id;
                        }
                    }
                }
            }

            $dm->flush();
            $dm->clear();

            $inBusinessRelationCounter = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                    ->field('isAlreadyExists')->equals(true)
                    ->field('userID')->equals($user->getId())
                    ->getQuery()
                    ->execute()
                    ->count();

            $dm->createQueryBuilder('DataBaseBundle:User')
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())
                    ->field('inBusinessRelationCounter')->set($inBusinessRelationCounter)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear();
        }

        return new JsonResponse(array("existing_users" => $existingUsers, "notified_users" => $notifiedUsers, "token" => $token));
    }

    public function updateInviteStatusAction(Request $request) {

        $user = $this->getCurrentUser();
        //ini_set('mongo.native_long', strlen(decbin(~0)) == 32 ? 0 : 1);
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $is_selected_all = $request->get('is_selected_all');
            $emails = $request->get('contacts');
            $provider = $request->get('provider');
            $token = $request->get('token_array');
            $search = $request->get('search');

            $timeBefore5min = time() - (60 * 5);

            if (!$is_selected_all && $emails) {
                $invitedEmails = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                        ->hydrate(false)
                        ->field("userID")->equals($user->getId())
                        ->field("isInvited")->equals(true)
                        ->select('email')
                        ->getQuery()
                        ->execute()
                        ->toArray();


                $arrEmails = array();
                foreach ($invitedEmails as $email) {
                    if (isset($email['email'])) {
                        $arrEmails[] = $email['email'];
                    }
                }

                $emails = array_diff($emails, $arrEmails);
            } else {
                $tokenArray = array();
                if ($token) {
                    foreach ($token as $t) {
                        array_push($tokenArray, (int) $t);
                    }
                }


                $e = $dm->createQueryBuilder('DataBaseBundle:Invitation')
                        ->hydrate(false)
                        ->field("userID")->equals($user->getId())
                        ->field("isInvited")->equals(false)
                        ->select('email', 'isInvited')
                        ->field('provider')->equals($provider)
                        ->where("(this.firstname.toLowerCase() + ' ' + this.lastname.toLowerCase() + ' ' + this.email + ' ' + this.company).match('" . strtolower($search) . "'.replace(' ', '( .*)? '))")
                        ->field("createdDate")->in($tokenArray)
                        ->getQuery()
                        ->execute()
                        ->toArray();

                $emails = array();
                foreach ($e as $email) {
                    if (isset($email['email']) && !$email['isInvited']) {
                        $emails[] = $email['email'];
                    }
                }
            }

            if ($emails) {
                $dm->createQueryBuilder('DataBaseBundle:Invitation')
                        ->update()
                        ->multiple(true)
                        ->field('isInvited')->set(true)
                        ->field('userID')->equals($user->getId())
                        ->field('email')->in($emails)
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
                $dm->flush();
                $dm->clear();

                switch ($this->get('kernel')->getEnvironment()) {
                    case 'adhoc':
                        $baseURL = 'https://cdn-dev.mobintouch.com';
                        break;
                    case 'prod':
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                    default:
                        $baseURL = 'https://cdn.mobintouch.com';
                        break;
                }
                $userProfileUrl = $user->getAvatar() ? $baseURL . $user->getAvatar() : $baseURL . '/img/mit-default-avatar.png';

                $mMc = new ManageMutualConnections($dm);
                foreach ($emails as $email) {

                    $secondUser = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => $email));

                    if ($secondUser && !$mMc->checkIsIntouch($user, $secondUser)) {
                        $time = time();
                        $dm->createQueryBuilder('DataBaseBundle:User')
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($secondUser->getId())
                                ->field('inTouch')->addToSet(
                                        array(
                                            'id' => $user->getId(),
                                            'username' => $user->getUsername(),
                                            'name' => $user->getName(),
                                            'lastname' => $user->getLastname(),
                                            'avatar' => $user->getAvatar(),
                                            'cover' => $user->getCover(),
                                            'miniResume' => $user->getMiniResume(),
                                            'jobTitle' => $user->getJobTitle(),
                                            'company' => $user->getCompany(),
                                            'status' => 3,
                                            'date' => $time
                                        )
                                ) // Status = 2 : Waiting to be validated
                                ->field("inTouchCounter")->inc(1)
                                ->field('alertsNotifications')->inc(1)
                                ->field('alerts')->push(array('$each' => array(array(
                                            'id' => $user->getId() . time(),
                                            'type' => 1,
                                            'read' => false,
                                            'action' => 'now connected with you.',
                                            'username' => $user->getUsername(),
                                            'name' => $user->getName(),
                                            'lastname' => $user->getLastname(),
                                            'avatar' => $user->getAvatar(),
                                            'date' => time() * 1000
                                        )), '$slice' => -90))
                                ->field('updateDate')->set($time)
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        $dm->createQueryBuilder('DataBaseBundle:User')
                                ->update()
                                ->multiple(false)
                                ->field('_id')->equals($user->getId())
                                ->field('inTouch')->addToSet(
                                        array(
                                            'id' => $secondUser->getId(),
                                            'username' => $secondUser->getUsername(),
                                            'name' => $secondUser->getName(),
                                            'lastname' => $secondUser->getLastname(),
                                            'avatar' => $secondUser->getAvatar(),
                                            'cover' => $secondUser->getCover(),
                                            'miniResume' => $secondUser->getMiniResume(),
                                            'jobTitle' => $secondUser->getJobTitle(),
                                            'company' => $secondUser->getCompany(),
                                            'status' => 3,
                                            'date' => $time
                                        )
                                ) // Status = 2 : Waiting to be validated
                                ->field("inTouchCounter")->inc(1)
                                ->field('updateDate')->set($time)
                                ->upsert(false)
                                ->getQuery()
                                ->execute();

                        $dm->flush();
                        $dm->clear();
                    }

                    if ($this->get('kernel')->getEnvironment() == 'prod') {
                        $send_grid_options = array(
                            'sub' => array(':role' => array($user->jobTitle), ':sender_name' => array($user->name . " " . $user->lastname), ':company' => array($user->company), ':token' => array($user->getId()), ':sender_img' => array($userProfileUrl)),
                            'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('sendgrid_invitation_template_id'))))
                        );
                        $params = array(
                            'to' => $email,
                            'from' => "noreply@mobintouch.com",
                            'fromname' => $user->name . " " . $user->lastname,
                            'subject' => "Join me on mobintouch.com",
                            'html' => " ",
                            'x-smtpapi' => json_encode($send_grid_options),
                        );
                        $this->sendgrid_mail($params);
                    }
                }
            }
        }

        return new JsonResponse(
                array(
            'count' => isset($e) ? count($e) : count($emails)
                )
        );
    }

    public function getSenderNameEmailAction(Request $request) {
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            return new JsonResponse(array("name" => $user->name . " " . $user->lastname, "email" => $user->email, "role" => $user->jobTitle, "company" => $user->company));
        }
        return new JsonResponse();
    }

    public function getContactsByNameAction(Request $request, $provider = '', $limit = 10, $offset = 0, $name = '') {
//$exists_contacts = unserialize($request->get('exists_contacts'));
        $user = $this->getCurrentUser();
        if (!$user instanceof User) {
            throw new NotFoundHttpException();     // 404
        } else {
            $token = unserialize($request->get('token'));
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $contacts = array_values($dm->createQueryBuilder('DataBaseBundle:Invitation')
                            ->field("userID")->equals($user->getId())
                            ->field("provider")->equals($provider)
                            ->field("createdDate")->in($token)
                            ->where("(this.firstname.toLowerCase() + ' ' + this.lastname.toLowerCase() + ' ' + this.email + ' ' + this.company).match('" . strtolower($name) . "'.replace(' ', '( .*)? '))")
                            ->limit($limit)
                            ->skip($limit * $offset)
                            ->sort('_id', 1)
                            ->getQuery()
                            ->execute()
                            ->toArray());


            $arrEmails = array();
            $emails = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('email')
                    ->getQuery()
                    ->execute()
                    ->toArray();

            foreach ($emails as $email) {
                if (isset($email['email'])) {
                    $arrEmails[] = $email['email'];
                }
            }

            $elem = '';
            $count = $limit * $offset + 1;
            foreach ($contacts as $contact) {
                $class = $request->get('selected_contacts') != null && in_array($contact->email, $request->get('selected_contacts')) ? "reg_conts_clicked" : "reg_conts";
                $elem .= '<div class="adi_contact ' . $class . ' adi_selectable adi_contact_' . $count++ . '" tip="' . trim(utf8_encode($contact->firstname) . ' ' . utf8_encode($contact->lastname)) . '" rel="' . $contact->email . ':-:' . trim(utf8_encode($contact->firstname) . ' ' . utf8_encode($contact->lastname)) . '">';
                $elem .= '<p class="adi_name">' . utf8_encode($contact->firstname) . ' ' . utf8_encode($contact->lastname) . '</p>';
                $elem .= '<p class="adi_id">' . $contact->email . '</p>';
                if ($contact->company) {
                    $elem .= '<p class="adi_company">' . isset($contact->company) && $contact->company != "null" ? $contact->company : '' . '</p>';
                }
                if (in_array($contact->email, $arrEmails)) {
                    $elem .= '<p class="already">already on mobintouch</p>';
                }
                $elem .= '</div>';
            }
            return new JsonResponse(array("contacts" => $elem));
        }
        return new JsonResponse();
    }

    public function sendgrid_mail($params) {
// Generate curl request
        $curl = curl_init($this->container->getParameter('sendgrid_mail_request'));
// Tell PHP not to use SSLv3 (instead opting for TLS)
//curl_setopt($curl, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1_2);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $this->container->getParameter('sendgrid_secret_key')));
// Tell curl to use HTTP POST
        curl_setopt($curl, CURLOPT_POST, true);
// Tell curl that this is the body of the POST
        curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
// Tell curl not to return headers, but do return the response
        curl_setopt($curl, CURLOPT_HEADER, true);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
//Turn off SSL
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); //New line
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); //New line
// obtain response
        $response = curl_exec($curl);
        curl_close($curl);
        return $response;
    }

    private function send_push_notification($heading, $content, $players, $url) {
        /*
          $post_params = [
          'app_id' => $this->container->getParameter('onesignal_app_id'),
          'headings' => [
          'en' => $heading
          ],
          'contents' => [
          'en' => $content
          ],
          'isAnyWeb' => true,
          'include_player_ids' => $players,
          'url' => $url
          ];

          $curl = curl_init();
          curl_setopt_array($curl, array(
          CURLOPT_URL => $this->container->getParameter('onesignal_notification_url'),
          CURLOPT_RETURNTRANSFER => true,
          CURLOPT_ENCODING => "",
          CURLOPT_MAXREDIRS => 10,
          CURLOPT_TIMEOUT => 30,
          CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
          CURLOPT_CUSTOMREQUEST => "POST",
          CURLOPT_POSTFIELDS => http_build_query($post_params),
          CURLOPT_HTTPHEADER => array(
          "cache-control: no-cache"
          ),
          ));

          $response = curl_exec($curl);
          $err = curl_error($curl);
          curl_close($curl);
         */

        $heading = array(
            "en" => $heading != null ? $heading : 'Mobintouch'
        );

        $content = array(
            "en" => $content
        );

        $fields = json_encode(array(
            'app_id' => $this->container->getParameter('onesignal_app_id'),
            'headings' => $heading,
            'contents' => $content,
            'include_player_ids' => $players,
            'url' => $url
        ));

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->container->getParameter('onesignal_notification_url'));
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($ch, CURLOPT_HEADER, FALSE);
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

        $response = curl_exec($ch);
        curl_close($ch);

        return $response;
    }

    private function json_clean_decode($json, $assoc = false, $depth = 512, $options = 0) {
// search and remove comments like /* */ and //
        $json = preg_replace("#(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|([\s\t]//.*)|(^//.*)#", '', $json);

        if (version_compare(phpversion(), '5.4.0', '>=')) {
            $json = json_decode($json, $assoc, $depth, $options);
        } elseif (version_compare(phpversion(), '5.3.0', '>=')) {
            $json = json_decode($json, $assoc, $depth);
        } else {
            $json = json_decode($json, $assoc);
        }

        return $json;
    }

    //Controller Private Helper functions
    private function getCurrentUser() {

// $user = $this->container->get('security.context')->getToken()->getUser();
        if (null === $token = $this->get('security.context')->getToken()) {
            return null;
        }

        if (!is_object($user = $token->getUser())) {
            return null;
        }

        $userConnected = array();
        $userConnectedIds = array();
        //Already sent connection request // status : 1
        $userRequestedIds = array();
        //Received connection request // status : 2
        $userRequestIds = array();

        $userConnections = $user->getInTouch() ? $user->getInTouch() : array();
        foreach ($userConnections as $uConnection) {
            if ($uConnection['status'] == 1) {
                $userRequestedIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 2) {
                $userRequestIds[] = $uConnection['id'];
            } else if ($uConnection['status'] == 3) {
                $userConnectedIds[] = $uConnection['id'];
            }
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');

        if (isset($_GET['mutualconnections']) && ($_GET['mutualconnections'] == 'inTouch' || $_GET['mutualconnections'] == 'whoVisitedMe' || $_GET['mutualconnections'] == 'iVisited')) {
            $element = $_GET['mutualconnections'];
            $arrElement = array();
            if ($user->$element) {
                $mMC = new ManageMutualConnections($dm);
                foreach ($user->$element as $key => $value) {
                    $arrMutualConnection = $mMC->getMutualConnections($user, $value, false);
                    $value['mutualConnections'] = $arrMutualConnection;
                    $value['isConnected'] = $user ? in_array($value['id'], $userConnectedIds) : false; //check user is connected with loggedin user
                    $value['isRequested'] = $user ? in_array($value['id'], $userRequestedIds) : false; //check user already got connection request
                    $value['isRequest'] = $user ? in_array($value['id'], $userRequestIds) : false; // check user has already sent connection request
                    $arrElement[] = $value;
                }
                $user->$element = $arrElement;
            }
        }


        $secConnections = $dm->createQueryBuilder('DataBaseBundle:User')
                ->field('validated')->equals(true)
                ->field('id')->notEqual($user->getId())
                ->field('id')->notIn($userConnectedIds)
                ->field('inTouch')->elemMatch(array('status' => 3, 'id' => array('$in' => $userConnectedIds)))
                ->getQuery()
                ->execute()
                ->count();

        $user->connections = count($userConnectedIds);
        $user->secConnections = $secConnections;

        return $user;
    }

    //Update user profile percentage
    private function updateProfilePercentage($user = '') {

        if (empty($user)) {
            $user = $this->getCurrentUser();
        }
        $percentage = 0;
        $intouchPoints = 0;
        $sessionPoints = 0;
        $touchmailPoints = 0;
        $points = 0;
        $oldProfilePoints = $user->getProfilePoints() ? $user->getProfilePoints() : 0;
        if ($user->companyType == "Advertiser") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
//$test=$this->container->getParameter('user_profile_buy_raffic');
                $percentage+=$this->container->getParameter('user_profile_basic');
            }

            /* Buying Box */
            if ($user->buyTraffic) {
                $percentage+=$this->container->getParameter('user_profile_buy');
            }
            /* Selling Box */
            if ($user->sellTraffic) {
                $percentage+=$this->container->getParameter('user_profile_sell');
            }
            /* Tracking Solutions */
            if ($user->trackingServices) {
                if (array_search(true, $user->trackingServices)) {
                    $percentage+=$this->container->getParameter('user_profile_trafic');
                }
            }


            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (isset($user->paymentTerms[0]) && isset($user->paymentMethods[0])) {
                    /* $paymentTerms=json_decode(json_encode(paymentTerms[0]));
                      $paymentMethods=json_decode(json_encode(paymentMethods[0])); */
                    if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                        $percentage+=$this->container->getParameter('user_profile_payment');
                    }
                }
            }
            /* IOS apps  */
            if ($user->iosApps) {
                $percentage+=$this->container->getParameter('user_profile_iosApps');
            }


            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_profile_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_profile_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_profile_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_profile_languages');
            }
        } else if ($user->companyType == "TrafficSupplier") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
//$test=$this->container->getParameter('user_profile_buy_raffic');
                $percentage+=$this->container->getParameter('user_media_basic');
            }

            /* Buying Box */
            if ($user->buyTraffic) {
                $percentage+=$this->container->getParameter('user_media_buy');
            }
            /* Selling Box */
            if ($user->sellTraffic) {
                $percentage+=$this->container->getParameter('user_media_sell');
            }
            /* Tracking Solutions */
            if ($user->trackingServices) {
                if (array_search(true, $user->trackingServices)) {
                    $percentage+=$this->container->getParameter('user_media_trafic');
                }
            }


            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (isset($user->paymentTerms[0]) && isset($user->paymentMethods[0])) {
                    /* $paymentTerms=json_decode(json_encode(paymentTerms[0]));
                      $paymentMethods=json_decode(json_encode(paymentMethods[0])); */
                    if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                        $percentage+=$this->container->getParameter('user_media_payment');
                    }
                }
            }
            /* IOS apps  */
            if ($user->iosApps) {
                $percentage+=$this->container->getParameter('user_media_iosApps');
            }


            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_media_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_media_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_media_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_media_languages');
            }
        } else if ($user->companyType == "ProductsServices") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                $percentage+=$this->container->getParameter('user_product_basic');
            }
            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                    $percentage+=$this->container->getParameter('user_product_payment');
                }
            }
            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_product_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_product_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_product_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_product_languages');
            }
        } else if ($user->companyType == "Visitor") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                $percentage+=$this->container->getParameter('visitor_profile_basic');
            }
            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('visitor_profile_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('visitor_profile_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('visitor_profile_skill');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('visitor_profile_languages');
            }
        }
        if ($user->username != 'dapreyao' && $user->username != 'guillaumegabriel') {
            $date = time();
            if (date('l', $date) == "Sunday") {
                $date = $date - 86400;
            }
            $start_day_week = strtotime("last week monday", $date);
            $end_day_week = strtotime("last week sunday", $date);

            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            /* $usersActivityData = $dm->getRepository('DataBaseBundle:UsersActivity')
              ->findBy(array('username' => $user->username, "session" => 1)); */
            $usersActivityData = [];
            $q = $dm->createQueryBuilder('DataBaseBundle:UsersActivity');
            $q = $q->sort('_id', -1)
//->limit(30)
                    ->field('username')->equals($user->username)
                    ->field('session')->equals(1)
                    ->field('updatedTime')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
//$count=1;
            foreach ($q as $o) {
                $usersActivityData[] = $o;
            }
            $intouchMailData = [];
            $q = $dm->createQueryBuilder('DataBaseBundle:Mail');
            $q = $q->sort('_id', -1)
//->limit(30)
                    ->field('fromID')->equals($user->getId())
                    ->field('date')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
//$count=1;
            foreach ($q as $o) {
                $intouchMailData[] = $o;
            }
            $q = $dm->createQueryBuilder('DataBaseBundle:Mail');
            $q = $q->sort('_id', -1)
//->limit(30)
                    ->field('toID')->equals($user->getId())
                    ->field('date')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
//$count=1;
            foreach ($q as $o) {
                $intouchMailData[] = $o;
            }
            $sessionPoints = count($usersActivityData) * 5;

            $intouchPoints = count($user->inTouch);
            $touchmailPoints = 3 * count($intouchMailData);
            $points = 2 * $percentage;
            $points = $points + $intouchPoints + $touchmailPoints + $sessionPoints;
        }

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('profilePercentage')->set($percentage)
                ->field('profilePoints')->set($points)
                ->upsert(true)
                ->getQuery()
                ->execute();
        $dm->flush();
        $dm->clear();
        if ($percentage >= 100 && $oldProfilePoints < 100) {
            $dm->createQueryBuilder('DataBaseBundle:User')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

// Update found Campaign
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $user->getId() . time(),
                                'type' => 12, //offer details
                                'read' => false,
                                'action' => 'Wel done!Your profile is 100% completed. Members can discover your profile easily now.  ',
                                'username' => "",
                                'name' => "",
                                'lastname' => "",
                                'avatar' => "",
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())

// Options
                    ->upsert(true)
                    ->getQuery()
                    ->execute();

            $dm->flush();
            $dm->clear(); // Detaches all objects from Doctrine!           
        }
        return ["percentage" => $percentage, "points" => $user->username];
    }

    //Update company Profile percentage
    private function countCompanyPercentage($user = '') {
        if (empty($user)) {
            $user = $this->getCurrentUser();
        }
        $percentage = 0;

        $points = 0;
        $total = 0;
        $followerTotal = 0;
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        if (isset($user->companyPage['employee']['company'])) {
            $company = $dm->createQueryBuilder('DataBaseBundle:Company')->field('username')->equals($user->companyPage['employee']['company'])->getQuery()->getSingleResult();
        } else {
            $company = $dm->createQueryBuilder('DataBaseBundle:Company')->field('employees.id')->equals($user->getId())->getQuery()->getSingleResult();
        }

        /* $company = $dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('username')->equals($user->companyPage['employee']['company'])
          ->getQuery()
          ->getSingleResult(); */

        if ($company) {
            $date = time();
            if (date('l', $date) == "Sunday") {
                $date = $date - 86400;
            }
            $start_day_week = strtotime("-30 days", $date);
            $end_day_week = strtotime("-1 days", $date);
            if ($company->companyType == "Advertiser") {
//$percentage+=$this->container->getParameter('company_ad_type');
                if ($company->username) {


                    $q1 = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('companyUsername')->equals($company->username)
                            ->field('type')->equals(5)
                            ->field('isLike')->equals(false)
                            ->field('date')->range($start_day_week, $end_day_week)
                            ->sort('_id', -1)
                            ->hydrate(false)
                            ->getQuery()
                            ->execute();
                    $post = array();
                    foreach ($q1 as $f) {
                        $post[] = $f;
                    }
                    $total = count($post);
                    if ($total > 0) {
                        $percentage+=$this->container->getParameter('company_ad_posts');
                    }
                }
                if ($company->companyType) {
                    $percentage+=$this->container->getParameter('company_ad_type');
                }if ($company->avatar) {
                    $percentage+=$this->container->getParameter('comapny_ad_avatar');
                }if ($company->size) {
                    $percentage+=$this->container->getParameter('company_ad_size');
                }if ($company->foundedin) {
                    $percentage+=$this->container->getParameter('company_ad_foundedin');
                }if ($company->founders) {
                    $percentage+=$this->container->getParameter('company_ad_founders');
                }if ($company->description) {
                    $percentage+=$this->container->getParameter('company_ad_description');
                }if ($company->website) {
                    $percentage+=$this->container->getParameter('company_ad_website');
                }if ($company->twitter) {
                    $percentage+=$this->container->getParameter('company_ad_twitter');
                }if ($company->linkedIn) {
                    $percentage+=$this->container->getParameter('company_ad_linkedin');
                }if ($company->instagram) {
                    $percentage+=$this->container->getParameter('company_ad_instagram');
                }
            } else {
                if ($company->username) {
                    $q1 = $dm->createQueryBuilder('DataBaseBundle:Update')
                            ->field('companyUsername')->equals($company->username)
                            ->field('type')->equals(5)
                            ->field('isLike')->equals(false)
                            ->field('date')->range($start_day_week, $end_day_week)
                            ->sort('_id', -1)
                            ->hydrate(false)
                            ->getQuery()
                            ->execute();
                    $post = array();
                    foreach ($q1 as $f) {
                        $post[] = $f;
                    }
                    $total = count($post);
                    if ($total > 0) {
                        $percentage+=$this->container->getParameter('company_posts');
                    }
                }
                if ($company->companyType) {
                    $percentage+=$this->container->getParameter('company_type');
                }if ($company->companySubType) {
                    $percentage+=$this->container->getParameter('company_subtype');
                }if ($company->avatar) {
                    $percentage+=$this->container->getParameter('comapny_avatar');
                }if ($company->size) {
                    $percentage+=$this->container->getParameter('company_size');
                }if ($company->foundedin) {
                    $percentage+=$this->container->getParameter('company_foundedin');
                }if ($company->founders) {
                    $percentage+=$this->container->getParameter('company_founders');
                }if ($company->description) {
                    $percentage+=$this->container->getParameter('company_description');
                }if ($company->website) {
                    $percentage+=$this->container->getParameter('company_website');
                }if ($company->twitter) {
                    $percentage+=$this->container->getParameter('company_twitter');
                }if ($company->linkedIn) {
                    $percentage+=$this->container->getParameter('company_linkedin');
                }if ($company->instagram) {
                    $percentage+=$this->container->getParameter('company_instagram');
                }
            }
        }

        if ($company) {
            $points = 0.6 * $percentage;
            $points = $points + ($total * 10);
            if ($company->followers) {
                $points = $points + (2 * count($company->followers));
            }

//	$points=$points+count($compamy->followers);

            $companypercentages = $dm->createQueryBuilder('DataBaseBundle:Company')
// Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('username')->equals($company->username)
                    ->field('companyPercentage')->set($percentage)
                    ->field('companyPoints')->set($points)
                    ->upsert(true)
                    ->getQuery()
                    ->execute();
            $dm->persist($company);
            $dm->flush();
            $dm->clear();
        }

        return ["percentage" => $percentage, "points" => $points];
    }

    
    
    public function updateAvatarImageAction(){
    //return ['a'=> 'sfs'];		
		//$profileAvatarCopyPath = '/../../web/src/cdn/img/profile/avatars/';
		//$companyAvatarCopyPath = '/../../web/src/cdn/img/company/avatars/';

		
		// exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '200x>' -quality 60 " . getcwd() . $copypath . $ogFilename);
		
        
                //Initial settings, Just specify Source and Destination Image folder.
$ImagesDirectory    = 'H:/wamp/www/mobntouch/src/cdn/img/profile/avatars'; //Source Image Directory End with Slash
$DestImagesDirectory    = 'H:/wamp/www/mobntouch/src/cdn/img/profile/avatars/new';//Destination Image Directory End with Slash
//$DestImagesDirectory    = getcwd().'/../../web/src/cdn/img/profile/avatars/';//Destination Image Directory End with Slash
$NewImageWidth      = 200; //New Width of Image
$NewImageHeight     = 200; // New Height of Image
$Quality        = 60; //Image Quality
//echo $ImagesDirectory;
$d = @dir($ImagesDirectory) or die('Failed opening directory for reading');
//Open Source Image directory, loop through each Image and resize it.
$a=[];
if($dir = $d){
    while(($file = @$d->read())!== false){
        
        $imagePath = $ImagesDirectory.'/'.$file;
       // $destPath = $DestImagesDirectory.'/'.$file;
        if(substr($imagePath, -1) != '.'){
            
//echo $ImagesDirectory.$file."</br>";
       // echo $file;
        $imgname =   substr($file,0 ,strrpos( $file, '.'));
        $ext =   substr($file,strrpos( $file, '.'));
        $img =   substr($file,0 ,strrpos( $file, '-'));
        $newimg =  $img.'-og'.$ext;
         $destPath = $DestImagesDirectory.'/'.$newimg;
        //die;
        $checkValidImage = getimagesize($imagePath);

        if(file_exists($imagePath) && $checkValidImage) //Continue only if 2 given parameters are true
        {
           
            //Image looks valid, resize.
            if($this->resizeImage($imagePath,$destPath,$NewImageWidth,$NewImageHeight,$Quality))
            {
                $a[] = $file.' resize Success!<br />';
                /*
                Now Image is resized, may be save information in database?
                */

            }else{
                $a[] =  $file.' resize Failed!<br />';
            }
        }
        }
    }
    $d->close();
}
        
        
	            return new JsonResponse(['a'=> $a]);
	
		
	}
    
        
      private function resizeImage($SrcImage,$DestImage, $MaxWidth,$MaxHeight,$Quality)
{
    list($iWidth,$iHeight,$type)    = getimagesize($SrcImage);
    $ImageScale             = min($MaxWidth/$iWidth, $MaxHeight/$iHeight);
    $NewWidth               = ceil($ImageScale*$iWidth);
    $NewHeight              = ceil($ImageScale*$iHeight);
    $NewCanves              = imagecreatetruecolor($NewWidth, $NewHeight);

    switch(strtolower(image_type_to_mime_type($type)))
    {
        case 'image/jpeg':
            $NewImage = imagecreatefromjpeg($SrcImage);
            break;
        case 'image/png':
            $NewImage = imagecreatefrompng($SrcImage);
            break;
        case 'image/gif':
            $NewImage = imagecreatefromgif($SrcImage);
            break;
        default:
            return false;
    }

    // Resize Image
    if(imagecopyresampled($NewCanves, $NewImage,0, 0, 0, 0, $NewWidth, $NewHeight, $iWidth, $iHeight))
    {
        // copy file
        if(imagejpeg($NewCanves,$DestImage,$Quality))
        {
            imagedestroy($NewCanves);
            return true;
        }
    }
} 
        
    private function array_column(array $input, $columnKey, $indexKey = null) {
        $array = array();
        foreach ($input as $value) {
            if (!array_key_exists($columnKey, $value)) {
                trigger_error("Key \"$columnKey\" does not exist in array");
                return false;
            }
            if (is_null($indexKey)) {
                $array[] = $value[$columnKey];
            } else {
                if (!array_key_exists($indexKey, $value)) {
                    trigger_error("Key \"$indexKey\" does not exist in array");
                    return false;
                }
                if (!is_scalar($value[$indexKey])) {
                    trigger_error("Key \"$indexKey\" does not contain scalar value");
                    return false;
                }
                $array[$value[$indexKey]] = $value[$columnKey];
            }
        }
        return $array;
    }

    private function filterKeywords($user) {
        if (is_array($user)) {
            $arrUserKeywords = array($user['name'], $user['lastname'], $user['jobTitle']);
            if (isset($user['company'])) {
                $arrUserKeywords[] = $user['company'];
            }
            if (isset($user['city'])) {
                $arrUserKeywords[] = $user['city'];
            }
            return array_values(array_udiff($user['keywords'], $arrUserKeywords, 'strcasecmp'));
        }
    }

    public function testAction(Request $request) {
        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        if (isset($_GET['token'])) {
            $user = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('username')->equals($_GET['token'])
                    ->getQuery()
                    ->getSingleResult();
            $token = $this->get('lexik_jwt_authentication.jwt_manager')->create($user);
            return new JsonResponse($token);
        }

        $welcomelink = 'https://www-dev.mobintouch.com';
        /* $send_grid_options = array(
          'sub' => array(':first_name' => array('Company'), ':logo_name_link' => array($welcomelink), ':welcome_link' => array($welcomelink)),
          'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => $this->container->getParameter('template_welcome_id'))))
          );
          $params = array(
          'to' => 'companytest1206@gmail.com',
          'from' => "noreply@mobintouch.com",
          'fromname' => "Mobintouch",
          'subject' => 'Welcome to Mobintouch',
          'html' => " ",
          'x-smtpapi' => json_encode($send_grid_options),
          ); */

        $params = array(
            'personalizations' => array(
                array(
                    'to' => array(
                        array('email' => 'karim@mobintouch.com')
                    ),
                    'substitutions' =>
                    array(
                        ':sender_truncated_200char_answer' => 'This is a ans',
                        ':sender_first_name' => 'test',
                        ':question_title' => 'testing'
                    )
                ),
            ),
            'from' => array(
                'email' => "noreply@mobintouch.com"
            ),
            'subject' => "Test sent you a new answer",
            'content' => array(array(
                    'type' => 'text/html',
                    'value' => ' '
                )
            ),
            'custom_args' => array(
                ':sender_truncated_200char_answer' => 'This is a ans',
            ),
            'template_id' => $this->container->getParameter('template_new_ans_to_question_id'),
            'asm' => array(
                'group_id' => $this->container->getParameter('group_invite')
            )
        );

        //echo "<pre>";
        //echo json_encode($params);
        //die;
        $result = Utility::sendgrid_mail(json_encode($params));

        echo "<pre>";
        var_dump($result);
        die;

        /* $send_grid_options = array(
          'sub' => array(':first_name' => array('Coldfin'), ':logo_name_link' => array('https://www-dev.mobintouch.com'), ':welcome_link' => array('https://www-dev.mobintouch.com')),
          'filters' => array('templates' => array('settings' => array('enable' => 1, 'template_id' => 'd53196b6-b079-46a2-a741-f9a5302e5a89')))
          );
          $params = array(
          'to' => 'companytest1206@gmail.com',
          'from' => "noreply@mobintouch.com",
          'fromname' => "Mobintouch",
          'subject' => 'Test, welcome to Mobintouch',
          'html' => "<h1>Welcome mail test html</h1>",
          'x-smtpapi' => json_encode($send_grid_options),
          );
          $this->sendgrid_mail($params); */

        die;

        $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('email' => 'vedtest2@gmail.com'));

        switch ($this->get('kernel')->getEnvironment()) {
            case 'dev':
                $baseLink = 'http://angular.dev';
                break;
            case 'test':
                $baseLink = 'http://angular.dev';
                break;
            case 'adhoc':
                $baseLink = 'https://www-dev.mobintouch.com';
                break;
            case 'prod':
                $baseLink = 'https://www.mobintouch.com';
                break;
            default:
                $baseLink = 'https://www.mobintouch.com';
                break;
        }

        $link = $baseLink . "/edit/profile";

        return $this->render('APIBundle:Mail:completeprofile.html.twig', array('title' => 'Get visibility!', 'user' => $user, 'link' => $link, 'unsubcribe' => 1));
        die;

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        $job = $dm->getRepository('DataBaseBundle:Jobs')->findOneBy(array('id' => '58e75b0744b688881300002e'));

        $users = $dm->createQueryBuilder('DataBaseBundle:User')
                ->hydrate(false)
                ->select('username', 'email', 'avatar', 'inTouchCounter', 'inBusinessRelationCounter', 'jobTitle', 'company')
                ->field('jobFilters.search')->in($job->search)
                ->field('id')->notEqual($job->getCreatedBy()['id'])
                ->getQuery()
                ->execute();

        print_r($users->toArray());
        die;

        $dm = $this->get('doctrine_mongodb.odm.document_manager');
        if (isset($_GET['checmutualconnection'])) {
            $firstUserName = $request->request->get('firstusername');
            $secondUserName = $request->request->get('secondusername');
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $firstUser = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $firstUserName));
            $secondUser = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $secondUserName));

            $mMc = new ManageMutualConnections($dm);
            //$mutualArray = $mMc->getMutualConnections($firstUser, $secondUser);
            $result = $mMc->checkIsIntouch($firstUser, $secondUser);
            return new JsonResponse(array("mutual_connections" => $result));
        } elseif (isset($_GET['updateconnections'])) {
            $username = $request->request->get('username');
            $dm = $this->get('doctrine_mongodb.odm.document_manager');
            $user = $dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username));

            if (!$user) {
                return new JsonResponse('User not found!');
            }

            $connections = $user->getInTouch();
            $arrConnections = array();
            $arrUserIds = array();
            foreach ($connections as $connection) {
                if ($connection['status'] == 1) {
                    $arrUserIds[] = $connection['id'];
                    $connection['status'] = 3;
                }
                $arrConnections[] = $connection;
            }

            $user->setInTouch($arrConnections);

            $dm->createQueryBuilder('DataBaseBundle:User')
                    // Find the Campaign
                    ->update()
                    ->multiple(true)
                    ->field('_id')->in($arrUserIds)
                    ->field('inTouch.status')->equals(2)

                    // Update found Campaign
                    ->field("inTouch.$.status")->set(3)
                    ->field("inTouch.$.date")->set(time())
                    ->field('updateDate')->set(time())
                    // Options
                    ->upsert(false)
                    ->getQuery()
                    ->execute();
            $dm->flush();
            $dm->clear();

            return new JsonResponse('User connections updated successfully.!');
        } else if (isset($_GET['connectionssuggestions'])) {
            ini_set('memory_limit', '1024M');

            $user = $this->getUser();

            $mMC = new ManageMutualConnections($dm);
            $arrPeopleYouMayKnow = array();


            $connections = array_filter($user->getInTouch(), function($v) {
                return $v['status'] == 3;
            });

            $arrConnectedUsers = $this->array_column($connections, 'id');
            //$arrConnectedUsers[] = $user->getId();
            //$arrConnections = array();


            $users = $dm->createQueryBuilder('DataBaseBundle:User')
                    ->field('inTouch.id')->in($arrConnectedUsers)
                    ->field('inTouch.id')->notEqual($user->getId())
                    ->getQuery()
                    ->execute();


            foreach ($users as $u) {
                if ($u->getInTouch() && count($u->getInTouch()) && !in_array($u->getId(), $arrConnectedUsers) && $u->getId() != $user->getId()) {


                    /* $q = $dm->createQueryBuilder('DataBaseBundle:User');
                      $q->field('inTouch.id')->equals($u->getId());
                      $q->addAnd(
                      $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'id' => $u->getId()))
                      );
                      $mutualConnections = $q->getQuery()->execute()->count(); */



                    $mutualConnection = array_filter($u->getInTouch(), function($v) use ($arrConnectedUsers) {
                        return $v['status'] == 3 && in_array($v['id'], $arrConnectedUsers);
                    });


                    /* $mutualConnection = $mMC->getMutualConnections($user, $u, false); */



                    if ($mutualConnection) {
                        $arrPeopleYouMayKnow[] = array(
                            'id' => $u->getId(),
                            'username' => $u->getUsername(),
                            'name' => $u->getName(),
                            'lastname' => $u->getLastname(),
                            'avatar' => $u->getAvatar(),
                            'cover' => $u->getCover(),
                            'jobTitle' => $u->getJobTitle(),
                            'company' => $u->getCompany(),
                            'miniResume' => $u->getMiniResume(),
                            'noOfMutualConnections' => count($mutualConnection),
                            'mutualConnections' => array_values($mutualConnection)
                        );
                    }
                }
            }

            //Array With Mutual Connections Objects
            /* foreach ($connections as $c) {
              $u = $dm->getRepository('DataBaseBundle:User')->find($c['id']);
              //$arrConnections = array_merge($arrConnections, $u->getInTouch());

              foreach ($u->getinTouch() as $con) {
              if (!in_array($con['id'], $arrConnectedUsers)) {

              $cu = $dm->getRepository('DataBaseBundle:User')->find($con['id']);
              if ($cu) {
              $mutualConnection = $mMC->getMutualConnections($user, array('id' => $con['id']), false);
              if ($mutualConnection) {
              $arrPeopleYouMayKnow[] = array(
              'id' => $u->getId(),
              'username' => $u->getUsername(),
              'name' => $u->getName(),
              'lastname' => $u->getLastname(),
              'avatar' => $u->getAvatar(),
              'cover' => $u->getCover(),
              'jobTitle' => $u->getJobTitle(),
              'company' => $u->getCompany(),
              'miniResume' => $u->getMiniResume(),
              'noOfMutualConnections' => count($mutualConnection),
              'mutualConnections' => $mutualConnection
              );
              }
              }
              $arrConnectedUsers[] = $con['id'];
              }
              }
              } */

            //Array without mutual connections object
            /* foreach ($connections as $c) {
              $u = $dm->getRepository('DataBaseBundle:User')->find($c['id']);
              //$arrConnections = array_merge($arrConnections, $u->getInTouch());

              foreach ($u->getinTouch() as $con) {
              if (!in_array($con['id'], $arrConnectedUsers)) {

              $cu = $dm->getRepository('DataBaseBundle:User')->find($con['id']);
              if ($cu) {


              $q = $dm->createQueryBuilder('DataBaseBundle:User')->hydrate(false)->select('username', 'name', 'lastname', 'email', 'avatar', 'company', 'jobTitle');
              $q->field('inTouch')->elemMatch(array('status' => 3, 'id' => $user->getId()));
              $q->addAnd(
              $q->expr()->field('inTouch')->elemMatch(array('status' => 3, 'id' => $con['id']))
              );
              $mutualConnection = $q->getQuery()->execute()->count();


              //$mutualConnection = $mMC->getMutualConnections($user, array('id' => $con['id']), false);
              if ($mutualConnection) {
              $arrPeopleYouMayKnow[] = array(
              'id' => $u->getId(),
              'username' => $u->getUsername(),
              'name' => $u->getName(),
              'lastname' => $u->getLastname(),
              'avatar' => $u->getAvatar(),
              'cover' => $u->getCover(),
              'jobTitle' => $u->getJobTitle(),
              'company' => $u->getCompany(),
              'miniResume' => $u->getMiniResume(),
              'noOfMutualConnections' => $mutualConnection,
              );
              }
              }
              $arrConnectedUsers[] = $con['id'];
              }
              }
              } */

            //First script taking too much time
            /* $arrPeoples = array_diff(array_unique($this->array_column($arrConnections, 'id')), $arrConnectedUsers);
              foreach ($arrPeoples as $p) {
              $u = $dm->getRepository('DataBaseBundle:User')->find($p);
              if ($u) {
              $mutualConnection = $mMC->getMutualConnections($user, $u);
              $arrPeopleYouMayKnow[] = array(
              'id' => $u->getId(),
              'username' => $u->getUsername(),
              'name' => $u->getName(),
              'lastname' => $u->getLastname(),
              'avatar' => $u->getAvatar(),
              'cover' => $u->getCover(),
              'jobTitle' => $u->getJobTitle(),
              'company' => $u->getCompany(),
              'miniResume' => $u->getMiniResume(),
              'noOfMutualConnections' => count($mutualConnection),
              'mutualConnections' => $mutualConnection
              );
              }
              } */


            usort($arrPeopleYouMayKnow, function($a, $b) {
                return $b['noOfMutualConnections'] - $a['noOfMutualConnections'];
            });

            return new JsonResponse($arrPeopleYouMayKnow);
        }


        return new JsonResponse('Nothing to perform!');
    }

}
