<?php

// This class is generated by jignesh 
// to manage profile avatar compnay avater realted operation
// previouslly all the things are managed by single APIController so it had created many issues

namespace Mobntouch\APIBundle\Classes;

use Mobntouch\DataBaseBundle\Document\User;
use Mobntouch\DataBaseBundle\Document\Company;
use Mobntouch\APIBundle\Classes\Utility;

/**
 * Manage Avatar And Covers this class contains all necessary methods to handle avatar and cover related operations
 *
 * @author Ved Solution
 */
class ManageAvatarAndCover {

    private $dm;
    private $env = 'prod';
    private $profileAvatarCopyPath = '/../../web/src/cdn/img/profile/avatars/';
    private $profileCoverCopyPath = '/../../web/src/cdn/img/profile/covers/';
    private $companyAvatarCopyPath = '/../../web/src/cdn/img/company/avatars/';
    private $companyCoverCopyPath = '/../../web/src/cdn/img/company/covers/';
    private $profileAvatarRealPath = '/img/profile/avatars/';
    private $profileCoverRealPath = '/img/profile/covers/';
    private $companyAvatarRealPath = '/img/company/avatars/';
    private $companyCoverRealPath = '/img/company/covers/';

    function __construct($dm) {
        $this->dm = $dm;
    }

    public function getEnv() {
        return $this->env;
    }

    public function getProfileAvatarCopyPath() {
        return $this->profileAvatarCopyPath;
    }

    public function getProfileCoverCopyPath() {
        return $this->profileCoverCopyPath;
    }

    public function getCompanyAvatarCopyPath() {
        return $this->companyAvatarCopyPath;
    }

    public function getCompanyCoverCopyPath() {
        return $this->companyCoverCopyPath;
    }

    public function getProfileAvatarRealPath() {
        return $this->profileAvatarRealPath;
    }

    public function getProfileCoverRealPath() {
        return $this->profileCoverRealPath;
    }

    public function getCompanyAvatarRealPath() {
        return $this->companyAvatarRealPath;
    }

    public function getCompanyCoverRealPath() {
        return $this->companyCoverRealPath;
    }

    public function setEnv($env) {
        $this->env = $env;
        return $this;
    }

    public function setProfileAvatarCopyPath($profileAvatarCopyPath) {
        $this->profileAvatarCopyPath = $profileAvatarCopyPath;
        return $this;
    }

    public function setProfileCoverCopyPath($profileCoverCopyPath) {
        $this->profileCoverCopyPath = $profileCoverCopyPath;
        return $this;
    }

    public function setCompanyAvatarCopyPath($companyAvatarCopyPath) {
        $this->companyAvatarCopyPath = $companyAvatarCopyPath;
        return $this;
    }

    public function setCompanyCoverCopyPath($companyCoverCopyPath) {
        $this->companyCoverCopyPath = $companyCoverCopyPath;
        return $this;
    }

    public function setProfileAvatarRealPath($profileAvatarRealPath) {
        $this->profileAvatarRealPath = $profileAvatarRealPath;
        return $this;
    }

    public function setProfileCoverRealPath($profileCoverRealPath) {
        $this->profileCoverRealPath = $profileCoverRealPath;
        return $this;
    }

    public function setCompanyAvatarRealPath($companyAvatarRealPath) {
        $this->companyAvatarRealPath = $companyAvatarRealPath;
        return $this;
    }

    public function setCompanyCoverRealPath($companyCoverRealPath) {
        $this->companyCoverRealPath = $companyCoverRealPath;
        return $this;
    }

    public function uploadAvatarOrCover($dataURI, $imageName, $type = 'avatar', $for = 'profile', $convert = true, $by = 'dataURI') {
        $time = time();

        if ($by === 'dataURI') {
            $pos1 = strpos($dataURI, "/");
            $pos2 = strpos($dataURI, ";");
            $extension = substr($dataURI, $pos1 + 1, ($pos2 - $pos1) - 1);
            $dataURI = 'data://' . substr($dataURI, 5);
        } else {
            $extension = pathinfo(parse_url($dataURI)['path'], PATHINFO_EXTENSION);
        }

        if (!$extension || empty($extension)) {
            $extension = 'jpeg';
        }

        $root = getcwd();
        $originalFilename = $imageName . '-original.' . $extension;
        $ogFilename = $imageName . '-og.' . $extension;
        $imageFilename = $imageName . '.' . $extension;
        if ($type === 'avatar') {
            if ($for === 'profile') {
                $copypath = $this->getProfileAvatarCopyPath();
                $realpath = $this->getProfileAvatarRealPath();
            } else if ($for === 'company') {
                $copypath = $this->getCompanyAvatarCopyPath();
                $realpath = $this->getCompanyAvatarRealPath();
            }
        } else if ($type === 'cover') {
            if ($for === 'profile') {
                $copypath = $this->getProfileCoverCopyPath();
                $realpath = $this->getProfileCoverRealPath();
            } else if ($for === 'company') {
                $copypath = $this->getCompanyCoverCopyPath();
                $realpath = $this->getCompanyCoverRealPath();
            }
        }

        $fp = fopen($root . $copypath . $originalFilename, "w");
        fwrite($fp, file_get_contents($dataURI));
        fclose($fp);
        if ($convert == true) {
            if ($type == 'avatar') {
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '160x>' -quality 60 " . getcwd() . $copypath . $imageFilename);
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '200x>' -quality 60 " . getcwd() . $copypath . $ogFilename);
            } else {
                exec('/usr/bin/convert ' . getcwd() . $copypath . $originalFilename . " -resize '1600x>' -quality 60 " . getcwd() . $copypath . $imageFilename);
            }
        } else {
            $fp = fopen($root . $copypath . $imageFilename, "w");
            fwrite($fp, file_get_contents($dataURI));
            fclose($fp);
        }
        return $realpath . $imageFilename . '?' . $time;
    }

    public function removeAvatarOrCover($avatarOrCover, $type = 'avatar', $for = 'profile') {
        try {
            $root = getcwd();
            if ($type === 'avatar') {
                if ($for === 'profile') {
                    $imagePath = $root . $this->getProfileAvatarCopyPath() . explode('?', basename($avatarOrCover))[0];
                } else if ($for === 'company') {
                    $imagePath = $root . $this->getCompanyAvatarCopyPath() . explode('?', basename($avatarOrCover))[0];
                }
            } else if ($type === 'cover') {
                if ($for === 'profile') {
                    $imagePath = $root . $this->getProfileCoverCopyPath() . explode('?', basename($avatarOrCover))[0];
                } else if ($for === 'company') {
                    $imagePath = $root . $this->getCompanyCoverCopyPath() . explode('?', basename($avatarOrCover))[0];
                }
            }

            //unlink image file
            if (isset($imagePath) && file_exists($imagePath) && !is_dir($imagePath)) {
                unlink($imagePath);

                //unlink original image file
                $extension_pos = strrpos($imagePath, '.'); // find position of the last dot, so where the extension starts
                $originalImagePath = substr($imagePath, 0, $extension_pos) . '-original' . substr($imagePath, $extension_pos);
                if (isset($originalImagePath) && file_exists($originalImagePath) && !is_dir($originalImagePath)) {
                    unlink($originalImagePath);
                }
            }
            return true;
        } catch (Exception $exc) {
            return false;
        }
    }

    /*
     * Need to update user profile in each document when user update profile avatar
     * When anyone added new document or new object in any document that contains useravatar please add here
     * Company Document - administrators, employees, followers
     * Mail - senderAvatar, receiverAvatar
     * Offer - userAvatar
     * OfferReply - userAvatar
     * Update - userAvatar, liked[]avatar
     * User - alerts[]avatar,iVisited[],inTouch[]avatar,whoVisitedMe[]avatar
     * UserSearch - avatar
     */

    public function updateAllDocumentsProfileAvatar(User $user) {
        set_time_limit(0);
        if (!$user) {
            return;
        }
        $companyPage = $user->getCompanyPage();
        $avatar = $user->avatar ? $user->avatar : null;
        $usrId = $user->getId();

        if ($companyPage && is_array($companyPage)) {
            //Update company administrator object when user is admin
            if (array_key_exists('administrator', $companyPage)) {
                //Not required
                /* $administrators = $this->dm->createQueryBuilder('DataBaseBundle:Company')
                  ->field('administrators.id')->equals($usrId)
                  ->eagerCursor(true)
                  ->getQuery()
                  ->execute();
                  foreach ($administrators as $u) {
                  foreach ($u->administrators as $key => $field) {
                  if ($field['id'] == $usrId) {
                  $u->administrators[$key]['avatar'] = $user->getAvatar();
                  }
                  }
                  } */
                $this->dm->createQueryBuilder('DataBaseBundle:Company')
                        ->update()
                        ->multiple(true)
                        ->field('administrators.id')->equals($usrId)
                        ->field('administrators.$.avatar')->set($avatar)
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
            }

            //Update company object when user is employee
            if (array_key_exists('employee', $companyPage)) {
                //Not required
                /* $employees = $this->dm->createQueryBuilder('DataBaseBundle:Company')
                  ->field('employees.id')->equals($usrId)
                  ->eagerCursor(true)
                  ->getQuery()
                  ->execute();
                  foreach ($employees as $u) {
                  foreach ($u->employees as $key => $field) {
                  if ($field['id'] == $usrId) {
                  $u->employees[$key]['avatar'] = $user->getAvatar();
                  }
                  }
                  } */
                $this->dm->createQueryBuilder('DataBaseBundle:Company')
                        ->update()
                        ->multiple(true)
                        ->field('employees.id')->equals($usrId)
                        ->field('employees.$.avatar')->set($avatar)
                        ->upsert(false)
                        ->getQuery()
                        ->execute();
            }
        }

        //Update company follower object 
        /* $followers = $this->dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('followers.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($followers as $u) {
          foreach ($u->followers as $key => $field) {
          if ($field['id'] == $usrId) {
          $u->followers[$key]['avatar'] = $user->getAvatar();
          }
          }
          } */
        $this->dm->createQueryBuilder('DataBaseBundle:Company')
                ->update()
                ->multiple(true)
                ->field('followers.id')->equals($usrId)
                ->field('followers.$.avatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();
        $this->dm->flush();
        $this->dm->clear();


        //Update UserSearch document
        $this->dm->createQueryBuilder('DataBaseBundle:UserSearch')
                ->update()
                ->multiple(false)
                ->field('userID')->equals($usrId)
                ->field('avatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Update Mail document
        $this->dm->createQueryBuilder('DataBaseBundle:Mail')
                ->update()
                ->multiple(true)
                ->field('fromID')->equals($usrId)
                ->field('senderAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Update Mail document
        $this->dm->createQueryBuilder('DataBaseBundle:Mail')
                ->update()
                ->multiple(true)
                ->field('toID')->equals($usrId)
                ->field('receiverAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Update Offer document
        $this->dm->createQueryBuilder('DataBaseBundle:Offer')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($usrId)
                ->field('userAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Update OfferReply document
        $this->dm->createQueryBuilder('DataBaseBundle:OfferReply')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($usrId)
                ->field('userAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();


        // WE MUST INVEST TIME TO REFACTOR THIS!!!!!! //this comment is already here who write dont know ask to karim about that
        //Update profile avatar for feeds 
        $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($usrId)
                ->field('userAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //update avatar for intouch feed notifications
        $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(true)
                ->field('inTouchID')->equals($usrId)
                ->field('inTouchAvatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Liked user avatar
        $likes = $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->field('liked.userID')->equals($usrId)
                ->eagerCursor(true)
                ->getQuery()
                ->execute();
        foreach ($likes as $u) {
            foreach ($u->liked as $key => $field) {
                if ($field['userID'] == $usrId) {
                    $u->liked[$key]['avatar'] = $user->getAvatar();
                }
            }
        }
        /* $this->dm->createQueryBuilder('DataBaseBundle:Update')
          ->update()
          ->multiple(true)
          ->field('liked.userID')->equals($usrId)
          ->field('liked.$.avatar')->set($avatar)
          ->upsert(false)
          ->getQuery()
          ->execute();
          $this->dm->flush();
          $this->dm->clear(); */


        //User - alerts[]avatar, following[],inTouch[]avatar,whoVisitedMe[]avatar
        //Update alerts object for top menu header notifications
        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('alerts.username')->equals($user->getUsername())
          ->field('alerts.$.avatar')->set($avatar)
          ->upsert(false)
          ->getQuery()
          ->execute();
          $this->dm->flush();
          $this->dm->clear(); */

        $results = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('alerts.username')->equals($user->getUsername())
                ->eagerCursor(true)
                ->getQuery()
                ->execute();
        foreach ($results as $u) {
            foreach ($u->alerts as $key => $alt) {
                if ($alt['username'] == $user->getUsername()) {
                    $u->alerts[$key]['avatar'] = $user->getAvatar();
                }
            }
        }

        //Update iVisited object avatars
//        $this->dm->createQueryBuilder('DataBaseBundle:User')
//                ->update()
//                ->multiple(true)
//                ->field('alerts.username')->equals($usrId)
//                ->field('alerts.$.avatar')->set($avatar)
//                ->upsert(false)
//                ->getQuery()
//                ->execute();
//        $this->dm->flush();
//        $this->dm->clear();
        //Update iVisited object avatars
        $iVisited = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('iVisited.username')->equals($user->getUsername())
                ->eagerCursor(true)
                ->getQuery()
                ->execute();
        foreach ($iVisited as $u) {
            foreach ($u->iVisited as $key => $field) {
                if ($field['username'] == $user->getUsername()) {
                    $u->iVisited[$key]['avatar'] = $user->getAvatar();
                }
            }
        }
        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('iVisited.id')->equals($usrId)
          ->field('iVisited.$.avatar')->set($avatar)
          ->upsert(false)
          ->getQuery()
          ->execute();
          $this->dm->flush();
          $this->dm->clear(); */

        //Update whoVisitedMe object avatars
        $last90d = strtotime("-90 day");
        $whoVisitedMe = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('whoVisitedMe.username')->equals($user->getUsername())
                ->field('whoVisitedMe.date')->gt($last90d)
                ->eagerCursor(true)
                ->getQuery()
                ->execute();
        
        if (isset($whoVisitedMe) && $whoVisitedMe) {
            foreach ($whoVisitedMe as $u) {
                if (isset($u->whoVisitedMe) && $u->whoVisitedMe && is_array($u->whoVisitedMe)) {
                    foreach ($u->whoVisitedMe as $key => $field) {
                        if (array_key_exists('username', $field) && $field['username'] == $user->getUsername() && $field['date'] > $last90d) {
                            $u->whoVisitedMe[$key]['avatar'] = $user->getAvatar();
                        }
                    }
                }
            }
        }
        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('whoVisitedMe.id')->equals($usrId)
          ->field('whoVisitedMe.$.avatar')->set($avatar)
          ->upsert(false)
          ->getQuery()
          ->execute();
          $this->dm->flush();
          $this->dm->clear(); */

        //Update inTouch contacts avatars
        /* $connections = $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->field('inTouch.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($connections as $u) {
          foreach ($u->inTouch as $key => $field) {
          if ($field['id'] == $usrId) {
          $u->inTouch[$key]['avatar'] = $user->getAvatar();
          }
          }
          } */
        $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(true)
                ->field('inTouch.id')->equals($usrId)
                ->field('inTouch.$.avatar')->set($avatar)
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Qa')
                ->update()
                ->multiple(true)
                ->field('askedBy.id')->equals($user->getId())
                ->field('askedBy.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('createdBy.id')->equals($user->getId())
                ->field('createdBy.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();
        
        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('appliedBy.id')->equals($user->getId())
                ->field('appliedBy.$.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();
        
        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('starredBy.id')->equals($user->getId())
                ->field('starredBy.$.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();
        
        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('skippedBy.id')->equals($user->getId())
                ->field('skippedBy.$.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();
        
        $this->dm->flush();
        $this->dm->clear();
    }

    public function updateAllDocumentsCompanyAvatar(Company $company) {
        if (!$company) {
            return;
        }

        //Update folow company feed company avatar
        $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(true)
                ->field('companyID')->equals($company->getId())
                ->field('companyAvatar')->set($company->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(true)
                ->field('services.$.clients.id')->equals($company->getId())
                ->field('services.$.clients.avatar')->set($company->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->flush();
        $this->dm->clear();
    }

}
