<?php

/*
 * This class is generated by jignesh
 * To perform usersearch and companysearch related operations
 * Before i created class there was methods in APIController updateUserSearch() and updateCompanySearch() that you can get on all release before V0.7
 */

namespace Mobntouch\APIBundle\Classes;

use Mobntouch\DataBaseBundle\Document\User;
use Mobntouch\DataBaseBundle\Document\Company;
use Mobntouch\APIBundle\Classes\Utility;

/**
 * Manage userSearch and companySearch related operations
 *
 * @author Ved Solution
 */
class ManageKeywords {

    private $dm;

    function __construct($dm) {
        $this->dm = $dm;
    }

    public function updateUserKeywords(User $user) {
        if (!$user) {
            return;
        }

        $util = new Utility();
        $arrKeywords = array();

        if (isset($user->name) && !empty($user->name)) {
            $arrKeywords[] = $user->name;
        }

        if (isset($user->lastname) && !empty($user->lastname)) {
            $arrKeywords[] = $user->lastname;
        }

        if (isset($user->jobTitle) && !empty($user->jobTitle)) {
            $arrKeywords[] = $user->jobTitle;
        }

        if (isset($user->company) && !empty($user->company)) {
            $arrKeywords[] = $user->company;
        }

        if (isset($user->city) && !empty($user->city)) {
            $arrKeywords[] = $user->city;
        }

        if (isset($user->keywords) && !empty($user->keywords)) {
            $util->imitateMerge($arrKeywords, $user->keywords);
        }
        
        $keywords = array_filter(array_values(array_unique(array_map('strtolower', $arrKeywords), SORT_REGULAR)), function($value) {
            return $value !== '';
        });

        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(false)
          ->field('_id')->equals($user->getId())
          ->field('keywords')->set($keywords)
          ->upsert(false)
          ->getQuery()
          ->execute();

          $this->dm->flush();
          $this->dm->clear(); */

        return $keywords;
        //array_unique(array_merge(array_map('strtolower',array("test","Testing")),array_map('strtolower',array("Hello","test","Test"))), SORT_REGULAR);
    }

    public function getSuggestedKeywords(User $user, $N = 15) {
        ini_set('memory_limit', '1024M');
        ini_set('max_execution_time', 0);
        if (!$user) {
            return;
        }

        $arrKeywords = array();
        $arrCompetences = array();
        $arrUserIds = array($user->id);

        //GET KEYWORDS WITH SIMILAR JOBTITLE AND ROLES
        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('jobTitle')->equals($user->jobTitle)
                        ->field('companyType')->equals($user->companyType);

        $q->addOr($q->expr()->field('keywords.0')->exists(true));
        $q->addOr($q->expr()->field('competences.0')->exists(true));

        $usersWithSimlilarJobTitleAndRole = $q->getQuery()->execute();

        unset($q);
        if (count($usersWithSimlilarJobTitleAndRole) > 0) {
            foreach ($usersWithSimlilarJobTitleAndRole as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarJobTitleAndRole);

        $usersWithSimlilarJobTitleAndRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarJobTitleAndRoleKeyWords) >= $N) {
            arsort($usersWithSimlilarJobTitleAndRoleKeyWords);
            return array_keys(array_slice($usersWithSimlilarJobTitleAndRoleKeyWords, 0, $N));
        } else {
            unset($usersWithSimlilarJobTitleAndRoleKeyWords);
        }
        //END OF GET KEYWORDS WITH SIMILAR JOBTITLE AND ROLES
        //
        //
        //$this->imitateMerge($arrKeywords, $arrCompetences);
        //if ($_GET['debug'] && $_GET['debug'] == 1) {
        //    print_r($arrKeywords);
        //    die;
        //}
        //$usersWithSimlilarJobTitleAndRoleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //if (count($usersWithSimlilarJobTitleAndRoleCompetences) >= $N) {
        //    arsort($usersWithSimlilarJobTitleAndRoleCompetences);
        //    return array_keys(array_slice($usersWithSimlilarJobTitleAndRoleCompetences, 0, $N));
        //} else {
        //    unset($usersWithSimlilarJobTitleAndRoleCompetences);
        //}
        //GET KEYWORDS WITH SIMILAR JOBTITLE
        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('jobTitle')->equals($user->jobTitle);

        $q->addOr($q->expr()->field('keywords.0')->exists(true));
        $q->addOr($q->expr()->field('competences.0')->exists(true));

        $usersWithSimlilarJobTitle = $q->getQuery()
                ->execute();
        unset($q);

        if (count($usersWithSimlilarJobTitle) > 0) {
            foreach ($usersWithSimlilarJobTitle as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarJobTitle);

        $usersWithSimlilarJobTitleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarJobTitleKeyWords) >= $N) {
            arsort($usersWithSimlilarJobTitleKeyWords);
            return array_keys(array_slice($usersWithSimlilarJobTitleKeyWords, 0, $N));
        } else {
            unset($usersWithSimlilarJobTitleKeyWords);
        }
        //END OF GET KEYWORDS WITH SIMILAR JOBTITLE
        //
        //
        //
        //
        //$this->imitateMerge($arrKeywords, $arrCompetences);
        //$usersWithSimlilarJobTitleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersWithSimlilarJobTitleCompetences) >= $N) {
        //            arsort($usersWithSimlilarJobTitleCompetences);
        //            return array_keys(array_slice($usersWithSimlilarJobTitleCompetences, 0, $N));
        //        } else {
        //            unset($usersWithSimlilarJobTitleCompetences);
        //        }
        //
        //        if ($_GET['debug'] && $_GET['debug'] == 3) {
        //            print_r($arrKeywords);
        //            die;
        //        }
        //GET KEYWORDS WITH SIMILAR ROLES
        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('companyType')->equals($user->companyType);
        $q->addOr($q->expr()->field('keywords.0')->exists(true));
        $q->addOr($q->expr()->field('competences.0')->exists(true));
        $usersWithSimlilarRole = $q->getQuery()->execute();
        unset($q);

        if (count($usersWithSimlilarRole) > 0) {
            foreach ($usersWithSimlilarRole as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarRole);


        $usersWithSimlilarRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarRoleKeyWords) >= $N) {
            arsort($usersWithSimlilarRoleKeyWords);
            return array_keys(array_slice($usersWithSimlilarRoleKeyWords, 0, $N));
        } else {
            unset($usersWithSimlilarRoleKeyWords);
        }
        //END OF GET KEYWORDS WITH SIMILAR ROLES
        //        $this->imitateMerge($arrKeywords, $arrCompetences);
        //        if ($_GET['debug'] && $_GET['debug'] == 6) {
        //            print_r($arrKeywords);
        //            die;
        //        }
        //        $usersWithSimlilarRoleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersWithSimlilarRoleCompetences) >= $N) {
        //            arsort($usersWithSimlilarRoleCompetences);
        //            return array_keys(array_slice($usersWithSimlilarRoleCompetences, 0, $N));
        //        } else {
        //            unset($usersWithSimlilarRoleCompetences);
        //        }
        //        if ($_GET['debug'] && $_GET['debug'] == 7) {
        //            print_r($arrKeywords);
        //            die;
        //        }
        //GET KEYWORDS
        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds);

        $q->addOr($q->expr()->field('keywords.0')->exists(true));
        $q->addOr($q->expr()->field('competences.0')->exists(true));

        $users = $q->getQuery()->execute();
        unset($q);
        unset($arrUserIds);

        if (count($users) > 0) {
            foreach ($users as $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                //$arrUserIds[] = $u->id;
            }
        }
        unset($users);

        $usersKeywords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersKeywords) >= $N) {
            arsort($usersKeywords);
            return array_keys(array_slice($usersKeywords, 0, $N));
        } else {
            return array_keys($usersKeywords);
        }
        //END OF GET KEYWORDS
        //        $this->imitateMerge($arrKeywords, $arrCompetences);
        //        $usersCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersCompetences) >= $N) {
        //            arsort($usersCompetences);
        //            //return json_encode(array_keys(array_slice($usersCompetences, 0, $N)));
        //            return array_keys(array_slice($usersCompetences, 0, $N));
        //        }
        //        if ($_GET['debug'] && $_GET['debug'] == 11) {
        //            print_r($arrKeywords);
        //            die;
        //        }
        //        return array_keys($usersCompetences);

        /*
          ini_set('memory_limit', '2048M');
          ini_set("display_errors", "1");
          error_reporting(E_ALL);
          $arrKeywords = array();
          $arrCompetences = array();
          $arrUserIds = array($user->id);

          $usersWithSimlilarJobTitleAndRole = $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->field('_id')->notIn($arrUserIds)
          ->field('jobTitle')->equals($user->jobTitle)
          ->field('role')->equals($user->role)
          ->getQuery()
          ->execute();

          foreach ($usersWithSimlilarJobTitleAndRole as $u) {
          if (is_array($u->keywords)) {
          $arrKeywords = array_merge($arrKeywords, $u->keywords);
          }
          if (is_array($u->competences)) {
          $arrCompetences = array_merge($arrCompetences, $u->competences);
          }
          $arrUserIds[] = $u->id;
          }

          $usersWithSimlilarJobTitleAndRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
          if (count($usersWithSimlilarJobTitleAndRoleKeyWords) >= $N) {
          arsort($usersWithSimlilarJobTitleAndRoleKeyWords);
          return array_keys(array_slice($usersWithSimlilarJobTitleAndRoleKeyWords, 0, $N));
          }
          $usersWithSimlilarJobTitleAndRoleCompetences = array_count_values(array_map('strtolower', $arrCompetences));
          if (count($usersWithSimlilarJobTitleAndRoleCompetences) >= $N) {
          arsort($usersWithSimlilarJobTitleAndRoleCompetences);
          return array_keys(array_slice($usersWithSimlilarJobTitleAndRoleCompetences, 0, $N));
          }


          $usersWithSimlilarJobTitle = $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->field('_id')->notIn($arrUserIds)
          ->field('jobTitle')->equals($user->jobTitle)
          ->getQuery()
          ->execute();

          foreach ($usersWithSimlilarJobTitle as $u) {
          if (is_array($u->keywords)) {
          $arrKeywords = array_merge($arrKeywords, $u->keywords);
          }
          if (is_array($u->competences)) {
          $arrCompetences = array_merge($arrCompetences, $u->competences);
          }
          $arrUserIds[] = $u->id;
          }


          $usersWithSimlilarJobTitleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
          if (count($usersWithSimlilarJobTitleKeyWords) >= $N) {
          arsort($usersWithSimlilarJobTitleKeyWords);
          return array_keys(array_slice($usersWithSimlilarJobTitleKeyWords, 0, $N));
          }
          $usersWithSimlilarJobTitleCompetences = array_count_values(array_map('strtolower', $arrCompetences));
          if (count($usersWithSimlilarJobTitleCompetences) >= 15) {
          arsort($usersWithSimlilarJobTitleCompetences);
          return array_keys(array_slice($usersWithSimlilarJobTitleCompetences, 0, $N));
          }

          $usersWithSimlilarRole = $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->field('_id')->notIn($arrUserIds)
          ->field('role')->equals($user->role)
          ->getQuery()
          ->execute();

          foreach ($usersWithSimlilarRole as $u) {
          if (is_array($u->keywords)) {
          $arrKeywords = array_merge($arrKeywords, $u->keywords);
          }
          if (is_array($u->competences)) {
          $arrCompetences = array_merge($arrCompetences, $u->competences);
          }
          $arrUserIds[] = $u->id;
          }


          $usersWithSimlilarRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
          if (count($usersWithSimlilarRoleKeyWords) >= $N) {
          arsort($usersWithSimlilarRoleKeyWords);
          return array_keys(array_slice($usersWithSimlilarRoleKeyWords, 0, $N));
          }
          $usersWithSimlilarRoleCompetences = array_count_values(array_map('strtolower', $arrCompetences));
          if (count($usersWithSimlilarRoleCompetences) >= $N) {
          arsort($usersWithSimlilarRoleCompetences);
          return array_keys(array_slice($usersWithSimlilarRoleCompetences, 0, $N));
          }

          $users = $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->field('_id')->notIn($arrUserIds)
          ->getQuery()
          ->execute();

          foreach ($users as $u) {
          if (is_array($u->keywords)) {
          $arrKeywords = array_merge($arrKeywords, $u->keywords);
          }
          if (is_array($u->competences)) {
          $arrCompetences = array_merge($arrCompetences, $u->competences);
          }
          $arrUserIds[] = $u->id;
          }

          $usersKeywords = array_count_values(array_map('strtolower', $arrKeywords));
          if (count($usersKeywords) >= $N) {
          arsort($usersKeywords);
          return array_keys(array_slice($usersKeywords, 0, $N));
          }
          $usersCompetences = array_count_values(array_map('strtolower', $arrCompetences));
          if (count($usersCompetences) >= $N) {
          arsort($usersCompetences);
          return array_keys(array_slice($usersCompetences, 0, $N));
          }

          $keywords = array_count_values(array_map('strtolower', $arrKeywords));
          arsort($keywords);
          return $keywords;
         * 
         */
    }

    public function getAutocompleteKeywords(User $user, $keyword, $N = 15) {
        ini_set('memory_limit', '1024M');
        ini_set('max_execution_time', 0);
        if (!$user) {
            return;
        }
        $arrKeywords = array();
        $arrCompetences = array();
        $arrUserIds = array($user->id);

        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('jobTitle')->equals($user->jobTitle)
                        ->field('companyType')->equals($user->companyType);
        $q->addOr($q->expr()->field('keywords')->equals(new \MongoRegex("/^{$keyword}/i")));
        $q->addOr($q->expr()->field('competences')->equals(new \MongoRegex("/^{$keyword}/i")));
        $usersWithSimlilarJobTitleAndRole = $q->getQuery()->execute();
        unset($q);

        if (count($usersWithSimlilarJobTitleAndRole)) {
            foreach ($usersWithSimlilarJobTitleAndRole as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrKeywords = preg_grep('/^' . $keyword . '/i', $arrKeywords);
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarJobTitleAndRole);

        $usersWithSimlilarJobTitleAndRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarJobTitleAndRoleKeyWords) >= $N) {
            arsort($usersWithSimlilarJobTitleAndRoleKeyWords);
            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarJobTitleAndRoleKeyWords, 0, $N)));
        } else {
            unset($usersWithSimlilarJobTitleAndRoleKeyWords);
        }

        //        $this->imitateMerge($arrKeywords, $arrCompetences);
        //        $usersWithSimlilarJobTitleAndRoleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersWithSimlilarJobTitleAndRoleCompetences) >= $N) {
        //            arsort($usersWithSimlilarJobTitleAndRoleCompetences);
        //            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarJobTitleAndRoleCompetences, 0, $N)));
        //        } else {
        //            unset($usersWithSimlilarJobTitleAndRoleCompetences);
        //        }

        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('jobTitle')->equals($user->jobTitle);
        $q->addOr($q->expr()->field('keywords')->equals(new \MongoRegex("/^{$keyword}/i")));
        $q->addOr($q->expr()->field('competences')->equals(new \MongoRegex("/^{$keyword}/i")));
        $usersWithSimlilarJobTitle = $q->getQuery()->execute();
        unset($q);

        if ($usersWithSimlilarJobTitle) {
            foreach ($usersWithSimlilarJobTitle as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrKeywords = preg_grep('/^' . $keyword . '/i', $arrKeywords);
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarJobTitle);

        $usersWithSimlilarJobTitleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarJobTitleKeyWords) >= $N) {
            arsort($usersWithSimlilarJobTitleKeyWords);
            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarJobTitleKeyWords, 0, $N)));
        } else {
            unset($usersWithSimlilarJobTitleKeyWords);
        }

        //        $this->imitateMerge($arrKeywords, $arrCompetences);
        //        $usersWithSimlilarJobTitleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersWithSimlilarJobTitleCompetences) >= $N) {
        //            arsort($usersWithSimlilarJobTitleCompetences);
        //            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarJobTitleCompetences, 0, $N)));
        //        } else {
        //            unset($usersWithSimlilarJobTitleCompetences);
        //        }

        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds)
                        ->field('companyType')->equals($user->companyType);
        $q->addOr($q->expr()->field('keywords')->equals(new \MongoRegex("/^{$keyword}/i")));
        $q->addOr($q->expr()->field('competences')->equals(new \MongoRegex("/^{$keyword}/i")));
        $usersWithSimlilarRole = $q->getQuery()->execute();

        if (count($usersWithSimlilarRole) > 0) {
            foreach ($usersWithSimlilarRole as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrKeywords = preg_grep('/^' . $keyword . '/i', $arrKeywords);
                $arrUserIds[] = $id;
            }
        }
        unset($usersWithSimlilarRole);

        $usersWithSimlilarRoleKeyWords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersWithSimlilarRoleKeyWords) >= $N) {
            arsort($usersWithSimlilarRoleKeyWords);
            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarRoleKeyWords, 0, $N)));
        } else {
            unset($usersWithSimlilarRoleKeyWords);
        }

        //        $this->imitateMerge($arrKeywords, $arrCompetences);
        //        $usersWithSimlilarRoleCompetences = array_count_values(array_map('strtolower', $arrKeywords));
        //        if (count($usersWithSimlilarRoleCompetences) >= $N) {
        //            arsort($usersWithSimlilarRoleCompetences);
        //            return array_map('utf8_encode', array_keys(array_slice($usersWithSimlilarRoleCompetences, 0, $N)));
        //        } else {
        //            unset($usersWithSimlilarRoleCompetences);
        //        }

        $q = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->hydrate(false)
                        ->select('keywords', 'competences')
                        ->field('_id')->notIn($arrUserIds);
        $q->addOr($q->expr()->field('keywords')->equals(new \MongoRegex("/^{$keyword}/i")));
        $q->addOr($q->expr()->field('competences')->equals(new \MongoRegex("/^{$keyword}/i")));
        $users = $q->getQuery()->execute();
        unset($q);
        unset($arrUserIds);
        if (count($users) > 0) {
            foreach ($users as $id => $u) {
                if (array_key_exists('keywords', $u) && is_array($u['keywords'])) {
                    $aKeywords = str_replace('-', ' ', $u['keywords']);
                    $this->imitateMerge($arrKeywords, $aKeywords);
                    unset($aKeywords);
                }
                if (array_key_exists('competences', $u) && is_array($u['competences'])) {
                    $aCompetences = str_replace('-', ' ', $u['competences']);
                    $this->imitateMerge($arrKeywords, $aCompetences);
                    unset($aKeywords);
                }
                $arrKeywords = preg_grep('/^' . $keyword . '/i', $arrKeywords);
            }
        }
        unset($users);

        $usersKeywords = array_count_values(array_map('strtolower', $arrKeywords));
        if (count($usersKeywords) >= $N) {
            arsort($usersKeywords);
            return array_map('utf8_encode', array_keys(array_slice($usersKeywords, 0, $N)));
        } else {
            return array_map('utf8_encode', array_keys($usersKeywords));
        }
//        $this->imitateMerge($arrKeywords, $arrCompetences);
//        $usersCompetences = array_count_values(array_map('strtolower', $arrKeywords));
//        if (count($usersCompetences) >= $N) {
//            arsort($usersCompetences);
//            //return json_encode(array_keys(array_slice($usersCompetences, 0, $N)));
//            return array_map('utf8_encode', array_keys(array_slice($usersCompetences, 0, $N)));
//        }
//        return array_map('utf8_encode', array_keys($usersCompetences));
    }

    function imitateMerge(&$array1, &$array2) {
        foreach ($array2 as $i) {
            $array1[] = $i;
        }
    }

}
