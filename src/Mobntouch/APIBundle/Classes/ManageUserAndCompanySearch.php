<?php

/*
 * This class is generated by jignesh
 * To perform usersearch and companysearch related operations
 * Before i created class there was methods in APIController updateUserSearch() and updateCompanySearch() that you can get on all release before V0.7
 */

namespace Mobntouch\APIBundle\Classes;

use Mobntouch\DataBaseBundle\Document\User;
use Mobntouch\DataBaseBundle\Document\Company;
use Mobntouch\APIBundle\Classes\Utility;

/**
 * Manage userSearch and companySearch related operations
 *
 * @author Ved Solution
 */
class ManageUserAndCompanySearch {

    private $dm;

    function __construct($dm) {
        $this->dm = $dm;
    }

    public function updateUserSearch(User $user) {
        if (!$user) {
            return;
        }
        $util = new Utility();
        $name = $util->removeAccents($user->getName());
        $lastname = $util->removeAccents($user->getLastname());
        $company = $util->removeAccents($user->getCompany());
        $jobTitle = $util->removeAccents($user->getJobTitle());

        $tempname = explode(" ", $name);
        $templastname = explode(" ", $lastname);
        $tempcompany = explode(" ", $company);
        $tempjobTitle = explode(" ", $jobTitle);

        $arrSearch = array_values(array_unique(array_map('strtolower', array_merge($tempname, $templastname, $tempcompany, $tempjobTitle)), SORT_REGULAR));

        $search = array_values(array_filter($arrSearch, function($value) {
                    return $value !== '';
                }));

        $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('search')->set($search)
                ->upsert(false)
                ->getQuery()
                ->execute();


        //Update user search document
        $this->dm->createQueryBuilder('DataBaseBundle:UserSearch')
                ->update()
                ->multiple(false)
                ->field('userID')->equals($user->getId())
                ->field('username')->set($user->getUsername())
                ->field('name')->set($name)
                ->field('lastname')->set($lastname)
                ->field('jobTitle')->set($jobTitle)
                ->field('company')->set(empty($company) || $company == "" ? null : $company)
                ->field('avatar')->set($user->getAvatar())
                ->field('responseRate')->set($user->getResponseRate())
                ->field('totalReceivedEmails')->set($user->getTotalReceivedEmails())
                ->field('validated')->set($user->getValidated())
                ->field('search')->set($search)
                ->upsert(true)
                ->getQuery()
                ->execute();

        $this->dm->flush();
        $this->dm->clear();
        return $search;
    }

    public function updateCompanySearch(Company $company) {
        if (!$company) {
            return;
        }
        $util = new Utility();
        $name = $util->removeAccents($company->getName());
        $username = $util->removeAccents($company->getUsername());
        $search = array_merge(explode(" ", $name), explode(" ", $username));

        //Update company object search array
        $company->setSearch($search);

        //update companysearch document
        $this->dm->createQueryBuilder('DataBaseBundle:CompanySearch')
                ->update()
                ->multiple(false)
                ->field('companyID')->equals($company->getId())
                ->field('username')->set($company->getUsername())
                ->field('name')->set($name)
                ->field('size')->set($company->getSize())
                ->field('companyType')->set($company->getCompanyType())
                ->field('companySubType')->set($company->getCompanySubType())
                ->field('avatar')->set($company->getAvatar())
                ->field('search')->set($search)
                ->upsert(true)
                ->getQuery()
                ->execute();

        $this->dm->flush();
        $this->dm->clear();
    }

}
