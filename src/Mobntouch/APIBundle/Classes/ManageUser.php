<?php

/*
 * This class is generated by jignesh
 * Class to make things easy to manage 
 * Othre stuff that helps to manage perform operations
 */

namespace Mobntouch\APIBundle\Classes;

use Mobntouch\DataBaseBundle\Document\User;
use Symfony\Component\DependencyInjection\Container;

/**
 * Manage other stuffs likes string related operations, change formats etc
 *
 * @author Ved Solution
 */
class ManageUser {

    private $dm;
    private $container;
    private $util;

    function __construct($dm, Container $container = null) {
        $this->dm = $dm;
        $this->container = $container;
        $this->util = new Utility();
    }

    public function newUsername($name, $lastname, $email = null) {
        $name = str_replace("'", '', $name);
        $name = str_replace(' ', '', $name);
        $name = str_replace('.', '', $name);
        $name = str_replace(',', '', $name);
        $name = str_replace('-', '', $name);
        $name = str_replace('/', '', $name);
        $name = str_replace('|', '', $name);
        $name = str_replace('&', '', $name);
        $name = $this->util->removeAccents($name);

        $lastname = str_replace("'", '', $lastname);
        $lastname = str_replace(' ', '', $lastname);
        $lastname = str_replace('.', '', $lastname);
        $lastname = str_replace(',', '', $lastname);
        $lastname = str_replace('-', '', $lastname);
        $lastname = str_replace('/', '', $lastname);
        $lastname = str_replace('|', '', $lastname);
        $lastname = str_replace('&', '', $lastname);
        $lastname = $this->util->removeAccents($lastname);

        $username = strtolower($name . '-' . $lastname);
        for ($i = 1;;) {
            if ($email) {
                $exists = $this->dm->createQueryBuilder('DataBaseBundle:User')
                        ->field('username')->equals($username)
                        ->field('email')->notEqual($email)
                        ->getQuery()
                        ->getSingleResult();
            } else {
                $exists = $this->dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username));
            }
            if (!$exists)
                return $username;
            $username = strtolower($name . '-' . $lastname) . $i;
            $i++;
        }
        return null;
    }

    public function newAutoGeneratedUsername($email) {
        $username = $this->cleanUsername(strtolower(explode('@', $email)[0]));
        for ($i = 1;;) {
            $exists = $this->dm->getRepository('DataBaseBundle:User')->findOneBy(array('username' => $username));
            if (!$exists) {
                return $username;
            }
            $username = $username . $i;
            $i++;
        }
        return null;
    }

    //Update user details when user update profile
    //COLLEGE - students
    //Company - administrators, employees,teams, followers
    //Invitation - existingUser
    //Mail - SenderName - Avatar, ReceiverName - Avatar
    //Offer - Name, Lastname, Avatar, Compay, JobTitle
    //OfferReply - Name, Lastname, Avatar, Company, Jobtitle, Conversation User Details
    //ServiceSuggestions - suggestedBy
    //Update - Username, Name, LastName, Liked, Commets
    //User - iVisited, whoVisitedMe, inTouch, Alerts
    public function updateAllDocumentsUserDetails(User $user) {

        if (!$user) {
            return;
        }
        $usrId = $user->getId();

        /* $this->dm->createQueryBuilder('DataBaseBundle:College')
          ->update()
          ->multiple(true)
          ->field('students.id')->equals($user->getId())
          ->field('students.$.username')->set($user->getUsername())
          ->field('students.$.name')->set($user->getName())
          ->field('students.$.lastname')->set($user->getLastname())
          ->field('students.$.jobTitle')->set($user->getJobTitle())
          ->field('students.$.company')->set($user->getCompany())
          ->field('students.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $colleges = $this->dm->createQueryBuilder('DataBaseBundle:College')
                ->field('students.id')->equals($usrId)
                ->getQuery()
                ->execute();
        foreach ($colleges as $clg) {
            foreach ($clg->students as $key => $field) {
                if ($field['id'] == $usrId) {
                    $clg->students[$key]['username'] = $user->getUsername();
                    $clg->students[$key]['name'] = $user->getName();
                    $clg->students[$key]['lastname'] = $user->getLastname();
                    $clg->students[$key]['jobTitle'] = $user->getJobTitle();
                    $clg->students[$key]['company'] = $user->getCompany();
                    $clg->students[$key]['avatar'] = $user->getAvatar();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        $this->dm->createQueryBuilder('DataBaseBundle:Company')
                ->update()
                ->multiple(true)
                ->field('administrators.id')->equals($user->getId())
                ->field('administrators.$.username')->set($user->getUsername())
                ->field('administrators.$.name')->set($user->getName())
                ->field('administrators.$.lastname')->set($user->getLastname())
                ->field('administrators.$.jobTitle')->set($user->getJobTitle())
                ->field('administrators.$.avatar')->set($user->getAvatar())
                ->field('administrators.$.cover')->set($user->getCover())
                ->field('administrators.$.miniResume')->set($user->getMiniResume())
                ->field('administrators.$.city')->set($user->getCity())
                ->field('administrators.$.basedCountry')->set($user->getBasedCountry())
                ->upsert(false)
                ->getQuery()
                ->execute();

        //User can be added as admin single time so no need to apply recursion
        /* $administrators = $this->dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('administrators.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($administrators as $adm) {
          foreach ($adm->administrators as $key => $field) {
          if ($field['id'] == $usrId) {
          $adm->administrators[$key]['username'] = $user->getUsername();
          $adm->administrators[$key]['name'] = $user->getName();
          $adm->administrators[$key]['lastname'] = $user->getLastname();
          $adm->administrators[$key]['jobTitle'] = $user->getJobTitle();
          $adm->administrators[$key]['avatar'] = $user->getAvatar();
          $adm->administrators[$key]['cover'] = $user->getCover();
          $adm->administrators[$key]['miniResume'] = $user->getMiniResume();
          $adm->administrators[$key]['city'] = $user->getCity();
          $adm->administrators[$key]['basedCountry'] = $user->getBasedCountry();
          }
          }
          } */


        $this->dm->createQueryBuilder('DataBaseBundle:Company')
                ->update()
                ->multiple(true)
                ->field('employees.id')->equals($user->getId())
                ->field('employees.$.username')->set($user->getUsername())
                ->field('employees.$.name')->set($user->getName())
                ->field('employees.$.lastname')->set($user->getLastname())
                ->field('employees.$.jobTitle')->set($user->getJobTitle())
                ->field('employees.$.avatar')->set($user->getAvatar())
                ->field('employees.$.cover')->set($user->getCover())
                ->field('employees.$.miniResume')->set($user->getMiniResume())
                ->field('employees.$.city')->set($user->getCity())
                ->field('employees.$.basedCountry')->set($user->getBasedCountry())
                ->field('employees.$.responseRate')->set($user->getResponseRate())
                ->field('employees.$.totalReceivedEmails')->set($user->getTotalReceivedEmails())
                ->upsert(false)
                ->getQuery()
                ->execute();

        //No need to recursion as user can be assign one time as employee on company
        /* $employees = $this->dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('employees.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($employees as $emp) {
          foreach ($emp->employees as $key => $field) {
          if ($field['id'] == $usrId) {
          $emp->employees[$key]['username'] = $user->getUsername();
          $emp->employees[$key]['name'] = $user->getName();
          $emp->employees[$key]['lastname'] = $user->getLastname();
          $emp->employees[$key]['jobTitle'] = $user->getJobTitle();
          $emp->employees[$key]['avatar'] = $user->getAvatar();
          $emp->employees[$key]['cover'] = $user->getCover();
          $emp->employees[$key]['miniResume'] = $user->getMiniResume();
          $emp->employees[$key]['city'] = $user->getCity();
          $emp->employees[$key]['basedCountry'] = $user->getBasedCountry();
          $emp->employees[$key]['responseRate'] = $user->getResponseRate();
          $emp->employees[$key]['totalReceivedEmails'] = $user->getTotalReceivedEmails();
          }
          }
          } */


        $this->dm->createQueryBuilder('DataBaseBundle:Company')
                ->update()
                ->multiple(true)
                ->field('recruiters.id')->equals($user->getId())
                ->field('recruiters.$.username')->set($user->getUsername())
                ->field('recruiters.$.name')->set($user->getName())
                ->field('recruiters.$.lastname')->set($user->getLastname())
                ->field('recruiters.$.jobTitle')->set($user->getJobTitle())
                ->field('recruiters.$.avatar')->set($user->getAvatar())
                ->field('recruiters.$.cover')->set($user->getCover())
                ->field('recruiters.$.miniResume')->set($user->getMiniResume())
                ->field('recruiters.$.city')->set($user->getCity())
                ->field('recruiters.$.basedCountry')->set($user->getBasedCountry())
                ->field('recruiters.$.responseRate')->set($user->getResponseRate())
                ->field('recruiters.$.totalReceivedEmails')->set($user->getTotalReceivedEmails())
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Here also recursion not required
        /* $recruiters = $this->dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('recruiters.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($recruiters as $rec) {
          foreach ($rec->recruiters as $key => $field) {
          if ($field['id'] == $usrId) {
          $rec->recruiters[$key]['username'] = $user->getUsername();
          $rec->recruiters[$key]['name'] = $user->getName();
          $rec->recruiters[$key]['lastname'] = $user->getLastname();
          $rec->recruiters[$key]['jobTitle'] = $user->getJobTitle();
          $rec->recruiters[$key]['avatar'] = $user->getAvatar();
          $rec->recruiters[$key]['cover'] = $user->getCover();
          $rec->recruiters[$key]['miniResume'] = $user->getMiniResume();
          $rec->recruiters[$key]['city'] = $user->getCity();
          $rec->recruiters[$key]['basedCountry'] = $user->getBasedCountry();
          $rec->recruiters[$key]['responseRate'] = $user->getResponseRate();
          $rec->recruiters[$key]['totalReceivedEmails'] = $user->getTotalReceivedEmails();
          }
          }
          } */

        $this->dm->createQueryBuilder('DataBaseBundle:Company')
                ->update()
                ->multiple(true)
                ->field('followers.id')->equals($user->getId())
                ->field('followers.$.username')->set($user->getUsername())
                ->field('followers.$.name')->set($user->getName())
                ->field('followers.$.lastname')->set($user->getLastname())
                ->field('followers.$.jobTitle')->set($user->getJobTitle())
                ->field('followers.$.company')->set($user->getCompany())
                ->field('followers.$.avatar')->set($user->getAvatar())
                ->field('followers.$.cover')->set($user->getCover())
                ->field('followers.$.miniResume')->set($user->getMiniResume())
                ->field('followers.$.city')->set($user->getCity())
                ->field('followers.$.basedCountry')->set($user->getBasedCountry())
                ->upsert(false)
                ->getQuery()
                ->execute();

        //Recursion not required as user can follow company only once
        /* $followers = $this->dm->createQueryBuilder('DataBaseBundle:Company')
          ->field('followers.id')->equals($usrId)
          ->eagerCursor(true)
          ->getQuery()
          ->execute();
          foreach ($followers as $fllw) {
          foreach ($fllw->followers as $key => $field) {
          if ($field['id'] == $usrId) {
          $fllw->followers[$key]['username'] = $user->getUsername();
          $fllw->followers[$key]['name'] = $user->getName();
          $fllw->followers[$key]['lastname'] = $user->getLastname();
          $fllw->followers[$key]['jobTitle'] = $user->getJobTitle();
          $fllw->followers[$key]['avatar'] = $user->getAvatar();
          $fllw->followers[$key]['cover'] = $user->getCover();
          $fllw->followers[$key]['miniResume'] = $user->getMiniResume();
          $fllw->followers[$key]['city'] = $user->getCity();
          $fllw->followers[$key]['basedCountry'] = $user->getBasedCountry();
          }
          }
          } */

        /* $this->dm->createQueryBuilder('DataBaseBundle:Invitation')
          ->update()
          ->multiple(true)
          ->field('exisitngUser.id')->equals($user->getId())
          ->field('exisitngUser.$.username')->set($user->getUsername())
          ->field('existingUser.$.jobTitle')->set($user->getJobTitle())
          ->field('existingUser.$.company')->set($user->getAvatar())
          ->field('existingUser.$.inTouchCounter')->set($user->getInTouchCounter())
          ->field('existingUser.$.inBusinessRelationCounter')->set($user->getInBusinessRelationCounter())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $invitations = $this->dm->createQueryBuilder('DataBaseBundle:Invitation')
                ->field('exisitngUser.id')->equals($usrId)
                ->getQuery()
                ->execute();
        foreach ($invitations as $inv) {
            foreach ($inv->exisitngUser as $key => $field) {
                if ($field['id'] == $usrId) {
                    $inv->exisitngUser[$key]['username'] = $user->getUsername();
                    $inv->exisitngUser[$key]['jobTitle'] = $user->getJobTitle();
                    $inv->exisitngUser[$key]['company'] = $user->getCompany();
                    $inv->exisitngUser[$key]['avatar'] = $user->getAvatar();
                    $inv->exisitngUser[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        $this->dm->createQueryBuilder('DataBaseBundle:Mail')
                ->update()
                ->multiple(true)
                ->field('fromID')->equals($user->getId())
                ->field('senderName')->set($user->getName() . ' ' . $user->getLastname())
                ->field('senderAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Mail')
                ->update()
                ->multiple(true)
                ->field('toID')->equals($user->getId())
                ->field('receiverName')->set($user->getName() . ' ' . $user->getLastname())
                ->field('receiverAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Offer')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($user->getId())
                ->field('username')->set($user->getUsername())
                ->field('userFirstName')->set($user->getName())
                ->field('userLastName')->set($user->getLastname())
                ->field('userCompany')->set($user->getCompany())
                ->field('userAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:OfferReply')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($user->getId())
                ->field('username')->set($user->getUsername())
                ->field('userFirstName')->set($user->getName())
                ->field('userLastName')->set($user->getLastname())
                ->field('userCompany')->set($user->getCompany())
                ->field('userAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        /* $this->dm->createQueryBuilder('DataBaseBundle:OfferReply')
          ->update()
          ->multiple(true)
          ->field('conversation.username')->equals($user->getUsername())
          ->field('conversation.$.userFirstName')->set($user->getName())
          ->field('conversation.$.userLastName')->set($user->getLastname())
          ->field('conversation.$.userCompany')->set($user->getCompany())
          ->field('conversation.$.userAvatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        /* $this->dm->createQueryBuilder('DataBaseBundle:ServiceSuggestions')
          ->update()
          ->multiple(true)
          ->field('suggestedBy.id')->equals($user->getId())
          ->field('suggestedBy.$.username')->set($user->getUsername())
          ->field('suggestedBy.$.name')->set($user->getName())
          ->field('suggestedBy.$.lastname')->set($user->getLastname())
          ->field('suggestedBy.$.company')->set($user->getCompany())
          ->field('suggestedBy.$.jobTitle')->set($user->getJobTitle())
          ->field('suggestedBy.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $suggestions = $this->dm->createQueryBuilder('DataBaseBundle:ServiceSuggestions')
                ->field('suggestedBy.id')->equals($usrId)
                ->getQuery()
                ->execute();
        foreach ($suggestions as $sug) {
            foreach ($sug->suggestedBy as $key => $field) {
                if ($field['id'] == $usrId) {
                    $inv->suggestedBy[$key]['username'] = $user->getUsername();
                    $inv->suggestedBy[$key]['name'] = $user->getName();
                    $inv->suggestedBy[$key]['lastname'] = $user->getLastname();
                    $inv->suggestedBy[$key]['jobTitle'] = $user->getJobTitle();
                    $inv->suggestedBy[$key]['company'] = $user->getCompany();
                    $inv->suggestedBy[$key]['avatar'] = $user->getAvatar();
                    $inv->suggestedBy[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($user->getId())
                ->field('username')->set($user->getUsername())
                ->field('userFullName')->set($user->getName() . ' ' . $user->getLastname())
                ->field('userJobTitle')->set($user->getJobTitle())
                ->field('userAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->update()
                ->multiple(true)
                ->field('userID')->equals($user->getId())
                ->field('username')->set($user->getUsername())
                ->field('userFullName')->set($user->getName() . ' ' . $user->getLastname())
                ->field('userJobTitle')->set($user->getJobTitle())
                ->field('userAvatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        /* $this->dm->createQueryBuilder('DataBaseBundle:Update')
          ->update()
          ->multiple(true)
          ->field('liked.userID')->equals($user->getId())
          ->field('liked.$.username')->set($user->getUsername())
          ->field('liked.$.name')->set($user->getName())
          ->field('liked.$.lastname')->set($user->getLastname())
          ->field('liked.$.company')->set($user->getCompany())
          ->field('liked.$.jobTitle')->set($user->getJobTitle())
          ->field('liked.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $likes = $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->field('liked.userID')->equals($usrId)
                ->getQuery()
                ->execute();
        foreach ($likes as $like) {
            foreach ($like->liked as $key => $field) {
                if ($field['userID'] == $usrId) {
                    $like->liked[$key]['username'] = $user->getUsername();
                    $like->liked[$key]['name'] = $user->getName();
                    $like->liked[$key]['lastname'] = $user->getLastname();
                    $like->liked[$key]['jobTitle'] = $user->getJobTitle();
                    $like->liked[$key]['company'] = $user->getCompany();
                    $like->liked[$key]['avatar'] = $user->getAvatar();
                    $like->liked[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }


        /* $this->dm->createQueryBuilder('DataBaseBundle:Update')
          ->update()
          ->multiple(true)
          ->field('comments.userID')->equals($user->getId())
          ->field('comments.$.username')->set($user->getUsername())
          ->field('comments.$.name')->set($user->getName())
          ->field('comments.$.lastname')->set($user->getLastname())
          ->field('comments.$.company')->set($user->getCompany())
          ->field('comments.$.jobTitle')->set($user->getJobTitle())
          ->field('comments.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $comments = $this->dm->createQueryBuilder('DataBaseBundle:Update')
                ->field('comments.userID')->equals($usrId)
                ->getQuery()
                ->execute();
        foreach ($comments as $cmnt) {
            foreach ($cmnt->comments as $key => $field) {
                if ($field['userID'] == $usrId) {
                    $cmnt->comments[$key]['username'] = $user->getUsername();
                    $cmnt->comments[$key]['name'] = $user->getName();
                    $cmnt->comments[$key]['lastname'] = $user->getLastname();
                    $cmnt->comments[$key]['jobTitle'] = $user->getJobTitle();
                    $cmnt->comments[$key]['company'] = $user->getCompany();
                    $cmnt->comments[$key]['avatar'] = $user->getAvatar();
                    $cmnt->comments[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        $this->dm->createQueryBuilder('DataBaseBundle:Qa')
                ->update()
                ->multiple(true)
                ->field('askedBy.id')->equals($user->getId())
                ->field('askedBy.username')->set($user->getUsername())
                ->field('askedBy.name')->set($user->getName())
                ->field('askedBy.lastname')->set($user->getLastname())
                ->field('askedBy.company')->set($user->getCompany())
                ->field('askedBy.jobTitle')->set($user->getJobTitle())
                ->field('askedBy.avatar')->set($user->getAvatar())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('appliedBy.id')->equals($user->getId())
                ->field('appliedBy.$.username')->set($user->getUsername())
                ->field('appliedBy.$.name')->set($user->getName())
                ->field('appliedBy.$.lastname')->set($user->getLastname())
                ->field('appliedBy.$.company')->set($user->getCompany())
                ->field('appliedBy.$.jobTitle')->set($user->getJobTitle())
                ->field('appliedBy.$.avatar')->set($user->getAvatar())
                ->field('appliedBy.$.cover')->set($user->getCover())
                ->field('appliedBy.$.city')->set($user->getCity())
                ->upsert(false)
                ->getQuery()
                ->execute();

        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('iVisited.$.username')->equals($user->getUsername())
          //->field('iVisited.$.username')->set($user->getUsername())
          ->field('iVisited.$.name')->set($user->getName())
          ->field('iVisited.$.lastname')->set($user->getLastname())
          ->field('iVisited.$.company')->set($user->getCompany())
          ->field('iVisited.$.jobTitle')->set($user->getJobTitle())
          ->field('iVisited.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $iVisited = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('iVisited.username')->equals($user->getUsername())
                ->getQuery()
                ->execute();
        foreach ($iVisited as $iV) {
            foreach ($iV->iVisited as $key => $field) {
                if ($field['username'] == $user->getUsername()) {
                    $iV->iVisited[$key]['username'] = $user->getUsername();
                    $iV->iVisited[$key]['name'] = $user->getName();
                    $iV->iVisited[$key]['lastname'] = $user->getLastname();
                    $iV->iVisited[$key]['jobTitle'] = $user->getJobTitle();
                    $iV->iVisited[$key]['company'] = $user->getCompany();
                    $iV->iVisited[$key]['avatar'] = $user->getAvatar();
                    $iV->iVisited[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('whoVisitedMe.$.username')->equals($user->getUsername())
          //->field('whoVisitedMe.$.username')->set($user->getUsername())
          ->field('whoVisitedMe.$.name')->set($user->getName())
          ->field('whoVisitedMe.$.lastname')->set($user->getLastname())
          ->field('whoVisitedMe.$.company')->set($user->getCompany())
          ->field('whoVisitedMe.$.jobTitle')->set($user->getJobTitle())
          ->field('whoVisitedMe.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $last90d = strtotime("-90 day");
        $whoVisitedMe = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('whoVisitedMe.username')->equals($user->getUsername())
                ->field('whoVisitedMe.date')->gt($last90d)
                ->getQuery()
                ->execute();
        if (isset($whoVisitedMe) && $whoVisitedMe) {
            foreach ($whoVisitedMe as $wV) {
                if (isset($u->whoVisitedMe) && $u->whoVisitedMe && is_array($u->whoVisitedMe)) {
                    foreach ($wV->whoVisitedMe as $key => $field) {
                        if (array_key_exists('username', $field) && $field['username'] == $user->getUsername() && $field['date'] > $last90d) {
                            $wV->whoVisitedMe[$key]['username'] = $user->getUsername();
                            $wV->whoVisitedMe[$key]['name'] = $user->getName();
                            $wV->whoVisitedMe[$key]['lastname'] = $user->getLastname();
                            $wV->whoVisitedMe[$key]['jobTitle'] = $user->getJobTitle();
                            $wV->whoVisitedMe[$key]['company'] = $user->getCompany();
                            $wV->whoVisitedMe[$key]['avatar'] = $user->getAvatar();
                            $wV->whoVisitedMe[$key]['cover'] = $user->getCover();
                        }
                    }
                }
                $this->dm->flush();
                $this->dm->clear();
            }
        }

        $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(true)
                ->field('inTouch.id')->equals($usrId)
                ->field('inTouch.$.username')->set($user->getUsername())
                ->field('inTouch.$.name')->set($user->getName())
                ->field('inTouch.$.lastname')->set($user->getLastname())
                ->field('inTouch.$.avatar')->set($user->getAvatar())
                ->field('inTouch.$.cover')->set($user->getCover())
                ->field('inTouch.$.miniResume')->set($user->getMiniResume())
                ->field('inTouch.$.jobTitle')->set($user->getJobTitle())
                ->field('inTouch.$.company')->set($user->getCompany())
                ->upsert(false)
                ->getQuery()
                ->execute();

        /* $this->dm->createQueryBuilder('DataBaseBundle:User')
          ->update()
          ->multiple(true)
          ->field('alerts.username')->equals($user->getUsername())
          ->field('alerts.$.name')->set($user->getName())
          ->field('alerts.$.lastname')->set($user->getLastname())
          ->field('alerts.$.company')->set($user->getCompany())
          ->field('alerts.$.jobTitle')->set($user->getJobTitle())
          ->field('alerts.$.avatar')->set($user->getAvatar())
          ->upsert(false)
          ->getQuery()
          ->execute(); */

        $alerts = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->field('alerts.username')->equals($user->getUsername())
                ->getQuery()
                ->execute();
        foreach ($alerts as $alt) {
            foreach ($alt->alerts as $key => $field) {
                if ($field['username'] == $user->getUsername()) {
                    $alt->alerts[$key]['username'] = $user->getUsername();
                    $alt->alerts[$key]['name'] = $user->getName();
                    $alt->alerts[$key]['lastname'] = $user->getLastname();
                    $alt->alerts[$key]['jobTitle'] = $user->getJobTitle();
                    $alt->alerts[$key]['company'] = $user->getCompany();
                    $alt->alerts[$key]['avatar'] = $user->getAvatar();
                    $alt->alerts[$key]['cover'] = $user->getCover();
                }
            }
            $this->dm->flush();
            $this->dm->clear();
        }

        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('createdBy.id')->equals($usrId)
                ->field('createdBy.name')->set($user->getName())
                ->field('createdBy.lastname')->set($user->getLastname())
                ->field('createdBy.avatar')->set($user->getAvatar())
                ->field('createdBy.cover')->set($user->getCover())
                ->field('createdBy.jobTitle')->set($user->getJobTitle())
                ->upsert(false)
                ->getQuery()
                ->execute();
        
        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('appliedBy.id')->equals($usrId)
                ->field('appliedBy.$.email')->set($user->getEmail())
                ->field('appliedBy.$.name')->set($user->getName())
                ->field('appliedBy.$.lastname')->set($user->getLastname())
                ->field('appliedBy.$.avatar')->set($user->getAvatar())
                ->field('appliedBy.$.cover')->set($user->getCover())
                ->field('appliedBy.$.jobTitle')->set($user->getJobTitle())
                ->field('appliedBy.$.city')->set($user->getCity())
                ->field('appliedBy.$.company')->set($user->getCompany())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('starredBy.id')->equals($user->getId())
                ->field('starredBy.$.email')->set($user->getEmail())
                ->field('starredBy.$.name')->set($user->getName())
                ->field('starredBy.$.lastname')->set($user->getLastname())
                ->field('starredBy.$.avatar')->set($user->getAvatar())
                ->field('starredBy.$.cover')->set($user->getCover())
                ->field('starredBy.$.jobTitle')->set($user->getJobTitle())
                ->field('starredBy.$.city')->set($user->getCity())
                ->field('starredBy.$.company')->set($user->getCompany())
                ->upsert(false)
                ->getQuery()
                ->execute();

        $this->dm->createQueryBuilder('DataBaseBundle:Jobs')
                ->update()
                ->multiple(true)
                ->field('skippedBy.id')->equals($user->getId())
                ->field('skippedBy.$.email')->set($user->getEmail())
                ->field('skippedBy.$.name')->set($user->getName())
                ->field('skippedBy.$.lastname')->set($user->getLastname())
                ->field('skippedBy.$.avatar')->set($user->getAvatar())
                ->field('skippedBy.$.cover')->set($user->getCover())
                ->field('skippedBy.$.jobTitle')->set($user->getJobTitle())
                ->field('skippedBy.$.city')->set($user->getCity())
                ->field('skippedBy.$.company')->set($user->getCompany())
                ->upsert(false)
                ->getQuery()
                ->execute();


        $this->dm->flush();
        $this->dm->clear();

        return;
    }

    public function getSimilarProfile(User $user) {
        $userIds = array($user->getId());
        $arrSimilarUsers = array();
        $users = $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->hydrate(false)
                ->select('username', 'name', 'lastname', 'jobTitle', 'company', 'miniResume', 'avatar', 'cover')
                ->field('validated')->equals(true)
                ->field('id')->notIn($userIds)
                ->field('company')->equals($user->getCompany())
                ->sort('profilePoints', -1)
                ->limit(10)
                ->upsert(false)
                ->getQuery()
                ->execute();

        foreach ($users as $id => $u) {
            $userIds[] = $id;
            $u['id'] = $u['_id']->{'$id'};
            unset($u['_id']);
            $arrSimilarUsers[] = $u;
        }

        if (count($arrSimilarUsers) < 10) {
            $users = $this->dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'name', 'lastname', 'jobTitle', 'company', 'miniResume', 'avatar', 'cover')
                    ->field('validated')->equals(true)
                    ->field('id')->notIn($userIds)
                    ->field('city')->equals($user->getCity())
                    ->sort('profilePoints', -1)
                    ->limit(10)
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            foreach ($users as $id => $u) {
                $userIds[] = $id;
                $u['id'] = $u['_id']->{'$id'};
                unset($u['_id']);
                $arrSimilarUsers[] = $u;
            }
        }

        if (count($arrSimilarUsers) < 10) {
            $users = $this->dm->createQueryBuilder('DataBaseBundle:User')
                    ->hydrate(false)
                    ->select('username', 'name', 'lastname', 'jobTitle', 'company', 'miniResume', 'avatar', 'cover')
                    ->field('validated')->equals(true)
                    ->field('id')->notIn($userIds)
                    ->field('basedCountry')->equals($user->getBasedCountry())
                    ->sort('profilePoints', -1)
                    ->limit(10)
                    ->upsert(false)
                    ->getQuery()
                    ->execute();

            foreach ($users as $id => $u) {
                $userIds[] = $id;
                $u['id'] = $u['_id']->{'$id'};
                unset($u['_id']);
                $arrSimilarUsers[] = $u;
            }
        }

        return $arrSimilarUsers;
    }

    public function updateProfilePercentage($user) {

        $percentage = 0;
        $connectionPoints = 0;
        $sessionPoints = 0;
        $connectionMailPoints = 0;
        $points = 0;
        $oldProfilePoints = $user->getProfilePoints() ? $user->getProfilePoints() : 0;


        if ($user->companyType == "Advertiser") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                $percentage+=$this->container->getParameter('user_profile_basic');
            }

            /* Buying Box */
            if ($user->buyTraffic) {
                $percentage+=$this->container->getParameter('user_profile_buy');
            }
            /* Selling Box */
            if ($user->sellTraffic) {
                $percentage+=$this->container->getParameter('user_profile_sell');
            }
            /* Tracking Solutions */
            if ($user->trackingServices) {
                if (array_search(true, $user->trackingServices)) {
                    $percentage+=$this->container->getParameter('user_profile_trafic');
                }
            }


            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (isset($user->paymentTerms[0]) && isset($user->paymentMethods[0])) {
                    /* $paymentTerms=json_decode(json_encode(paymentTerms[0]));
                      $paymentMethods=json_decode(json_encode(paymentMethods[0])); */
                    if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                        $percentage+=$this->container->getParameter('user_profile_payment');
                    }
                }
            }

            /* IOS apps  */
            if ($user->iosApps) {
                $percentage+=$this->container->getParameter('user_profile_iosApps');
            }


            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_profile_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_profile_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_profile_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_profile_languages');
            }
        } else if ($user->companyType == "TrafficSupplier") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                //$test=$this->container->getParameter('user_profile_buy_raffic');
                $percentage+=$this->container->getParameter('user_media_basic');
            }

            /* Buying Box */
            if ($user->buyTraffic) {
                $percentage+=$this->container->getParameter('user_media_buy');
            }
            /* Selling Box */
            if ($user->sellTraffic) {
                $percentage+=$this->container->getParameter('user_media_sell');
            }
            /* Tracking Solutions */
            if ($user->trackingServices) {
                if (array_search(true, $user->trackingServices)) {
                    $percentage+=$this->container->getParameter('user_media_trafic');
                }
            }

            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (isset($user->paymentTerms[0]) && isset($user->paymentMethods[0])) {
                    /* $paymentTerms=json_decode(json_encode(paymentTerms[0]));
                      $paymentMethods=json_decode(json_encode(paymentMethods[0])); */
                    if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                        $percentage+=$this->container->getParameter('user_media_payment');
                    }
                }
            }
            /* IOS apps  */
            if ($user->iosApps) {
                $percentage+=$this->container->getParameter('user_media_iosApps');
            }

            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_media_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_media_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_media_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_media_languages');
            }
        } else if ($user->companyType == "ProductsServices") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                $percentage+=$this->container->getParameter('user_product_basic');
            }
            /* Payment Conditions  */
            if (count($user->paymentTerms) > 0 && count($user->paymentMethods) > 0) {
                if (array_search(true, $user->paymentTerms[0]) && array_search(true, $user->paymentMethods[0])) {
                    $percentage+=$this->container->getParameter('user_product_payment');
                }
            }
            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('user_product_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('user_product_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('user_product_competences');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('user_product_languages');
            }
        } else if ($user->companyType == "Visitor") {
            /* Profile cards */
            if ($user->name != "" && $user->lastname != "" && $user->jobTitle != "" && $user->company != "" && $user->city != "" && $user->basedCountry != "") {
                $percentage+=$this->container->getParameter('visitor_profile_basic');
            }
            /* Summary */
            if ($user->summary) {
                $percentage+=$this->container->getParameter('visitor_profile_summary');
            }
            /* Professional Experiences */
            if ($user->experiences) {
                $percentage+=$this->container->getParameter('visitor_profile_experiences');
            }
            /* Skills */
            if ($user->competences) {
                $percentage+=$this->container->getParameter('visitor_profile_skill');
            }
            /* Languages  */
            if ($user->languages) {
                $percentage+=$this->container->getParameter('visitor_profile_languages');
            }
        }
        if ($user->username != 'dapreyao' && $user->username != 'guillaumegabriel') {
            $date = time();
            if (date('l', $date) == "Sunday") {
                $date = $date - 86400;
            }
            $start_day_week = strtotime("last week monday", $date);
            $end_day_week = strtotime("last week sunday", $date);

            //$dm = $this->get('doctrine_mongodb.odm.document_manager');
            /* $usersActivityData = $dm->getRepository('DataBaseBundle:UsersActivity')
              ->findBy(array('username' => $user->username, "session" => 1)); */
            $usersActivityData = [];
            $q = $this->dm->createQueryBuilder('DataBaseBundle:UsersActivity');
            $q = $q->sort('_id', -1)
                    //->limit(30)
                    ->field('username')->equals($user->username)
                    ->field('session')->equals(1)
                    ->field('updatedTime')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
            //$count=1;
            foreach ($q as $o) {
                $usersActivityData[] = $o;
            }
            $intouchMailData = [];
            $q = $this->dm->createQueryBuilder('DataBaseBundle:Mail');
            $q = $q->sort('_id', -1)
                    //->limit(30)
                    ->field('fromID')->equals($user->getId())
                    ->field('date')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
            //$count=1;
            foreach ($q as $o) {
                $intouchMailData[] = $o;
            }
            $q = $this->dm->createQueryBuilder('DataBaseBundle:Mail');
            $q = $q->sort('_id', -1)
                    //->limit(30)
                    ->field('toID')->equals($user->getId())
                    ->field('date')->range($start_day_week, $end_day_week)
                    ->getQuery()
                    ->execute();
            //$count=1;
            foreach ($q as $o) {
                $intouchMailData[] = $o;
            }
            $sessionPoints = count($usersActivityData) * 5;

            $intouchPoints = count($user->inTouch);
            $touchmailPoints = 3 * count($intouchMailData);
            $points = 2 * $percentage;
            $points = $points + $intouchPoints + $touchmailPoints + $sessionPoints;
        }

        $this->dm->createQueryBuilder('DataBaseBundle:User')
                ->update()
                ->multiple(false)
                ->field('_id')->equals($user->getId())
                ->field('profilePercentage')->set($percentage)
                ->field('profilePoints')->set($points)
                ->upsert(true)
                ->getQuery()
                ->execute();
        $this->dm->flush();
        $this->dm->clear();
        if ($percentage >= 100 && $oldProfilePoints < 100) {
            $this->dm->createQueryBuilder('DataBaseBundle:User')
                    // Find the Campaign
                    ->update()
                    ->multiple(false)
                    ->field('_id')->equals($user->getId())

                    // Update found Campaign
                    ->field('alertsNotifications')->inc(1)
                    ->field('alerts')->push(array('$each' => array(array(
                                'id' => $user->getId() . time(),
                                'type' => 12, //offer details
                                'read' => false,
                                'action' => 'Wel done!Your profile is 100% completed. Members can discover your profile easily now.  ',
                                'username' => "",
                                'name' => "",
                                'lastname' => "",
                                'avatar' => "",
                                'date' => time() * 1000
                            )), '$slice' => -90))
                    ->field('updateDate')->set(time())

                    // Options
                    ->upsert(true)
                    ->getQuery()
                    ->execute();

            $this->dm->flush();
            $this->dm->clear();
        }
        return ["percentage" => $percentage, "points" => $points];
    }

    public function cleanUsername($string) {
        $string = str_replace(' ', '', $string); // Replaces all spaces with hyphens.
        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
        return preg_replace('/ +/', '', $string); // Replaces multiple hyphens with single one.
    }

}
